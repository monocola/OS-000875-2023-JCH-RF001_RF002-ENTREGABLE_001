CREATE OR REPLACE package body SCH_ENTIDAD.PKG_GESTION is

PROCEDURE BUSCAR_ADMINISTRADORES_FILTRO(/*V_SOLICITUD_ENTIDAD_ID  IN SCH_ENTIDAD.TBL_SOLICITUD_ENTIDAD.SOLICITUD_ENTIDAD_ID%TYPE DEFAULT NULL*/
                                V_RAZON_SOCIAL          IN SCH_ENTIDAD.TBL_SOLICITUD_PERSONA.RAZON_SOCIAL%TYPE DEFAULT NULL
                                ,V_NUMERO_RUC            IN SCH_ENTIDAD.TBL_SOLICITUD_PERSONA.NUMERO_DOCUMENTO%TYPE DEFAULT NULL
                                ,V_SECTOR                IN SCH_ENTIDAD.TBL_SOLICITUD.SECTOR%TYPE DEFAULT NULL
                                ,V_NIVEL_GOBIERNO        IN SCH_ENTIDAD.TBL_SOLICITUD.NIVEL_GOBIERNO%TYPE DEFAULT NULL
                                ,V_FECHA_INICIO          IN SCH_ENTIDAD.TBL_SOLICITUD.FECHA_CREACION%TYPE DEFAULT NULL
                                ,V_FECHA_FIN             IN SCH_ENTIDAD.TBL_SOLICITUD.FECHA_CREACION%TYPE DEFAULT NULL
                                ,V_ESTADO_REGISTRO       IN SCH_ENTIDAD.TBL_SOLICITUD.ESTADO_SOLICITUD%TYPE DEFAULT NULL
                                ,V_DEPARTAMENTO          IN SCH_MAESTRA.TBL_UBIGEO.UBIGEO_ID%TYPE DEFAULT NULL
                                ,V_PROVINCIA             IN SCH_MAESTRA.TBL_UBIGEO.UBIGEO_ID%TYPE DEFAULT NULL
                                ,V_DISTRITO              IN SCH_MAESTRA.TBL_UBIGEO.UBIGEO_ID%TYPE DEFAULT NULL
                                ,CUR_TEST                OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
  PER_NAT NUMBER;
  PER_JUR NUMBER;
BEGIN

	 SELECT PARAMETRO_ID INTO PER_NAT FROM SCH_MAESTRA.TBL_PARAMETRO P WHERE P.TIPO_PARAMETRO ='PER_TIPO_PERSONA' AND P.CODIGO_TEXTO ='NAT';
	 SELECT PARAMETRO_ID INTO PER_JUR FROM SCH_MAESTRA.TBL_PARAMETRO P WHERE P.TIPO_PARAMETRO ='PER_TIPO_PERSONA' AND P.CODIGO_TEXTO ='JUR';

	OPEN CUR_TEST FOR
    SELECT distinct SOL_ENT.SOLICITUD_ENTIDAD_ID AS "idSolicitudEntidad",
           replace(obtener_razon_social(SOL_ENT.SOLICITUD_ENTIDAD_ID),',','') AS "razonSocial",
           /*SOL_PER_JUD.RAZON_SOCIAL AS "razonSocial",*/           
           /*SUBSTR(obtener_tipo_documento(SOL_ENT.SOLICITUD_ENTIDAD_ID),0,1)AS "rucId",*/
           replace(obtener_ruc(SOL_ENT.SOLICITUD_ENTIDAD_ID),',','') AS "ruc",           
           SOL_ENT.Sector AS "sectorId",          
           SECT.Valor_Texto AS "sector",
           SOL_ENT.Nivel_Gobierno AS "nivelGobiernoId",
           NIV_GOB.Valor_Texto AS "nivelGobierno",
           SOL_ENT.Fecha_Creacion AS "fechaRegistro",           
           --SUBSTR(obtener_tipo_documento(SOL_ENT.SOLICITUD_ENTIDAD_ID),2) AS "tipoDocumentoId",
          -- SUBSTR(descripcion_dni_ce(SOL_ENT.SOLICITUD_ENTIDAD_ID),2) AS "descripcionTipoDocumento",
           replace(obtener_tipo_documento(SOL_ENT.SOLICITUD_ENTIDAD_ID),',','') AS "tipoDocumentoId",
           replace(descripcion_dni_ce(SOL_ENT.SOLICITUD_ENTIDAD_ID),',','') AS "descripcionTipoDocumento",
           replace(obtener_dni(SOL_ENT.SOLICITUD_ENTIDAD_ID),',','') AS "numeroDocumento",
           SUBSTR(obtener_nombre(SOL_ENT.SOLICITUD_ENTIDAD_ID),2) AS "nombres",          
           /*SOL_PER.NOMBRES AS "nombres",*/
           SUBSTR(obtener_apellido_paterno(SOL_ENT.SOLICITUD_ENTIDAD_ID),2) AS "apellidoPaterno",
           /*SOL_PER.APELLIDO_PATERNO AS "apellidoPaterno",*/
           SUBSTR(obtener_apellido_materno(SOL_ENT.SOLICITUD_ENTIDAD_ID),2) as "apellidoMaterno",
           /*SOL_PER.APELLIDO_MATERNO as "apellidoMaterno",*/
           SUBSTR(obtener_correo(SOL_ENT.SOLICITUD_ENTIDAD_ID),2) as "correLaboral",
           /*SOL_PER.CORREO_PRINCIPAL as "correLaboral",*/
           SUBSTR(obtener_correo_opcional(SOL_ENT.SOLICITUD_ENTIDAD_ID),2) AS "correoOpcional",
           /*SOL_PER.CORREO_SECUNDARIO AS "correoOpcional",*/
           SUBSTR(obtener_telefono(SOL_ENT.SOLICITUD_ENTIDAD_ID),2) AS "telefono",
           /*SOL_PER.TELEFONO_FIJO AS "telefono",*/
           SUBSTR(obtener_celular(SOL_ENT.SOLICITUD_ENTIDAD_ID),2) AS "celular",
           SUBSTR(obtener_celular_secundario(SOL_ENT.SOLICITUD_ENTIDAD_ID),2) AS "celularAlterno",           
           SOL_PER.PUESTO_TRABAJO_ID AS "puestoId",
           '' AS "descripcionPuesto",
           UBDI.UBIGEO_ID AS "distritoId", 
           UBDI.DESCRIPCION AS "distrito",
           UBPR.UBIGEO_ID AS "provinciaId",
           UBPR.DESCRIPCION AS "provincia",
           UBDE.UBIGEO_ID AS "departamentoId",
           UBDE.DESCRIPCION AS "departamento",
           SOL_ENT.Estado_Solicitud AS "estadoId",
           EST_SOL.VALOR_TEXTO AS "estadoSolicitud",
           TO_CHAR(SOL_ENT.FECHA_ALTA,'DD/MM/YYYY') as "fechaAlta",
           TO_CHAR(SOL_ENT.FECHA_BAJA,'DD/MM/YYYY') AS "fechaBaja",
           CA.CARGO_ID AS "cargoId",
           CA.DESCRIPCION AS "descripcionCargo"
    FROM 
        SCH_ENTIDAD.TBL_SOLICITUD SOL_ENT 
    INNER JOIN SCH_ENTIDAD.TBL_SOLICITUD_PERSONA SOL_PER ON SOL_PER.SOLICITUD_ENTIDAD_ID = SOL_ENT.SOLICITUD_ENTIDAD_ID AND SOL_PER.TIPO_PERSONA = PER_NAT
    INNER JOIN SCH_ENTIDAD.TBL_SOLICITUD_PERSONA SOL_PER_JUD ON SOL_PER_JUD.SOLICITUD_ENTIDAD_ID = SOL_ENT.SOLICITUD_ENTIDAD_ID AND SOL_PER_JUD.TIPO_PERSONA = PER_JUR   
    INNER JOIN SCH_ENTIDAD.TBL_CARGO CA ON CA.CARGO_ID = SOL_PER.CARGO_ID  
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UBDI ON UBDI.UBIGEO_ID = SOL_PER_JUD.Ubigeo_Id AND UBDI.UBIGEO_ID = NVL(V_DISTRITO,UBDI.UBIGEO_ID)
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UBPR ON UBPR.UBIGEO_ID = UBDI.UBIGEO_PADRE_ID AND UBPR.UBIGEO_ID = NVL(V_PROVINCIA,UBPR.UBIGEO_ID)
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UBDE ON UBDE.UBIGEO_ID = UBPR.UBIGEO_PADRE_ID AND UBDE.UBIGEO_ID = NVL(V_DEPARTAMENTO,UBDE.UBIGEO_ID)
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SECT ON SECT.PARAMETRO_ID = SOL_ENT.SECTOR 
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO NIV_GOB ON NIV_GOB.PARAMETRO_ID = SOL_ENT.NIVEL_GOBIERNO 
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO EST_SOL ON EST_SOL.PARAMETRO_ID = SOL_ENT.ESTADO_SOLICITUD    
    WHERE
    SOL_PER_JUD.RAZON_SOCIAL LIKE '%'||NVL(V_RAZON_SOCIAL,SOL_PER_JUD.RAZON_SOCIAL)||'%' 
    AND SOL_PER_JUD.NUMERO_DOCUMENTO LIKE '%'||NVL(V_NUMERO_RUC, SOL_PER_JUD.NUMERO_DOCUMENTO)||'%'
    AND ( SOL_ENT.Estado_Solicitud = V_ESTADO_REGISTRO or V_ESTADO_REGISTRO=0)
    AND  ( SOL_ENT.NIVEL_GOBIERNO = V_NIVEL_GOBIERNO or V_NIVEL_GOBIERNO =0)
    AND ( SOL_ENT.SECTOR = V_SECTOR or V_SECTOR =0)    
    AND (TO_CHAR(SOL_ENT.FECHA_CREACION,'YYYYMMDD') BETWEEN TO_CHAR(V_FECHA_INICIO,'YYYYMMDD') AND TO_CHAR(V_FECHA_FIN,'YYYYMMDD')
           OR (V_FECHA_INICIO IS NULL AND V_FECHA_FIN IS NULL))  
    /*AND (UBDI.UBIGEO_ID = NVL(V_DISTRITO,UBDI.UBIGEO_ID) OR SOL_PER_JUD.Ubigeo_Id IS NULL)*/
    ORDER BY SOL_ENT.SOLICITUD_ENTIDAD_ID DESC;

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<BUSCAR_ADMINISTRADORES_FILTRO>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END BUSCAR_ADMINISTRADORES_FILTRO;

PROCEDURE SP_BUSCAR_CUENTAS_ASOCIADAS(V_ENTIDAD_ID  IN SCH_ENTIDAD.TBL_CUENTA_ENTIDAD.ENTIDAD_ID%TYPE DEFAULT NULL 
                                  ,V_TEXTO              IN VARCHAR2 DEFAULT NULL                               
                                  ,CUR_TEST                OUT cursor_test) 
  IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT ROWNUM as "nroCuentas", T.*
           FROM(
    SELECT DISTINCT CTA_ASO.CUENTA_ENTIDAD_ID AS "cuentaId",
       CTA_ASO.USUARIO_ID AS "usuarioId",
       CTA_ASO.PERSONA_ID AS "personaId",                  
       PER_NAT.NOMBRES AS "nombres",
       PER_NAT.APELLIDO_PATERNO AS "apellidoPaterno",
       NVL(PER_NAT.APELLIDO_MATERNO,' ') AS "apellidoMaterno",
       (CASE WHEN CTA_ASO.PUESTO_TRABAJO_ID = '0' THEN '-'
            WHEN CTA_ASO.PUESTO_TRABAJO_ID IS NULL THEN '-'
            ELSE CTA_ASO.PUESTO_TRABAJO_ID END) AS "descripcionPuesto",
       DOC.DOCUMENTO_ID AS "documentoId",         
       DOC.TIPO_DOCUMENTO AS "tipoDocumento",
       PA_DOC.VALOR_TEXTO AS "descTipoDocumento",
       DOC.NUMERO_DOCUMENTO AS "nroDocumento",     
       CTA_ASO.ESTADO_REGISTRO AS "estadoId",
       EST.VALOR_TEXTO AS "descripcionEstado" ,
       PAIS.PAIS_ID AS "paisId",
       PAIS.NOMBRE_PAIS AS "nombrePais",
       CTA_ASO.Correo_Id AS "correoId",
       COR.CORREO AS "correo",
       CTA_ASO.Telefono_Id AS "telefonoId",
       TELF.NUMERO_TELEFONO AS "numeroTelefono",
       TELF.NUMERO_ANEXO AS "anexo",
       TO_CHAR(CTA_ASO.FECHA_CREACION,'DD/MM/YYYY') AS "fechaAlta",
       DECODE(CTA_ASO.ESTADO_REGISTRO,'0',TO_CHAR(CTA_ASO.FECHA_MODIFICACION,'DD/MM/YYYY'),'') AS "fechaBaja",
       /*(CASE WHEN ROL.ROL_ID = 100 THEN '0'            
             ELSE '1' END) */
       DECODE(ROL.ROL_ID,'100','0','1')AS "flagCuentaEditable"                         
    FROM SCH_ENTIDAD.TBL_CUENTA_ENTIDAD CTA_ASO    
    INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PER_NAT ON PER_NAT.PERSONA_ID = CTA_ASO.PERSONA_ID 
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO EST ON EST.TIPO_PARAMETRO = 'ESTADO_REGISTRO' AND EST.CODIGO_TEXTO = CTA_ASO.ESTADO_REGISTRO 
    INNER JOIN SCH_PERSONA.Tbl_Documento DOC ON DOC.PERSONA_ID = CTA_ASO.PERSONA_ID 
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO PA_DOC ON PA_DOC.CODIGO_NUMERO = DOC.TIPO_DOCUMENTO AND PA_DOC.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO'
    LEFT JOIN SCH_PERSONA.TBL_TELEFONO TELF ON TELF.TELEFONO_ID = CTA_ASO.Telefono_Id     
    LEFT JOIN SCH_PERSONA.TBL_CORREO COR ON COR.CORREO_ID = CTA_ASO.Correo_Id 
    LEFT JOIN SCH_MAESTRA.TBL_PAIS PAIS ON PAIS.PAIS_ID = PER_NAT.PAIS_ID 
    INNER JOIN SCH_SEGURIDAD.Tbl_Entidad_Usuario ENT_USU ON ENT_USU.ENTIDAD_ID = CTA_ASO.ENTIDAD_ID AND ENT_USU.USUARIO_ID = CTA_ASO.USUARIO_ID
    INNER JOIN SCH_SEGURIDAD.TBL_USUARIO_ROL USU_ROL ON USU_ROL.USUARIO_ID = CTA_ASO.USUARIO_ID
    INNER JOIN SCH_SEGURIDAD.TBL_ROL ROL ON ROL.ROL_ID = USU_ROL.ROL_ID     
    WHERE 1 = 1 
    AND CTA_ASO.ENTIDAD_ID = NVL(V_ENTIDAD_ID,CTA_ASO.ENTIDAD_ID) 
    AND (PER_NAT.NOMBRES LIKE '%'||NVL(V_TEXTO,PER_NAT.NOMBRES)||'%' OR 
    PER_NAT.APELLIDO_PATERNO LIKE '%'||NVL(V_TEXTO,PER_NAT.APELLIDO_PATERNO)||'%' OR 
    PER_NAT.APELLIDO_MATERNO LIKE '%'||NVL(V_TEXTO,PER_NAT.APELLIDO_MATERNO)||'%' OR 
    ROL.NOMBRE LIKE '%'||NVL(V_TEXTO,ROL.NOMBRE)||'%' OR EST.VALOR_TEXTO LIKE '%'||NVL(V_TEXTO,EST.VALOR_TEXTO)||'%' 
    OR TO_CHAR(ENT_USU.FECHA_CREACION,'YYYYMMDD') LIKE '%'||NVL(V_TEXTO,ENT_USU.FECHA_CREACION)||'%') 
    ORDER BY CTA_ASO.Cuenta_Entidad_Id DESC) T;   

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<BUSCAR_CUENTAS_ASOCIADAS>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_CUENTAS_ASOCIADAS;

PROCEDURE SP_BUSCAR_ENTIDAD(V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ENTIDAD.ENTIDAD_ID%TYPE DEFAULT NULL,                                                      
                            CUR_TEST             OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT ENT.ENTIDAD_ID AS entidadId,
       ENT.SECTOR_ID AS sectorId,
       SECT.Valor_Texto AS sector,       
       ENT.NIVEL_GOBIERNO_ID AS nivelGobiernoId,
       GOB.VALOR_TEXTO AS nivelGobierno,
       ENT.DESCRIPCION_ENTIDAD AS descripcionEntidad,
       ENT.SIGLAS AS sigla,  
       ENT.PERSONA_ID AS personaId,     
       PER_JUR.RAZON_SOCIAL AS razonSocial,
       PER_JUR.NOMBRE_COMERCIAL AS nombreComercial,
       DOC.TIPO_DOCUMENTO AS tipoDocumento,
       DOC.NUMERO_DOCUMENTO AS numeroDocumento,
       DIR.DIRECCION_ID AS direccionId,
       DIR.DIRECCION AS direccion, 
       COR.CORREO_ID AS correoId,
       COR.CORREO AS correo,
       TEL.TELEFONO_ID AS telefonoId,
       TEL.NUMERO_TELEFONO AS telefono,
       TEL.NUMERO_ANEXO AS anexo, 
       ENT.URL_LOGO_ENTIDAD AS logo,      
       ENT.URL_WEB_ENTIDAD AS urlWeb,
       UB_DIST.UBIGEO_ID AS distritoId,
       UB_DIST.DESCRIPCION AS distrito,
       UB_PROV.UBIGEO_ID AS provinciaId,
       UB_PROV.DESCRIPCION AS provincia,
       UB_DEP.UBIGEO_ID AS departamentoId,
       UB_DEP.DESCRIPCION AS departamento,
       ENT.URL_LOGO_ENTIDAD AS urlLogo,
       ENT.FLAG_ACTUALIZA AS "flagActualiza",
       DIRE.DIRECCION_ID AS "direccionFiscalId",
       DIRE.DIRECCION_COMPLETA AS "direccionFiscal",
       ENT.URL_PORTADA_ENTIDAD AS urlPortada,
       ENT.NRO_SINDICATOS       AS "nroSindicatos",
       ENT.tipo_entidad_pub_id  AS tipoentidadpubid,
       tipo.valor_texto         AS tipoentidadpub    
    FROM
        sch_entidad.tbl_entidad  ENT  
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SECT ON SECT.PARAMETRO_ID = ENT.SECTOR_ID 
    LEFT JOIN sch_maestra.tbl_parametro        tipo ON tipo.parametro_id = ent.tipo_entidad_pub_id
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO GOB ON GOB.PARAMETRO_ID = ENT.NIVEL_GOBIERNO_ID 
    INNER JOIN SCH_PERSONA.TBL_PERSONA PERS ON PERS.PERSONA_ID = ENT.PERSONA_ID 
    LEFT JOIN SCH_PERSONA.TBL_PERSONA_JURIDICA PER_JUR ON PER_JUR.PERSONA_ID = ENT.PERSONA_ID 
    INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOC ON DOC.DOCUMENTO_ID = PERS.DOCUMENTO_ID 
    LEFT JOIN SCH_PERSONA.TBL_DIRECCION DIRE ON DIRE.PERSONA_ID = PERS.PERSONA_ID
    LEFT JOIN SCH_ENTIDAD.TBL_DIRECCION DIR ON DIR.DIRECCION_ID = ENT.DIRECCION_ID 
    LEFT JOIN SCH_PERSONA.TBL_CORREO COR ON COR.PERSONA_ID = ENT.PERSONA_ID 
    LEFT JOIN SCH_PERSONA.TBL_TELEFONO TEL ON TEL.PERSONA_ID = ENT.PERSONA_ID     
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UB_DIST ON UB_DIST.UBIGEO_ID = ENT.UBIGEO_ID  
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UB_PROV ON UB_PROV.UBIGEO_ID = UB_DIST.UBIGEO_PADRE_ID  
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UB_DEP ON UB_DEP.UBIGEO_ID = UB_PROV.UBIGEO_PADRE_ID 
    WHERE ENT.ENTIDAD_ID = V_ENTIDAD_ID;

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<BUSCAR_ENTIDAD>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_ENTIDAD;

PROCEDURE SP_VALIDAR_USUARIO(V_NUMERO_DOCUMENTO      IN SCH_PERSONA.tbl_documento.NUMERO_DOCUMENTO%TYPE DEFAULT NULL                                                        
                            ,CUR_TEST                OUT cursor_test)

IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT U.USUARIO_ID AS "usuarioId",
       U.USUARIO AS "usuario",       
       U.CORREO_ELECTRONICO AS correoElectronico,      
       U.PERSONA_ID AS "personaId"     
    FROM SCH_SEGURIDAD.TBL_USUARIO U        
    WHERE U.PERSONA_ID IN  (
    SELECT D.PERSONA_ID FROM SCH_PERSONA.TBL_DOCUMENTO D
    WHERE D.NUMERO_DOCUMENTO=V_NUMERO_DOCUMENTO) 
    AND U.ESTADO_REGISTRO = '1';

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_VALIDAR_USUARIO>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_VALIDAR_USUARIO;

PROCEDURE SP_BUSCAR_ROLES(V_ENTIDAD_ID            IN TBL_CUENTA_ENTIDAD.ENTIDAD_ID%TYPE DEFAULT NULL
                         ,V_APLICACION_ID         IN SCH_SEGURIDAD.TBL_ROL.APLICACION_ID%TYPE DEFAULT NULL                                                                  
                         ,CUR_TEST                       OUT cursor_test)

IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT ROWNUM as "nroRoles", T.*
           FROM( 
     SELECT    
          CTA_ASO.CUENTA_ENTIDAD_ID AS "cuentaId", 
          USU_ROL.USUARIO_ROL_ID as "usuarioRolId",    
          ROL.ROL_ID AS "rolId",          
          ROL.NOMBRE AS "nombreRol",
          USU_ROL.ESTADO_REGISTRO AS "estadoId",
          EST.VALOR_TEXTO AS "descripcionEstado",                
          TO_CHAR(USU_ROL.FECHA_INICIO_VIGENCIA,'YYYY-MM-DD HH24:MI:SS') AS "fechaAltaRol",
          TO_CHAR(USU_ROL.FECHA_FIN_VIGENCIA,'YYYY-MM-DD HH24:MI:SS') AS "fechaBajaRol"

    FROM SCH_SEGURIDAD.TBL_ROL ROL
    INNER JOIN SCH_SEGURIDAD.TBL_USUARIO_ROL USU_ROL ON USU_ROL.ROL_ID = ROL.ROL_ID 
    INNER JOIN SCH_ENTIDAD.TBL_CUENTA_ENTIDAD CTA_ASO ON CTA_ASO.USUARIO_ID = USU_ROL.USUARIO_ID     
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO EST ON EST.TIPO_PARAMETRO = 'ESTADO_REGISTRO' AND EST.CODIGO_TEXTO = USU_ROL.ESTADO_REGISTRO
    WHERE 1 = 1 
    AND CTA_ASO.ENTIDAD_ID = V_ENTIDAD_ID 
    AND ROL.APLICACION_ID = V_APLICACION_ID 
    /*AND USU_ROL.ESTADO_REGISTRO = '1' */ 
    ORDER BY USU_ROL.USUARIO_ROL_ID DESC) T;

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_ROLES>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_ROLES;

PROCEDURE SP_BUSCAR_ORGANIGRAMA(V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL 
                               ,V_TIPO               IN SCH_ENTIDAD.TBL_ORGANIGRAMA.TIPO_ORGANO_UO_ID%TYPE DEFAULT NULL 
                               ,V_TEXTO              IN VARCHAR2 DEFAULT NULL                                                                             
                               ,CUR_TEST             OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
        SELECT ROWNUM as "rowNum",T."organigramaId",T."entidadId",T."areaId",
               T."sedeId",T."padreOrganigramaId",T."puesto",T."orden",
               T."nivel",T."tipoOrganoUoId",T."naturalezaOrgano",T."nivelGobiernoId",
               T."descripcion",T."descripcionCorta",T."sigla",T."personaResponsableId",
               T."telefonoId",T."correoId",T."descripcionTipoOrg",T."estado",T."nombres",
               T."apellidoPaterno",T."apellidoMaterno",T."telefono",T."correo",T."tipoDocumento",
               T."nroDocumento",T."descripOrganoPadre",T."paisId",T."nombrePais",T."desNivel",
               T."desNaturaleza",T."estadoRegistro",T."destipoDocumento", T."urlFoto"
         FROM 
         (SELECT DISTINCT      
         ORGA.ORGANIGRAMA_ID as "organigramaId", 
         ORGA.ENTIDAD_ID as "entidadId", 
         ORGA.AREA_ID as "areaId", 
         ORGA.SEDE_ID as "sedeId", 
         ORGA.PADRE_ORGANIGRAMA_ID as "padreOrganigramaId", 
         PU.DESCRIPCION as "puesto", 
         ORGA.ORDEN as "orden", 
         ORGA.NIVEL as "nivel", 
         ORGA.TIPO_ORGANO_UO_ID as "tipoOrganoUoId", 
         ORGA.NATURALEZA_ORGANO as "naturalezaOrgano", 
         ORGA.NIVEL_GOBIERNO_ID as "nivelGobiernoId", 
         ORGA.DESCRIPCION as "descripcion", 
         ORGA.DESCRIPCION_CORTA as "descripcionCorta", 
         ORGA.SIGLA as "sigla", 
         ORGA.PERSONA_RESPONSABLE_ID as "personaResponsableId", 
         ORGA.TELEFONO_ID as "telefonoId", 
         ORGA.CORREO_ID as "correoId",
         PA.DESCRIPCION AS "descripcionTipoOrg",
         DECODE(ORGA.ESTADO_REGISTRO,'1','ACTIVO','INACTIVO') AS "estado",
         RES.NOMBRES AS "nombres",
         RES.APELLIDO_PATERNO AS "apellidoPaterno",
         RES.APELLIDO_MATERNO AS "apellidoMaterno",
         TEL.NUMERO_TELEFONO AS "telefono",
         CO.CORREO AS "correo",
         DOCU.TIPO_DOCUMENTO AS "tipoDocumento",
         DOCU.NUMERO_DOCUMENTO AS "nroDocumento",
         PAPA.DESCRIPCION AS "descripOrganoPadre",
         PAIS.PAIS_ID AS "paisId",
         PAIS.NOMBRE_PAIS AS "nombrePais",
         NIVEL.DESCRIPCION AS "desNivel",
         NATURA.DESCRIPCION AS "desNaturaleza",
         ORGA.ESTADO_REGISTRO AS "estadoRegistro",
         PARA.VALOR_TEXTO AS "destipoDocumento",
         EMP.URL_FOTO AS "urlFoto"
    FROM SCH_ENTIDAD.TBL_ORGANIGRAMA ORGA 
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO PA ON PA.PARAMETRO_ID = ORGA.TIPO_ORGANO_UO_ID AND PA.ESTADO_REGISTRO = '1'
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO NIVEL ON NIVEL.PARAMETRO_ID = ORGA.NIVEL AND NIVEL.ESTADO_REGISTRO = '1'
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO NATURA ON  NATURA.PARAMETRO_ID = ORGA.NATURALEZA_ORGANO AND NATURA.ESTADO_REGISTRO = '1'
    LEFT JOIN SCH_PERSONA.TBL_PERSONA_NATURAL RES ON RES.PERSONA_ID = ORGA.PERSONA_RESPONSABLE_ID
    LEFT JOIN SCH_MAESTRA.TBL_PAIS PAIS ON PAIS.PAIS_ID = RES.PAIS_ID
    LEFT JOIN SCH_PERSONA.TBL_DOCUMENTO DOCU ON DOCU.PERSONA_ID = ORGA.PERSONA_RESPONSABLE_ID
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO PARA ON PARA.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO' AND PARA.CODIGO_NUMERO = DOCU.TIPO_DOCUMENTO
    LEFT JOIN SCH_PERSONA.TBL_TELEFONO TEL ON TEL.TELEFONO_ID = ORGA.TELEFONO_ID
    LEFT JOIN SCH_PERSONA.TBL_CORREO CO ON CO.CORREO_ID = ORGA.CORREO_ID
    LEFT JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA PAPA ON PAPA.ORGANIGRAMA_ID = ORGA.PADRE_ORGANIGRAMA_ID  
    LEFT JOIN SCH_ENTIDAD.TBL_PUESTO PU ON PU.ORGANIGRAMA_ID = ORGA.ORGANIGRAMA_ID AND PU.ES_JEFE='S' 
    LEFT JOIN SCH_ENTIDAD.TBL_EMPLEADO EMP ON EMP.PUESTO_ID = PU.PUESTO_ID     
    WHERE 1 = 1
         AND PU.ES_JEFE = 'S'
         AND ORGA.ESTADO_REGISTRO = 1
         AND ORGA.ENTIDAD_ID = NVL(V_ENTIDAD_ID,ORGA.ENTIDAD_ID)
         AND (V_TEXTO IS NULL OR UPPER(ORGA.DESCRIPCION) LIKE '%'|| UPPER(V_TEXTO) || '%'
         OR UPPER(ORGA.SIGLA) LIKE '%'|| UPPER(V_TEXTO) || '%' 
         OR UPPER(NATURA.DESCRIPCION) LIKE '%'|| UPPER(V_TEXTO) || '%'
         OR UPPER(NIVEL.DESCRIPCION) LIKE '%'|| UPPER(V_TEXTO) || '%'
         OR UPPER(PAPA.DESCRIPCION) LIKE '%'|| UPPER(V_TEXTO) || '%')
         AND ORGA.TIPO_ORGANO_UO_ID = NVL(V_TIPO,ORGA.TIPO_ORGANO_UO_ID) 
         )T
         ORDER BY T."organigramaId" DESC;


    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_ORGANIGRAMA>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_ORGANIGRAMA;

PROCEDURE SP_VALIDAR_TAREAS_CTA_ASOCIADA(V_CUENTA_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_CUENTA_ENTIDAD.CUENTA_ENTIDAD_ID%TYPE DEFAULT NULL                                                                                                             
                            ,CUR_TEST             OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT
         CTA_ENT.CUENTA_ENTIDAD_ID AS "cuentaId",
         round(DBMS_RANDOM.VALUE(0, 1)) as "flagTareaPendiente" 
         /*DECODE(round(DBMS_RANDOM.VALUE(0, 1)),'0','Se puede eliminar la Cuenta Asociada','No se puede eliminar la Cuenta Asociada') as "mensajeDescriptivo"*/
    FROM SCH_ENTIDAD.TBL_CUENTA_ENTIDAD CTA_ENT 
    WHERE 1 = 1 
    AND CTA_ENT.CUENTA_ENTIDAD_ID = V_CUENTA_ENTIDAD_ID;
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_VALIDAR_TAREAS_CTA_ASOCIADA>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_VALIDAR_TAREAS_CTA_ASOCIADA;

PROCEDURE SP_VALIDA_CTA_ASOCIADA(V_PERSONA_ID         IN SCH_ENTIDAD.TBL_CUENTA_ENTIDAD.PERSONA_ID%TYPE DEFAULT NULL                                                                                                             
                            ,CUR_TEST             OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT
         CTA_ENT.CUENTA_ENTIDAD_ID AS "cuentaId",
         ENT.DESCRIPCION_ENTIDAD AS "nombreEntidad"         
    FROM SCH_ENTIDAD.TBL_CUENTA_ENTIDAD CTA_ENT 
    INNER JOIN SCH_ENTIDAD.TBL_ENTIDAD ENT ON ENT.ENTIDAD_ID = CTA_ENT.ENTIDAD_ID 
    WHERE 1 = 1 
    AND CTA_ENT.PERSONA_ID = V_PERSONA_ID 
    AND CTA_ENT.ESTADO_REGISTRO = '1';
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_VALIDA_CTA_ASOCIADA>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_VALIDA_CTA_ASOCIADA;

PROCEDURE SP_PERSONA_ORGANIGRAMA(V_TIPO_DOC     IN SCH_PERSONA.TBL_DOCUMENTO.TIPO_DOCUMENTO%TYPE DEFAULT NULL 
                               ,V_NRODOCUMENTO  IN SCH_PERSONA.TBL_DOCUMENTO.NUMERO_DOCUMENTO%TYPE DEFAULT NULL                                      
                               ,CUR_TEST        OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT
         ORGA.ORGANIGRAMA_ID as "organigramaId", 
         ORGA.ENTIDAD_ID as "entidadId", 
         ORGA.AREA_ID as "areaId", 
         ORGA.SEDE_ID as "sedeId", 
         ORGA.PADRE_ORGANIGRAMA_ID as "padreOrganigramaId", 
         ORGA.PUESTO as "puesto", 
         ORGA.ORDEN as "orden", 
         ORGA.NIVEL as "nivel", 
         ORGA.TIPO_ORGANO_UO_ID as "tipoOrganoUoId", 
         ORGA.NATURALEZA_ORGANO as "naturalezaOrgano", 
         ORGA.NIVEL_GOBIERNO_ID as "nivelGobiernoId", 
         ORGA.DESCRIPCION as "descripcion", 
         ORGA.DESCRIPCION_CORTA as "descripcionCorta", 
         ORGA.SIGLA as "sigla", 
         ORGA.PERSONA_RESPONSABLE_ID as "personaResponsableId", 
         ORGA.TELEFONO_ID as "telefonoId", 
         ORGA.CORREO_ID as "correoId",
         '' AS "descripcionTipoOrg",
         DECODE(ORGA.ESTADO_REGISTRO,'1','ACTIVO','INACTIVO') AS "estado",
         RES.NOMBRES AS "nombres",
         RES.APELLIDO_PATERNO AS "apellidoPaterno",
         RES.APELLIDO_MATERNO AS "apellidoMaterno",
         '' AS "telefono",
         '' AS "correo",
         DOCU.TIPO_DOCUMENTO AS "tipoDocumento",
         DOCU.NUMERO_DOCUMENTO AS "nroDocumento",
         ''AS "descripOrganoPadre",
         '' AS "paisId",
         '' AS "nombrePais",
         '' AS "desNivel",
         '' AS "desNaturaleza",
         ORGA.ESTADO_REGISTRO AS "estadoRegistro",
         '' AS "destipoDocumento"
    FROM SCH_ENTIDAD.TBL_ORGANIGRAMA ORGA 
    INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL RES ON RES.PERSONA_ID = ORGA.PERSONA_RESPONSABLE_ID
    INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOCU ON DOCU.PERSONA_ID = RES.PERSONA_ID
    WHERE 1 = 1
         AND DOCU.TIPO_DOCUMENTO = V_TIPO_DOC
         AND DOCU.NUMERO_DOCUMENTO = V_NRODOCUMENTO
         AND ORGA.ESTADO_REGISTRO = '1'
    ORDER BY ORGA.ORGANIGRAMA_ID DESC;    
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_PERSONA_ORGANIGRAMA>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_PERSONA_ORGANIGRAMA;


PROCEDURE SP_PERSONA_ENTIDAD(V_TIPO_DOC     IN SCH_PERSONA.TBL_DOCUMENTO.TIPO_DOCUMENTO%TYPE DEFAULT NULL 
                               ,V_NRODOCUMENTO  IN SCH_PERSONA.TBL_DOCUMENTO.NUMERO_DOCUMENTO%TYPE DEFAULT NULL                                      
                               ,CUR_TEST        OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT
         ENT.ENTIDAD_ID as "entidadId",          
         JUR.RAZON_SOCIAL AS "descripcionEntidad",
         RES.NOMBRES AS "nombrePersona",
         RES.APELLIDO_PATERNO AS "apellidoPaterno",
         RES.APELLIDO_MATERNO AS "apellidoMaterno"
    FROM SCH_ENTIDAD.TBL_ENTIDAD ENT 
    INNER JOIN SCH_PERSONA.TBL_PERSONA_JURIDICA JUR ON JUR.PERSONA_ID = ENT.PERSONA_ID
    INNER JOIN SCH_ENTIDAD.TBL_CUENTA_ENTIDAD C ON C.ENTIDAD_ID = ENT.ENTIDAD_ID AND C.ESTADO_REGISTRO = '1'
    INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL RES ON RES.PERSONA_ID = C.PERSONA_ID
    INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOCU ON DOCU.PERSONA_ID = RES.PERSONA_ID
    WHERE 1 = 1
         AND DOCU.TIPO_DOCUMENTO = V_TIPO_DOC
         AND DOCU.NUMERO_DOCUMENTO = V_NRODOCUMENTO
         AND ENT.ESTADO_REGISTRO = '1'
    ORDER BY ENT.ENTIDAD_ID DESC;    
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_PERSONA_ENTIDAD>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_PERSONA_ENTIDAD;

PROCEDURE SP_BUSCAR_UNIDAD_ORGANICA(V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL 
                                   ,CUR_TEST             OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
  TIP_UO            NUMBER;
BEGIN

  SELECT PARAMETRO_ID
      INTO TIP_UO
      FROM SCH_MAESTRA.TBL_PARAMETRO P
     WHERE P.TIPO_PARAMETRO = 'TIPO_ORGANO'
       AND P.CODIGO_TEXTO = 'TIPO_UNIDAD_ORGANICA';

    OPEN CUR_TEST FOR

SELECT UO.* FROM (SELECT  T.organigramaId , 
         T.entidadId, 
         T.areaId , 
         T.sedeId ,         
         T.puesto , 
         T.orden , 
         T.nivel , 
         T.desNivel ,
         T.tipoOrganoUoId , 
         T.descripcionTipoOrg ,        
         T.nivelGobiernoId , 
         T.unidadOrganica , 
         T.descripcionCorta , 
         T.sigla as ,
         T.estadoRegistro AS , 
         T.estado,
         T.personaResponsableId ,    
         T.nombres ,
         T.apellidoPaterno ,
         T.apellidoMaterno ,
         T.telefonoId ,
         T.telefono ,
         T.correoId,
         T.correo,
         T.tipoDocumento,
         T.destipoDocumento,
         T.nroDocumento,
         T.padreOrganigramaId,
         T.descripOrganoPadre,
         T.paisId,
         T.nombrePais 
	 	FROM (select LEVEL AS jerarquia,
		 ORG.ORGANIGRAMA_ID as organigramaId, 
         ORG.ENTIDAD_ID as entidadId,
         ORG.AREA_ID as areaId, 
         ORG.SEDE_ID as sedeId,         
         ORG.PUESTO as puesto, 
         ORG.ORDEN as orden, 
         ORG.NIVEL as nivel,
         NIVEL.DESCRIPCION AS desNivel,
         ORG.TIPO_ORGANO_UO_ID as tipoOrganoUoId, 
         PA.DESCRIPCION AS descripcionTipoOrg,        
         ORG.NIVEL_GOBIERNO_ID as nivelGobiernoId, 
         ORG.DESCRIPCION as unidadOrganica, 
         ORG.DESCRIPCION_CORTA as descripcionCorta, 
         ORG.SIGLA as sigla,
         ORG.ESTADO_REGISTRO AS estadoRegistro , 
         DECODE(ORG.ESTADO_REGISTRO,'1','ACTIVO','INACTIVO') AS estado,
         ORG.PERSONA_RESPONSABLE_ID as personaResponsableId,    
         RES.NOMBRES AS nombres,
         RES.APELLIDO_PATERNO AS apellidoPaterno,
         RES.APELLIDO_MATERNO AS apellidoMaterno,
         ORG.TELEFONO_ID as telefonoId,
         TEL.NUMERO_TELEFONO AS telefono,
         ORG.CORREO_ID as correoId,
         CO.CORREO AS correo,
         DOCU.TIPO_DOCUMENTO AS tipoDocumento,
         PARA.VALOR_TEXTO AS destipoDocumento,
         DOCU.NUMERO_DOCUMENTO AS nroDocumento,
         ORG.PADRE_ORGANIGRAMA_ID as padreOrganigramaId,
         PAPA.DESCRIPCION AS descripOrganoPadre,
         PAIS.PAIS_ID AS paisId,
         PAIS.NOMBRE_PAIS AS nombrePais 
from SCH_ENTIDAD.TBL_ORGANIGRAMA ORG
INNER JOIN SCH_MAESTRA.TBL_PARAMETRO PA ON PA.PARAMETRO_ID = ORG.TIPO_ORGANO_UO_ID AND PA.ESTADO_REGISTRO = '1'
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO NIVEL ON NIVEL.PARAMETRO_ID = ORG.NIVEL AND NIVEL.ESTADO_REGISTRO = '1'
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO NATURA ON  NATURA.PARAMETRO_ID = ORG.NATURALEZA_ORGANO AND NATURA.ESTADO_REGISTRO = '1'
    LEFT JOIN SCH_PERSONA.TBL_PERSONA_NATURAL RES ON RES.PERSONA_ID = ORG.PERSONA_RESPONSABLE_ID
    LEFT JOIN sch_entidad.tbl_puesto          pu ON pu.organigrama_id = org.organigrama_id
    LEFT JOIN sch_entidad.tbl_detalle_uo      det ON org.entidad_id = det.entidad_id 
AND pu.puesto_id = det.puesto_id
    LEFT JOIN SCH_MAESTRA.TBL_PAIS PAIS ON PAIS.PAIS_ID = RES.PAIS_ID
    LEFT JOIN SCH_PERSONA.TBL_DOCUMENTO DOCU ON DOCU.PERSONA_ID = ORG.PERSONA_RESPONSABLE_ID
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO PARA ON PARA.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO' AND PARA.CODIGO_NUMERO = DOCU.TIPO_DOCUMENTO
    LEFT JOIN SCH_PERSONA.TBL_TELEFONO TEL ON TEL.TELEFONO_ID = ORG.TELEFONO_ID
    LEFT JOIN SCH_PERSONA.TBL_CORREO CO ON CO.CORREO_ID = ORG.CORREO_ID
    LEFT JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA PAPA ON PAPA.ORGANIGRAMA_ID = ORG.PADRE_ORGANIGRAMA_ID 
 WHERE ORG.ENTIDAD_ID = NVL(V_ENTIDAD_ID,ORG.ENTIDAD_ID)  AND ORG.ESTADO_REGISTRO ='1' AND pu.es_jefe = 'S' 
start with ORG.PADRE_ORGANIGRAMA_Id IS NULL 
connect by prior ORG.ORGANIGRAMA_ID = ORG.PADRE_ORGANIGRAMA_Id ) T 
WHERE T.jerarquia <> 1) UO
ORDER BY UO.organigramaId ASC;   
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_UNIDAD_ORGANICA>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_UNIDAD_ORGANICA;

PROCEDURE SP_BUSCAR_ORGANIGRAMA_PADRE(V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL 
                                     ,V_PERSONA_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PERSONA_RESPONSABLE_ID%TYPE DEFAULT NULL
                                     ,V_ORGANIGRAMA_ID     IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE DEFAULT NULL                                     
                                     ,V_PUESTO             IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PUESTO%TYPE DEFAULT NULL  
                                     ,V_ESTADO_REGISTRO    IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ESTADO_REGISTRO%TYPE DEFAULT NULL
                                     ,V_UNIDAD_ID          IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE DEFAULT NULL
                                     ,CUR_TEST             OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN




    OPEN CUR_TEST FOR
       SELECT DISTINCT ORG.ORGANIGRAMA_ID AS "idOrganigrama",
        ORG.ENTIDAD_ID AS "idEntidad",
       ORG.AREA_ID as "areaId", 
       ORG.SEDE_ID as "sedeId",         
       ORG.PUESTO as "puesto", 
       ORG.ORDEN as "orden",        
       ORG.DESCRIPCION AS "descripcion",
       ORG.NIVEL AS "nivelId",
       NIVEL.DESCRIPCION AS "desNivel",
       ORG.SIGLA AS "sigla",
       ORG.NATURALEZA_ORGANO AS "naturalezaId",
       NATURA.DESCRIPCION AS "desNaturaleza",
       ORG.ESTADO_REGISTRO AS "estadoId",
       DECODE(ORG.ESTADO_REGISTRO,'1','ACTIVO','INACTIVO') AS "estado",
       ORG.PADRE_ORGANIGRAMA_ID AS "padreIdOrgHijo",
       ORG.TIPO_ORGANO_UO_ID AS "tipoOrganoId",
       TIP_ORG.DESCRIPCION AS "desTipoOrgano",
       ORG.NIVEL_GOBIERNO_ID AS "nivelGobiernoId",
       ORG.DESCRIPCION_CORTA AS "descripcionCorta",
       ORG.PERSONA_RESPONSABLE_ID AS "personaResponsableId",
       RES.Nombres AS "nombres",
       RES.APELLIDO_PATERNO AS "apellidoPaterno",
       RES.APELLIDO_MATERNO AS "apellidoMaterno",
       DOCU.TIPO_DOCUMENTO AS "tipoDocumentoId",
       PARA.DESCRIPCION AS "tipoDocumento",
       DOCU.NUMERO_DOCUMENTO AS "numeroDocumento",
       ORG.TELEFONO_ID AS "telefonoId",
       TEL.NUMERO_TELEFONO AS "telefono",
       ORG.CORREO_ID AS "correoId",
       CO.CORREO AS "correo",
       PAIS.PAIS_ID AS "paisId",
       PAIS.NOMBRE_PAIS AS "nombrePais",
       '' as "padreId"

    FROM SCH_ENTIDAD.Tbl_Organigrama ORG 
    LEFT JOIN SCH_ENTIDAD.Tbl_Organigrama ORG_HIJO ON ORG_HIJO.PADRE_ORGANIGRAMA_ID = ORG.ORGANIGRAMA_ID
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO NIVEL ON NIVEL.PARAMETRO_ID = ORG.NIVEL AND NIVEL.ESTADO_REGISTRO = '1'
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TIP_ORG ON TIP_ORG.PARAMETRO_ID = ORG.TIPO_ORGANO_UO_ID AND TIP_ORG.ESTADO_REGISTRO = '1'
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO NATURA ON  NATURA.PARAMETRO_ID = ORG.NATURALEZA_ORGANO AND NATURA.ESTADO_REGISTRO = '1' 
    INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL RES ON RES.PERSONA_ID = ORG.PERSONA_RESPONSABLE_ID
    LEFT JOIN SCH_MAESTRA.TBL_PAIS PAIS ON PAIS.PAIS_ID = RES.PAIS_ID
    LEFT JOIN SCH_PERSONA.TBL_DOCUMENTO DOCU ON DOCU.PERSONA_ID = ORG.PERSONA_RESPONSABLE_ID
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO PARA ON PARA.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO' AND PARA.CODIGO_NUMERO = DOCU.TIPO_DOCUMENTO
    LEFT JOIN SCH_PERSONA.TBL_TELEFONO TEL ON TEL.TELEFONO_ID = ORG.TELEFONO_ID
    LEFT JOIN SCH_PERSONA.TBL_CORREO CO ON CO.CORREO_ID = ORG.CORREO_ID
    WHERE 1 = 1 
    AND ORG.TIPO_ORGANO_UO_ID = (SELECT PARAMETRO_ID 
								   FROM SCH_MAESTRA.TBL_PARAMETRO 
								  WHERE TIPO_PARAMETRO = 'TIPO_ORGANO' 
									AND CODIGO_TEXTO = 'TIPO_ORGANO') 
    AND (ORG.ESTADO_REGISTRO = NVL(V_ESTADO_REGISTRO,ORG.ESTADO_REGISTRO) OR ORG_HIJO.ESTADO_REGISTRO = NVL(V_ESTADO_REGISTRO,ORG_HIJO.ESTADO_REGISTRO))     
    AND ORG.PADRE_ORGANIGRAMA_ID IS NULL 
    AND /*(*/ORG.PERSONA_RESPONSABLE_ID = NVL(V_PERSONA_ID,ORG.PERSONA_RESPONSABLE_ID)/* OR ORG_HIJO.PERSONA_RESPONSABLE_ID = NVL(V_PERSONA_ID,ORG_HIJO.PERSONA_RESPONSABLE_ID)) */
    AND ORG.ORGANIGRAMA_ID = NVL(V_ORGANIGRAMA_ID,ORG.ORGANIGRAMA_ID) 
    AND ORG.ORGANIGRAMA_ID = NVL(V_UNIDAD_ID,ORG.ORGANIGRAMA_ID)
    AND (UPPER(ORG.PUESTO) LIKE '%'||NVL(UPPER(V_PUESTO),UPPER(ORG.PUESTO))||'%' OR UPPER(ORG_HIJO.PUESTO) LIKE '%'||NVL(UPPER(V_PUESTO),UPPER(ORG_HIJO.PUESTO))||'%')
    AND ORG.ENTIDAD_ID = V_ENTIDAD_ID
    ORDER BY ORG.ORGANIGRAMA_ID DESC;  
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_ORGANIGRAMA_PADRE>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_ORGANIGRAMA_PADRE;

PROCEDURE SP_BUSCAR_ORGANIGRAMA_HIJO(V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL 
                                    ,V_PERSONA_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PERSONA_RESPONSABLE_ID%TYPE DEFAULT NULL                                
                                    ,V_UNIDAD_ID          IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE DEFAULT NULL
                                    ,V_PUESTO             IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PUESTO%TYPE DEFAULT NULL  
                                    ,V_ESTADO_REGISTRO    IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ESTADO_REGISTRO%TYPE DEFAULT NULL
                                    ,CUR_TEST             OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT DISTINCT T.*
    FROM (SELECT UNIDAD_HIJO.ORGANIGRAMA_ID AS "idOrganigrama",
             UNIDAD_HIJO.ENTIDAD_ID AS "idEntidad", 
       UNIDAD_HIJO.AREA_ID as "areaId", 
       UNIDAD_HIJO.SEDE_ID as "sedeId",         
       UNIDAD_HIJO.PUESTO as "puesto", 
       UNIDAD_HIJO.ORDEN as "orden",      
       UNIDAD_HIJO.DESCRIPCION AS "descripcion",
       UNIDAD_HIJO.NIVEL AS "nivelId",
       NIVEL.DESCRIPCION AS "desNivel",
       UNIDAD_HIJO.SIGLA AS "sigla",
       UNIDAD_HIJO.NATURALEZA_ORGANO AS "naturalezaId",
       NATURA.DESCRIPCION AS "desNaturaleza",
       UNIDAD_HIJO.ESTADO_REGISTRO AS "estadoId",
       DECODE(UNIDAD_HIJO.ESTADO_REGISTRO,'1','ACTIVO','INACTIVO') AS "estado",
       UNIDAD_HIJO.PADRE_ORGANIGRAMA_ID AS "padreIdOrgHijo",
       UNIDAD_HIJO.TIPO_ORGANO_UO_ID AS "tipoOrganoId",
       TIP_ORG.DESCRIPCION AS "desTipoOrgano",
       UNIDAD_HIJO.NIVEL_GOBIERNO_ID AS "nivelGobiernoId",
       UNIDAD_HIJO.DESCRIPCION_CORTA AS "descripcionCorta",
       UNIDAD_HIJO.PERSONA_RESPONSABLE_ID AS "personaResponsableId",
       RES.Nombres AS "nombres",
       RES.APELLIDO_PATERNO AS "apellidoPaterno",
       RES.APELLIDO_MATERNO AS "apellidoMaterno",
       DOCU.TIPO_DOCUMENTO AS "tipoDocumentoId",
       PARA.DESCRIPCION AS "tipoDocumento",
       DOCU.NUMERO_DOCUMENTO AS "numeroDocumento",
       UNIDAD_HIJO.TELEFONO_ID AS "telefonoId",
       TEL.NUMERO_TELEFONO AS "telefono",
       UNIDAD_HIJO.CORREO_ID AS "correoId",
       CO.CORREO AS "correo",
       PAIS.PAIS_ID AS "paisId",
       PAIS.NOMBRE_PAIS AS "nombrePais",
       ORG_HIJO.Padre_Organigrama_Id as "padreId"

    FROM SCH_ENTIDAD.Tbl_Organigrama UNIDAD_HIJO 
    INNER JOIN SCH_ENTIDAD.Tbl_Organigrama ORG_HIJO ON ORG_HIJO.Organigrama_Id = UNIDAD_HIJO.Padre_Organigrama_Id
    LEFT JOIN SCH_ENTIDAD.Tbl_Organigrama ORG ON ORG.Organigrama_Id = ORG_HIJO.Padre_Organigrama_Id
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO NIVEL ON NIVEL.PARAMETRO_ID = UNIDAD_HIJO.NIVEL AND NIVEL.ESTADO_REGISTRO = '1'
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TIP_ORG ON TIP_ORG.PARAMETRO_ID = UNIDAD_HIJO.TIPO_ORGANO_UO_ID AND TIP_ORG.ESTADO_REGISTRO = '1'
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO NATURA ON  NATURA.PARAMETRO_ID = UNIDAD_HIJO.NATURALEZA_ORGANO AND NATURA.ESTADO_REGISTRO = '1'  
    INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL RES ON RES.PERSONA_ID = UNIDAD_HIJO.PERSONA_RESPONSABLE_ID
    LEFT JOIN SCH_MAESTRA.TBL_PAIS PAIS ON PAIS.PAIS_ID = RES.PAIS_ID
    LEFT JOIN SCH_PERSONA.TBL_DOCUMENTO DOCU ON DOCU.PERSONA_ID = UNIDAD_HIJO.PERSONA_RESPONSABLE_ID
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO PARA ON PARA.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO' AND PARA.CODIGO_NUMERO = DOCU.TIPO_DOCUMENTO
    LEFT JOIN SCH_PERSONA.TBL_TELEFONO TEL ON TEL.TELEFONO_ID = UNIDAD_HIJO.TELEFONO_ID
    LEFT JOIN SCH_PERSONA.TBL_CORREO CO ON CO.CORREO_ID = UNIDAD_HIJO.CORREO_ID
    WHERE 1 = 1 
    AND UNIDAD_HIJO.ESTADO_REGISTRO = NVL(V_ESTADO_REGISTRO,UNIDAD_HIJO.ESTADO_REGISTRO) 
    AND UNIDAD_HIJO.PERSONA_RESPONSABLE_ID = NVL(V_PERSONA_ID,UNIDAD_HIJO.PERSONA_RESPONSABLE_ID)
    AND ORG_HIJO.ORGANIGRAMA_ID = UNIDAD_HIJO.PADRE_ORGANIGRAMA_ID/*ORG_HIJO.ORGANIGRAMA_ID = NVL(V_ORGANIGRAMA_ID,ORG_HIJO.ORGANIGRAMA_ID) */ 
   /* AND ORG_HIJO.ORGANIGRAMA_ID = NVL(V_ORGANIGRAMA_ID,ORG_HIJO.ORGANIGRAMA_ID)*/
    AND UNIDAD_HIJO.ORGANIGRAMA_ID = NVL(V_UNIDAD_ID,UNIDAD_HIJO.ORGANIGRAMA_ID)
    AND UPPER(UNIDAD_HIJO.PUESTO) LIKE '%'||NVL(UPPER(V_PUESTO),UPPER(UNIDAD_HIJO.PUESTO))||'%'
    AND UNIDAD_HIJO.ENTIDAD_ID = V_ENTIDAD_ID 
    AND UNIDAD_HIJO.PADRE_ORGANIGRAMA_ID IS NOT NULL

    UNION ALL 
    SELECT ORG_HIJO.ORGANIGRAMA_ID AS "idOrganigramaDto",
       ORG_HIJO.ENTIDAD_ID AS "idEntidadDto", 
       ORG_HIJO.AREA_ID as "areaIdDto", 
       ORG_HIJO.SEDE_ID as "sedeIdDto",         
       ORG_HIJO.PUESTO as "puestoDto", 
       ORG_HIJO.ORDEN as "ordenDto",      
       ORG_HIJO.DESCRIPCION AS "descripcionDto",
       ORG_HIJO.NIVEL AS "nivelIdDto",
       NIVEL.DESCRIPCION AS "desNivelDto",
       ORG_HIJO.SIGLA AS "siglaDto",
       ORG_HIJO.NATURALEZA_ORGANO AS "naturalezaIdDto",
       NATURA.DESCRIPCION AS "desNaturalezaDto",
       ORG_HIJO.ESTADO_REGISTRO AS "estadoIdDto",
       DECODE(ORG_HIJO.ESTADO_REGISTRO,'1','ACTIVO','INACTIVO') AS "estadoDto",
       ORG_HIJO.PADRE_ORGANIGRAMA_ID AS "padreIdOrgHijoDto",
       ORG_HIJO.TIPO_ORGANO_UO_ID AS "tipoOrganoIdDto",
       TIP_ORG.DESCRIPCION AS "desTipoOrganoDto",
       ORG_HIJO.NIVEL_GOBIERNO_ID AS "nivelGobiernoIdDto",
       ORG_HIJO.DESCRIPCION_CORTA AS "descripcionCortaDto",
       ORG_HIJO.PERSONA_RESPONSABLE_ID AS "personaResponsableIdDto",
       RES.Nombres AS "nombresDto",
       RES.APELLIDO_PATERNO AS "apellidoPaternoDto",
       RES.APELLIDO_MATERNO AS "apellidoMaternoDto",
       DOCU.TIPO_DOCUMENTO AS "tipoDocumentoIdDto",
       PARA.DESCRIPCION AS "tipoDocumentoDto",
       DOCU.NUMERO_DOCUMENTO AS "numeroDocumentoDto",
       ORG_HIJO.TELEFONO_ID AS "telefonoIdDto",
       TEL.NUMERO_TELEFONO AS "telefonoDto",
       ORG_HIJO.CORREO_ID AS "correoIdDto",
       CO.CORREO AS "correoDto",
       PAIS.PAIS_ID AS "paisIdDto",
       PAIS.NOMBRE_PAIS AS "nombrePaisDto",
       ORG.Padre_Organigrama_Id as "padreIdDto"

    FROM SCH_ENTIDAD.Tbl_Organigrama UNIDAD_HIJO 
    INNER JOIN SCH_ENTIDAD.Tbl_Organigrama ORG_HIJO ON ORG_HIJO.Organigrama_Id = UNIDAD_HIJO.Padre_Organigrama_Id
    LEFT JOIN SCH_ENTIDAD.Tbl_Organigrama ORG ON ORG.Organigrama_Id = ORG_HIJO.Padre_Organigrama_Id
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO NIVEL ON NIVEL.PARAMETRO_ID = ORG_HIJO.NIVEL AND NIVEL.ESTADO_REGISTRO = '1'
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TIP_ORG ON TIP_ORG.PARAMETRO_ID = ORG_HIJO.TIPO_ORGANO_UO_ID AND TIP_ORG.ESTADO_REGISTRO = '1'
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO NATURA ON  NATURA.PARAMETRO_ID = ORG_HIJO.NATURALEZA_ORGANO AND NATURA.ESTADO_REGISTRO = '1'  
    INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL RES ON RES.PERSONA_ID = ORG_HIJO.PERSONA_RESPONSABLE_ID
    LEFT JOIN SCH_MAESTRA.TBL_PAIS PAIS ON PAIS.PAIS_ID = RES.PAIS_ID
    LEFT JOIN SCH_PERSONA.TBL_DOCUMENTO DOCU ON DOCU.PERSONA_ID = ORG_HIJO.PERSONA_RESPONSABLE_ID
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO PARA ON PARA.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO' AND PARA.CODIGO_NUMERO = DOCU.TIPO_DOCUMENTO
    LEFT JOIN SCH_PERSONA.TBL_TELEFONO TEL ON TEL.TELEFONO_ID = ORG_HIJO.TELEFONO_ID
    LEFT JOIN SCH_PERSONA.TBL_CORREO CO ON CO.CORREO_ID = ORG_HIJO.CORREO_ID
    WHERE 1 = 1 
    AND ORG_HIJO.ESTADO_REGISTRO = NVL(V_ESTADO_REGISTRO,ORG_HIJO.ESTADO_REGISTRO) 
    AND ORG_HIJO.PERSONA_RESPONSABLE_ID = NVL(V_PERSONA_ID,ORG_HIJO.PERSONA_RESPONSABLE_ID)
    AND ORG_HIJO.ORGANIGRAMA_ID = UNIDAD_HIJO.PADRE_ORGANIGRAMA_ID/*ORG_HIJO.ORGANIGRAMA_ID = NVL(V_ORGANIGRAMA_ID,ORG_HIJO.ORGANIGRAMA_ID) */ 
    /*AND ORG.ORGANIGRAMA_ID = NVL(V_ORGANIGRAMA_ID,ORG.ORGANIGRAMA_ID)*/
    AND UNIDAD_HIJO.ORGANIGRAMA_ID = NVL(V_UNIDAD_ID,UNIDAD_HIJO.ORGANIGRAMA_ID)
    AND UPPER(ORG_HIJO.PUESTO) LIKE '%'||NVL(UPPER(V_PUESTO),UPPER(ORG_HIJO.PUESTO))||'%'
    AND ORG_HIJO.ENTIDAD_ID = V_ENTIDAD_ID 
    AND ORG_HIJO.PADRE_ORGANIGRAMA_ID IS NOT NULL 
    /*ORDER BY ORG_HIJO.ORGANIGRAMA_ID*/) T; 
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_ORGANIGRAMA_HIJO>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_ORGANIGRAMA_HIJO;

PROCEDURE SP_BUSCAR_PERSONA_ORGANIGRAMA(V_ENTIDAD_ID      IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL
                                       ,V_TEXTO           IN VARCHAR2 DEFAULT NULL
                                       ,CUR_TEST          OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT  ORG.PERSONA_RESPONSABLE_ID AS "personaResponsableId",
       RES.Nombres AS "nombres",
       RES.APELLIDO_PATERNO AS "apellidoPaterno",
       RES.APELLIDO_MATERNO AS "apellidoMaterno"

    FROM SCH_ENTIDAD.Tbl_Organigrama ORG     
    INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL RES ON RES.PERSONA_ID = ORG.PERSONA_RESPONSABLE_ID    
    WHERE 1 = 1      
    AND (RES.NOMBRES LIKE '%'||NVL(V_TEXTO,RES.NOMBRES)||'%' OR 
    RES.APELLIDO_PATERNO LIKE '%'||NVL(V_TEXTO,RES.APELLIDO_PATERNO)||'%' OR 
    RES.APELLIDO_MATERNO LIKE '%'||NVL(V_TEXTO,RES.APELLIDO_MATERNO)||'%')   
    AND ORG.ENTIDAD_ID = V_ENTIDAD_ID 
    ORDER BY ORG.ORGANIGRAMA_ID DESC; 
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PERSONA_ORGANIGRAMA>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_PERSONA_ORGANIGRAMA;

PROCEDURE SP_BUSCA_SEDE(V_ENTIDAD_ID      IN SCH_ENTIDAD.Tbl_Sede.ENTIDAD_ID%TYPE DEFAULT NULL
                       ,V_DISTRITO        IN SCH_MAESTRA.TBL_UBIGEO.UBIGEO_ID%TYPE DEFAULT NULL
                       ,V_PROVINCIA       IN SCH_MAESTRA.TBL_UBIGEO.UBIGEO_ID%TYPE DEFAULT NULL
                       ,V_DEPARTAMENTO    IN SCH_MAESTRA.TBL_UBIGEO.UBIGEO_ID%TYPE DEFAULT NULL 
                       ,V_ESTADO_REGISTRO IN SCH_ENTIDAD.Tbl_Sede.ESTADO_REGISTRO%TYPE DEFAULT NULL
                       ,V_SEDE_ID         IN SCH_ENTIDAD.Tbl_Sede.SEDE_ID%TYPE DEFAULT NULL
                       ,CUR_TEST          OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT  SE.SEDE_ID AS "sedeId",
            SE.NOMBRE_SEDE AS "nombreSede",
            SE.DIRECCION_ID AS "direccionId",
            DIRE.DIRECCION AS "direccion",
            DEP.UBIGEO_ID AS "departamentoId",
            DEP.DESCRIPCION AS "departamento",
            PROV.UBIGEO_ID AS "provinciaId",
            PROV.DESCRIPCION AS "provincia",
            DIST.UBIGEO_ID AS "distritoId",
            DIST.DESCRIPCION AS "distrito",
            SE.ESTADO_REGISTRO AS "estadoId",
            DECODE(SE.ESTADO_REGISTRO,'1','ACTIVO','INACTIVO') AS "estado",
            SE.ANEXO AS "anexo",
            SE.TELEFONO AS "telefono",
            SE.NOMBRE_REPRESENTANTE AS "nombreRepresentante",
            DIRE.REFERENCIA_DIRECCION AS "referenciaLugar"
    FROM SCH_ENTIDAD.TBL_SEDE SE 
    INNER JOIN SCH_ENTIDAD.TBL_DIRECCION DIRE ON DIRE.DIRECCION_ID = SE.DIRECCION_ID
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO DIST ON DIST.UBIGEO_ID = DIRE.UBIGEO_ID     
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO PROV ON PROV.UBIGEO_ID = DIST.UBIGEO_PADRE_ID 
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO DEP ON DEP.UBIGEO_ID = PROV.UBIGEO_PADRE_ID 
    WHERE 1 = 1 
    AND SE.ESTADO_REGISTRO = NVL(V_ESTADO_REGISTRO,SE.ESTADO_REGISTRO) 
    AND SE.ENTIDAD_ID = V_ENTIDAD_ID 
    AND DIST.UBIGEO_ID = NVL(V_DISTRITO,DIST.UBIGEO_ID) 
    AND PROV.UBIGEO_ID = NVL(V_PROVINCIA,PROV.UBIGEO_ID) 
    AND DEP.UBIGEO_ID = NVL(V_DEPARTAMENTO,DEP.UBIGEO_ID) 
    AND SE.SEDE_ID = NVL(V_SEDE_ID,SE.SEDE_ID)
    ORDER BY SE.SEDE_ID DESC ; 
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCA_SEDE>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCA_SEDE;


PROCEDURE SP_BUSCAR_USUARIOS_POR_ROL_ENT(
						V_ENTIDAD_ID      IN SCH_ENTIDAD.TBL_ENTIDAD.ENTIDAD_ID%TYPE DEFAULT NULL
                       ,V_ROL_ID          IN SCH_SEGURIDAD.TBL_USUARIO_ROL.ROL_ID%TYPE DEFAULT NULL
					   ,V_APLICACION_ID   IN SCH_SEGURIDAD.TBL_ROL.APLICACION_ID%TYPE DEFAULT NULL
                       ,CUR_TEST          OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
	SELECT  CE.CUENTA_ENTIDAD_ID AS "cuentaEntidadId", 
			CE.ENTIDAD_ID AS "entidadId", 
			UR.ROL_ID AS "rolId", 
			CE.USUARIO_ID AS "usuarioId", 
			CE.PERSONA_ID AS "personaId", 
			PERS.NOMBRES || ' ' || PERS.APELLIDO_PATERNO ||' '||PERS.APELLIDO_MATERNO AS "nombreCompleto",
            ROL.NOMBRE AS "rolNombre"
	FROM SCH_ENTIDAD.TBL_CUENTA_ENTIDAD CE
	INNER JOIN SCH_ENTIDAD.TBL_ENTIDAD EN ON EN.ENTIDAD_ID = CE.ENTIDAD_ID
	INNER JOIN SCH_SEGURIDAD.TBL_USUARIO_ROL UR ON CE.USUARIO_ID = UR.USUARIO_ID
	INNER JOIN SCH_SEGURIDAD.TBL_USUARIO U ON UR.USUARIO_ID = U.USUARIO_ID
        INNER JOIN SCH_SEGURIDAD.TBL_ROL ROL ON ROL.ROL_ID = UR.ROL_ID
	INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PERS ON PERS.PERSONA_ID = U.PERSONA_ID
	WHERE 
	EN.ESTADO_REGISTRO = 1
	AND EN.ENTIDAD_ID = NVL(V_ENTIDAD_ID,EN.ENTIDAD_ID) 
	AND UR.ESTADO_REGISTRO = 1 
	AND UR.ROL_ID = NVL(V_ROL_ID,UR.ROL_ID) 
	AND U.ESTADO_REGISTRO = 1 
	AND ROL.ESTADO_REGISTRO = 1 
	AND  ROL.APLICACION_ID=NVL(V_APLICACION_ID,ROL.APLICACION_ID);
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_USUARIOS_POR_ROL_ENT>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_USUARIOS_POR_ROL_ENT;


PROCEDURE SP_BUSCAR_ENTIDADES_ACTIVAS(CUR_TEST                OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT ENT.ENTIDAD_ID AS entidadId,
       ENT.SECTOR_ID AS sectorId,
       SECT.Valor_Texto AS sector,       
       ENT.NIVEL_GOBIERNO_ID AS nivelGobiernoId,
       GOB.VALOR_TEXTO AS nivelGobierno,
       ENT.DESCRIPCION_ENTIDAD AS descripcionEntidad,
       ENT.SIGLAS AS sigla,  
       ENT.PERSONA_ID AS personaId,     
       PER_JUR.RAZON_SOCIAL AS razonSocial,
       PER_JUR.NOMBRE_COMERCIAL AS nombreComercial,
       DOC.TIPO_DOCUMENTO AS tipoDocumento,
       DOC.NUMERO_DOCUMENTO AS numeroDocumento,
       DIR.DIRECCION_ID AS direccionId,
       DIR.DIRECCION AS direccion, 
       COR.CORREO_ID AS correoId,
       COR.CORREO AS correo,
       TEL.TELEFONO_ID AS telefonoId,
       TEL.NUMERO_TELEFONO AS telefono,
       TEL.NUMERO_ANEXO AS anexo, 
       ENT.URL_LOGO_ENTIDAD AS logo,      
       ENT.URL_WEB_ENTIDAD AS urlWeb,
       UB_DIST.UBIGEO_ID AS distritoId,
       UB_DIST.DESCRIPCION AS distrito,
       UB_PROV.UBIGEO_ID AS provinciaId,
       UB_PROV.DESCRIPCION AS provincia,
       UB_DEP.UBIGEO_ID AS departamentoId,
       UB_DEP.DESCRIPCION AS departamento,
       ENT.URL_LOGO_ENTIDAD AS urlLogo,
       ENT.FLAG_ACTUALIZA AS "flagActualiza",
       DIRE.DIRECCION_ID AS "direccionFiscalId",
       DIRE.DIRECCION_COMPLETA AS "direccionFiscal",
       ENT.URL_PORTADA_ENTIDAD AS urlPortada,
       ENT.tipo_entidad_pub_id  AS tipoentidadpubid,
       ENT.NRO_SINDICATOS AS nroSindicatos,
        tipo.VALOR_TEXTO        AS tipoentidadpub
    FROM SCH_ENTIDAD.TBL_ENTIDAD ENT 
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SECT ON SECT.PARAMETRO_ID = ENT.SECTOR_ID 
    LEFT JOIN sch_maestra.tbl_parametro        tipo ON tipo.parametro_id = ent.tipo_entidad_pub_id
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO GOB ON GOB.PARAMETRO_ID = ENT.NIVEL_GOBIERNO_ID 
    INNER JOIN SCH_PERSONA.TBL_PERSONA PERS ON PERS.PERSONA_ID = ENT.PERSONA_ID 
    INNER JOIN SCH_PERSONA.TBL_PERSONA_JURIDICA PER_JUR ON PER_JUR.PERSONA_ID = ENT.PERSONA_ID 
    INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOC ON DOC.DOCUMENTO_ID = PERS.DOCUMENTO_ID 
    LEFT JOIN SCH_PERSONA.TBL_DIRECCION DIRE ON DIRE.PERSONA_ID = (SELECT DIRECCION_ID FROM SCH_PERSONA.TBL_DIRECCION WHERE PERSONA_ID = PERS.PERSONA_ID AND ROWNUM = 1)
    LEFT JOIN SCH_ENTIDAD.TBL_DIRECCION DIR ON DIR.DIRECCION_ID = ENT.DIRECCION_ID 
    LEFT JOIN SCH_PERSONA.TBL_CORREO COR ON COR.CORREO_ID = (SELECT CORREO_ID FROM SCH_PERSONA.TBL_CORREO COR WHERE PERSONA_ID = ENT.PERSONA_ID AND ROWNUM = 1) 
    LEFT JOIN SCH_PERSONA.TBL_TELEFONO TEL ON TEL.TELEFONO_ID = (SELECT TELEFONO_ID FROM SCH_PERSONA.TBL_TELEFONO WHERE PERSONA_ID = ENT.PERSONA_ID AND ROWNUM = 1)     
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UB_DIST ON UB_DIST.UBIGEO_ID = ENT.UBIGEO_ID  
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UB_PROV ON UB_PROV.UBIGEO_ID = UB_DIST.UBIGEO_PADRE_ID  
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UB_DEP ON UB_DEP.UBIGEO_ID = UB_PROV.UBIGEO_PADRE_ID 
    WHERE ENT.ESTADO_REGISTRO = '1';

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_ENTIDADES_ACTIVAS>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_ENTIDADES_ACTIVAS;

PROCEDURE SP_BUSCAR_ENTIDADES_POR_IDS(V_LIST_IDS           IN VARCHAR2,
                                                CUR_TEST                OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
  VL_SELECT      VARCHAR(32000);

BEGIN
    VL_SELECT := 'SELECT ENT.ENTIDAD_ID AS entidadId,
       ENT.SECTOR_ID AS sectorId,
       SECT.Valor_Texto AS sector,       
       ENT.NIVEL_GOBIERNO_ID AS nivelGobiernoId,
       GOB.VALOR_TEXTO AS nivelGobierno,
       ENT.DESCRIPCION_ENTIDAD AS descripcionEntidad,
       ENT.SIGLAS AS sigla,  
       ENT.PERSONA_ID AS personaId,     
       PER_JUR.RAZON_SOCIAL AS razonSocial,
       PER_JUR.NOMBRE_COMERCIAL AS nombreComercial,
       DOC.TIPO_DOCUMENTO AS tipoDocumento,
       DOC.NUMERO_DOCUMENTO AS numeroDocumento,
       DIR.DIRECCION_ID AS direccionId,
       DIR.DIRECCION AS direccion, 
       COR.CORREO_ID AS correoId,
       COR.CORREO AS correo,
       TEL.TELEFONO_ID AS telefonoId,
       TEL.NUMERO_TELEFONO AS telefono,
       TEL.NUMERO_ANEXO AS anexo, 
       ENT.URL_LOGO_ENTIDAD AS logo,      
       ENT.URL_WEB_ENTIDAD AS urlWeb,
       UB_DIST.UBIGEO_ID AS distritoId,
       UB_DIST.DESCRIPCION AS distrito,
       UB_PROV.UBIGEO_ID AS provinciaId,
       UB_PROV.DESCRIPCION AS provincia,
       UB_DEP.UBIGEO_ID AS departamentoId,
       UB_DEP.DESCRIPCION AS departamento,
       ENT.URL_LOGO_ENTIDAD AS urlLogo,
       ENT.FLAG_ACTUALIZA AS flagActualiza,
       DIRE.DIRECCION_ID AS direccionFiscalId,
       DIRE.DIRECCION_COMPLETA AS direccionFiscal,
       ENT.URL_PORTADA_ENTIDAD AS urlPortada,
       ENT.NRO_SINDICATOS AS nroSindicatos,
       ENT.TIPO_ENTIDAD_PUB_ID AS tipoEntidadPubId,
       TIPO.VALOR_TEXTO AS tipoEntidadPub
    FROM SCH_ENTIDAD.TBL_ENTIDAD ENT 
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SECT ON SECT.PARAMETRO_ID = ENT.SECTOR_ID 
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO TIPO ON TIPO.PARAMETRO_ID = ENT.TIPO_ENTIDAD_PUB_ID 
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO GOB ON GOB.PARAMETRO_ID = ENT.NIVEL_GOBIERNO_ID 
    INNER JOIN SCH_PERSONA.TBL_PERSONA PERS ON PERS.PERSONA_ID = ENT.PERSONA_ID 
    INNER JOIN SCH_PERSONA.TBL_PERSONA_JURIDICA PER_JUR ON PER_JUR.PERSONA_ID = ENT.PERSONA_ID 
    INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOC ON DOC.DOCUMENTO_ID = PERS.DOCUMENTO_ID 
    LEFT JOIN SCH_PERSONA.TBL_DIRECCION DIRE ON DIRE.DIRECCION_ID = (SELECT DIRECCION_ID FROM SCH_PERSONA.TBL_DIRECCION WHERE PERSONA_ID = PERS.PERSONA_ID AND ROWNUM = 1)
    LEFT JOIN SCH_ENTIDAD.TBL_DIRECCION DIR ON DIR.DIRECCION_ID = ENT.DIRECCION_ID 
    LEFT JOIN SCH_PERSONA.TBL_CORREO COR ON COR.CORREO_ID = (SELECT CORREO_ID FROM SCH_PERSONA.TBL_CORREO COR WHERE PERSONA_ID = ENT.PERSONA_ID AND ROWNUM = 1) 
    LEFT JOIN SCH_PERSONA.TBL_TELEFONO TEL ON TEL.TELEFONO_ID = (SELECT TELEFONO_ID FROM SCH_PERSONA.TBL_TELEFONO WHERE PERSONA_ID = ENT.PERSONA_ID AND ROWNUM = 1)
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UB_DIST ON UB_DIST.UBIGEO_ID = ENT.UBIGEO_ID  
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UB_PROV ON UB_PROV.UBIGEO_ID = UB_DIST.UBIGEO_PADRE_ID  
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UB_DEP ON UB_DEP.UBIGEO_ID = UB_PROV.UBIGEO_PADRE_ID 
    WHERE ENT.ESTADO_REGISTRO = 1 AND ENT.ENTIDAD_ID IN ('||V_LIST_IDS||')';
    OPEN CUR_TEST FOR VL_SELECT;    

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_ENTIDADES_POR_IDS>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_ENTIDADES_POR_IDS;


PROCEDURE SP_BUSCAR_ENTIDADES_POR_USUARIO (V_ENTIDAD_ID IN SCH_ENTIDAD.TBL_ENTIDAD.ENTIDAD_ID%type
                                            ,CUR_TEST OUT cursor_test)

IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT   
    SETE.ENTIDAD_ID AS entidadId,
	SETE.DESCRIPCION_ENTIDAD AS descripcion,
	SSTEU.USUARIO_ID AS usuarioId,
	SSTU.USUARIO AS usuario,
	SSTU.PERSONA_ID AS personaId,
	SETE.nivel_gobierno_id AS nivelGobierno,
	SETE.URL_LOGO_ENTIDAD AS logoEntidad,
	SETE.url_web_entidad AS webEntidad,
	SETE.estado_registro AS estadoRegistro,
	SETE.url_portada_entidad AS portadaEntidad
    FROM 
	SCH_ENTIDAD.TBL_ENTIDAD SETE 
	INNER JOIN SCH_SEGURIDAD.TBL_ENTIDAD_USUARIO SSTEU ON ssteu.entidad_id=sete.entidad_id
    	INNER JOIN SCH_SEGURIDAD.TBL_USUARIO SSTU ON sstu.usuario_id=ssteu.usuario_id
    WHERE SSTU.persona_id=V_ENTIDAD_ID;       
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<BUSCAR_ADMINISTRADORES_FILTRO>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_ENTIDADES_POR_USUARIO;

PROCEDURE SP_BUSCAR_ENTIDAD_FILT(V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ENTIDAD.ENTIDAD_ID%TYPE DEFAULT NULL,
                                 V_SECTOR_ID          IN SCH_ENTIDAD.TBL_ENTIDAD.SECTOR_ID%TYPE DEFAULT NULL,
                                 V_NIVEL_GOBIERNO_ID  IN SCH_ENTIDAD.TBL_ENTIDAD.NIVEL_GOBIERNO_ID%TYPE DEFAULT NULL,
                                 V_TIPO_ENTIDAD_ID    IN SCH_ENTIDAD.TBL_ENTIDAD.TIPO_ENTIDAD_ID%TYPE DEFAULT NULL, 
                                 V_TIPO_ENT_PUB_ID    IN SCH_ENTIDAD.TBL_ENTIDAD.TIPO_ENTIDAD_PUB_ID%TYPE DEFAULT NULL, 
                                 V_DESCRIP_ENTIDAD    IN SCH_ENTIDAD.TBL_ENTIDAD.DESCRIPCION_ENTIDAD%TYPE DEFAULT NULL,                                                       
                                 CUR_TEST             OUT cursor_test)IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT ENT.ENTIDAD_ID AS entidadId,
       ENT.SECTOR_ID AS sectorId,
       SECT.Valor_Texto AS sector,       
       ENT.NIVEL_GOBIERNO_ID AS nivelGobiernoId,
       GOB.VALOR_TEXTO AS nivelGobierno,
       ENT.DESCRIPCION_ENTIDAD AS descripcionEntidad,
       ENT.SIGLAS AS sigla,  
       ENT.PERSONA_ID AS personaId,     
       PER_JUR.RAZON_SOCIAL AS razonSocial,
       PER_JUR.NOMBRE_COMERCIAL AS nombreComercial,
       DOC.TIPO_DOCUMENTO AS tipoDocumento,
       DOC.NUMERO_DOCUMENTO AS numeroDocumento,
       DIR.DIRECCION_ID AS direccionId,
       DIR.DIRECCION AS direccion, 
       COR.CORREO_ID AS correoId,
       COR.CORREO AS correo,
       TEL.TELEFONO_ID AS telefonoId,
       TEL.NUMERO_TELEFONO AS telefono,
       TEL.NUMERO_ANEXO AS anexo, 
       ENT.URL_LOGO_ENTIDAD AS logo,      
       ENT.URL_WEB_ENTIDAD AS urlWeb,
       UB_DIST.UBIGEO_ID AS distritoId,
       UB_DIST.DESCRIPCION AS distrito,
       UB_PROV.UBIGEO_ID AS provinciaId,
       UB_PROV.DESCRIPCION AS provincia,
       UB_DEP.UBIGEO_ID AS departamentoId,
       UB_DEP.DESCRIPCION AS departamento,
       ENT.URL_LOGO_ENTIDAD AS urlLogo,
       ENT.FLAG_ACTUALIZA AS "flagActualiza",
       DIRE.DIRECCION_ID AS "direccionFiscalId",
       DIRE.DIRECCION_COMPLETA AS "direccionFiscal",
       ENT.URL_PORTADA_ENTIDAD AS urlPortada,
       ENT.tipo_entidad_pub_id  AS tipoentidadpubid,
       ENT.NRO_SINDICATOS  AS nroSindicatos,
       tipo.VALOR_TEXTO        AS tipoentidadpub
    FROM SCH_ENTIDAD.TBL_ENTIDAD ENT 
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SECT ON SECT.PARAMETRO_ID = ENT.SECTOR_ID
    LEFT JOIN sch_maestra.tbl_parametro        tipo ON tipo.parametro_id = ent.tipo_entidad_pub_id
    LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO GOB ON GOB.PARAMETRO_ID = ENT.NIVEL_GOBIERNO_ID 
    INNER JOIN SCH_PERSONA.TBL_PERSONA PERS ON PERS.PERSONA_ID = ENT.PERSONA_ID 
    INNER JOIN SCH_PERSONA.TBL_PERSONA_JURIDICA PER_JUR ON PER_JUR.PERSONA_ID = ENT.PERSONA_ID 
    INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOC ON DOC.DOCUMENTO_ID = PERS.DOCUMENTO_ID 
    LEFT JOIN SCH_PERSONA.TBL_DIRECCION DIRE ON DIRE.PERSONA_ID = PERS.PERSONA_ID
    LEFT JOIN SCH_ENTIDAD.TBL_DIRECCION DIR ON DIR.DIRECCION_ID = ENT.DIRECCION_ID 
    LEFT JOIN SCH_PERSONA.TBL_CORREO COR ON COR.PERSONA_ID = ENT.PERSONA_ID 
    LEFT JOIN SCH_PERSONA.TBL_TELEFONO TEL ON TEL.PERSONA_ID = ENT.PERSONA_ID     
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UB_DIST ON UB_DIST.UBIGEO_ID = ENT.UBIGEO_ID  
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UB_PROV ON UB_PROV.UBIGEO_ID = UB_DIST.UBIGEO_PADRE_ID  
    LEFT JOIN SCH_MAESTRA.TBL_UBIGEO UB_DEP ON UB_DEP.UBIGEO_ID = UB_PROV.UBIGEO_PADRE_ID 
    WHERE ENT.ENTIDAD_ID = NVL(V_ENTIDAD_ID,ENT.ENTIDAD_ID)   
    
   AND (ENT.SECTOR_ID=V_SECTOR_ID OR V_SECTOR_ID IS NULL)
   AND (ENT.NIVEL_GOBIERNO_ID=V_NIVEL_GOBIERNO_ID OR V_NIVEL_GOBIERNO_ID IS NULL)
   AND (ENT.TIPO_ENTIDAD_PUB_ID=V_TIPO_ENT_PUB_ID OR V_TIPO_ENT_PUB_ID IS NULL)
    AND (ENT.TIPO_ENTIDAD_ID=V_TIPO_ENTIDAD_ID OR V_TIPO_ENTIDAD_ID IS NULL)
    AND (UPPER(ENT.DESCRIPCION_ENTIDAD) LIKE '%'||NVL(UPPER(V_DESCRIP_ENTIDAD),UPPER(ENT.DESCRIPCION_ENTIDAD))||'%' OR 
    UPPER(ENT.SIGLAS) LIKE '%'||NVL(UPPER(V_DESCRIP_ENTIDAD),UPPER(ENT.SIGLAS))||'%');

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_ENTIDAD_FILT>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_ENTIDAD_FILT;

PROCEDURE SP_BUSCAR_UNIDADES_ORGANICAS_ENTIDAD (V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL 
                                               ,CUR_TEST            OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
	SELECT ORG.ORGANIGRAMA_ID AS "id",
           ORG.DESCRIPCION AS "descripcion", 
           ORG.PADRE_ORGANIGRAMA_Id AS "superiorId" 
      FROM SCH_ENTIDAD.TBL_ORGANIGRAMA ORG 
     WHERE 1=1
       AND ORG.ESTADO_REGISTRO = '1' 
       AND ORG.ENTIDAD_ID = V_ENTIDAD_ID 
  ORDER BY ORG.ORGANIGRAMA_ID;

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_UNIDADES_ORGANICAS_ENTIDAD>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_UNIDADES_ORGANICAS_ENTIDAD;

PROCEDURE SP_BUSCAR_PUESTOS_ENTIDAD (V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL 
                                    ,CUR_TEST            OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
	SELECT PUE.PUESTO_ID AS "id",
           PUE.DESCRIPCION AS "descripcion"
      FROM TBL_PUESTO PUE 
     WHERE 1=1
       AND PUE.ESTADO_REGISTRO = '1' 
       AND PUE.ENTIDAD_ID = V_ENTIDAD_ID 
  ORDER BY PUE.PUESTO_ID;

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PUESTOS_ENTIDAD>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_PUESTOS_ENTIDAD;

PROCEDURE SP_BUSCAR_SERVIDORES_CIVILES (V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL 
									   ,V_TIPO_ORGANO        IN SCH_MAESTRA.TBL_PARAMETRO.PARAMETRO_ID%TYPE DEFAULT NULL 
									   ,V_UO_SUPERIOR        IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PADRE_ORGANIGRAMA_ID%TYPE DEFAULT NULL 
									   ,V_UO                 IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE DEFAULT NULL 
									   ,V_REGIMEN_LABORAL    IN SCH_MAESTRA.TBL_PARAMETRO.PARAMETRO_ID%TYPE DEFAULT NULL 
									   ,V_TIPO_DOCUMENTO     IN SCH_PERSONA.TBL_DOCUMENTO.TIPO_DOCUMENTO%TYPE DEFAULT NULL
									   ,V_APE_PATERNO        IN SCH_PERSONA.TBL_PERSONA_NATURAL.APELLIDO_PATERNO%TYPE DEFAULT NULL
									   ,V_APE_MATERNO        IN SCH_PERSONA.TBL_PERSONA_NATURAL.APELLIDO_MATERNO%TYPE DEFAULT NULL
									   ,V_NOMBRES            IN SCH_PERSONA.TBL_PERSONA_NATURAL.NOMBRES%TYPE DEFAULT NULL
                                       ,CUR_TEST            OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
     SELECT DET.ORGANIGRAMA_ID AS "organigramaId", 
            DOCU.NUMERO_DOCUMENTO AS "docIdentidad", 
	        RES.APELLIDO_PATERNO || ' ' || RES.APELLIDO_MATERNO || ', ' || RES.NOMBRES AS "apellidosNombres",
		    ORG_HIJO.DESCRIPCION AS "uoArea",
		    PUES.DESCRIPCION AS "puesto",
			DECODE(DET.ESTADO_REGISTRO,'1','ACTIVO',DECODE(DET.ESTADO_REGISTRO,'2','INACTIVO','CESADO')) AS "estado"
       FROM SCH_ENTIDAD.TBL_DETALLE_UO DET 
  LEFT JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA ORG ON DET.ORGANIGRAMA_ID =  ORG.ORGANIGRAMA_ID 
  LEFT JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA ORG_HIJO ON ORG_HIJO.PADRE_ORGANIGRAMA_ID = ORG.ORGANIGRAMA_ID
 INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TIP_ORG ON TIP_ORG.PARAMETRO_ID = ORG.TIPO_ORGANO_UO_ID AND TIP_ORG.ESTADO_REGISTRO = '1'
 INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL RES ON RES.PERSONA_ID = ORG.PERSONA_RESPONSABLE_ID
  LEFT JOIN SCH_PERSONA.TBL_DOCUMENTO DOCU ON DOCU.PERSONA_ID = ORG.PERSONA_RESPONSABLE_ID
  LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO PARA ON PARA.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO' AND PARA.CODIGO_NUMERO = DOCU.TIPO_DOCUMENTO
  LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO PAR2 ON PAR2.TIPO_PARAMETRO = 'TIPO_REGIMEN_LABORAL' 
  LEFT JOIN SCH_ENTIDAD.TBL_PUESTO PUES ON PUES.PUESTO_ID = ORG.PUESTO_ID
 WHERE 1=1
   AND ORG.PADRE_ORGANIGRAMA_ID IS NULL 
   --AND ORG.PERSONA_RESPONSABLE_ID = NVL(V_PERSONA_ID,ORG.PERSONA_RESPONSABLE_ID) 
   --AND ORG.ORGANIGRAMA_ID = NVL(V_ORGANIGRAMA_ID,ORG.ORGANIGRAMA_ID) 
   --AND ORG.ORGANIGRAMA_ID = NVL(V_UNIDAD_ID,ORG.ORGANIGRAMA_ID)
   AND DET.ENTIDAD_ID = V_ENTIDAD_ID 
   AND TIP_ORG.PARAMETRO_ID = NVL(V_TIPO_ORGANO,TIP_ORG.PARAMETRO_ID) --V_TIPO_ORGANO
   AND ORG_HIJO.PADRE_ORGANIGRAMA_ID = NVL(V_UO_SUPERIOR,ORG_HIJO.PADRE_ORGANIGRAMA_ID) --V_UO_SUPERIOR
   AND ORG_HIJO.ORGANIGRAMA_ID = NVL(V_UO,ORG_HIJO.ORGANIGRAMA_ID) --V_UO
   AND PAR2.PARAMETRO_ID = NVL(V_REGIMEN_LABORAL,PAR2.PARAMETRO_ID) --V_REGIMEN_LABORAL
   AND DOCU.TIPO_DOCUMENTO = NVL(V_TIPO_DOCUMENTO,DOCU.TIPO_DOCUMENTO) --V_TIPO_DOCUMENTO 
   AND (UPPER(RES.APELLIDO_PATERNO) LIKE '%'||NVL(UPPER(V_APE_PATERNO),RES.APELLIDO_PATERNO)||'%' --V_APE_PATERNO
		OR UPPER(RES.APELLIDO_MATERNO) LIKE '%'||NVL(UPPER(V_APE_MATERNO),RES.APELLIDO_MATERNO)||'%' --V_APE_MATERNO
			OR UPPER(RES.NOMBRES) LIKE '%'||NVL(UPPER(V_NOMBRES),RES.NOMBRES)||'%') --V_NOMBRES
 ORDER BY DET.ORGANIGRAMA_ID DESC;

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_SERVIDORES_CIVILES>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_SERVIDORES_CIVILES;

PROCEDURE SP_SEL_SERVIDORES_CIVILES (V_ENTIDAD_ID IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                    ,V_TIPO_ORGANO IN SCH_ENTIDAD.TBL_ORGANIGRAMA.TIPO_ORGANO_UO_ID%TYPE
                                    ,V_UO_SUPERIOR IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PADRE_ORGANIGRAMA_ID%TYPE
                                    ,V_UO IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE
                                    ,V_REGIMEN_LABORAL IN SCH_ENTIDAD.TBL_EMPLEADO.REGIMEN_LABORAL_ID%TYPE
                                    ,V_TIPO_DOCUMENTO IN SCH_PERSONA.TBL_DOCUMENTO.TIPO_DOCUMENTO%TYPE
                                    ,V_APE_PAT_MAT_NOM IN VARCHAR2
                                    ,V_NUMERO_DOCUMENTO IN SCH_PERSONA.TBL_DOCUMENTO.NUMERO_DOCUMENTO%TYPE
                                    ,V_ESTADO_ID IN SCH_ENTIDAD.TBL_DETALLE_UO.ESTADO_REGISTRO%TYPE
									,CUR_TEST OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
    OPEN CUR_TEST FOR
        SELECT
            DET.ORGANIGRAMA_ID AS "organigramaId", 
            PTD.NUMERO_DOCUMENTO AS "docEntidadId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            EOR.DESCRIPCION AS "unidadOrganica",
            ETP.DESCRIPCION AS "puesto",
            DECODE(DET.ESTADO_REGISTRO,'1','ACTIVO','2','ELIMINADO','CESADO') AS "estado"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = DET.PERSONA_ID AND ETE.ENTIDAD_ID = DET.ENTIDAD_ID        
         INNER JOIN SCH_PERSONA.TBL_DOCUMENTO PTD ON PTD.DOCUMENTO_ID = PTP.DOCUMENTO_ID
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA EOR ON EOR.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID AND EOR.ENTIDAD_ID = DET.ENTIDAD_ID 
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
         WHERE (DET.ENTIDAD_ID = V_ENTIDAD_ID OR V_ENTIDAD_ID IS NULL)
           AND (EOR.TIPO_ORGANO_UO_ID=V_TIPO_ORGANO OR V_TIPO_ORGANO IS NULL)
           AND (EOR.ORGANIGRAMA_ID=V_UO OR V_UO IS NULL)
           AND (EOR.PADRE_ORGANIGRAMA_ID=V_UO_SUPERIOR OR V_UO_SUPERIOR IS NULL)
           AND (ETE.REGIMEN_LABORAL_ID=V_REGIMEN_LABORAL OR V_REGIMEN_LABORAL IS NULL)
           AND ((PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES) LIKE '%'||V_APE_PAT_MAT_NOM||'%' OR V_APE_PAT_MAT_NOM IS NULL)
           AND (PTD.TIPO_DOCUMENTO=V_TIPO_DOCUMENTO OR V_TIPO_DOCUMENTO IS NULL)
           AND (PTD.NUMERO_DOCUMENTO LIKE '%'||V_NUMERO_DOCUMENTO||'%' OR V_NUMERO_DOCUMENTO IS NULL)
		   AND (DET.ESTADO_REGISTRO = V_ESTADO_ID OR V_ESTADO_ID IS NULL)
         ORDER BY PPN.APELLIDO_PATERNO;

        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_SEL_SERVIDORES_CIVILES>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_SEL_SERVIDORES_CIVILES;

PROCEDURE SP_BUSCAR_UNIDADES_ORGANICAS_SUPERIOR_ENTIDAD (V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL 
                                                        ,CUR_TEST            OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
	SELECT ORG.ORGANIGRAMA_ID AS "id",
           ORG.DESCRIPCION AS "descripcion", 
           ORG.PADRE_ORGANIGRAMA_ID AS "superiorId"
      FROM SCH_ENTIDAD.TBL_ORGANIGRAMA ORG, 
           (SELECT DISTINCT PAO.PADRE_ORGANIGRAMA_ID 
              FROM TBL_ORGANIGRAMA PAO
             WHERE PAO.PADRE_ORGANIGRAMA_ID IS NOT NULL
               AND PAO.ESTADO_REGISTRO = '1'
               AND PAO.ENTIDAD_ID = V_ENTIDAD_ID
           ) PAD
      WHERE 1 = 1
        AND PAD.PADRE_ORGANIGRAMA_ID = ORG.ORGANIGRAMA_ID
      ORDER BY NVL(ORG.PADRE_ORGANIGRAMA_ID, 0);

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_UNIDADES_ORGANICAS_SUPERIOR_ENTIDAD>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_UNIDADES_ORGANICAS_SUPERIOR_ENTIDAD;

PROCEDURE SP_BUSCAR_SERVIDORES_RECTORES (V_ENTIDAD_ID IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                 ,V_TIPO_ORGANO IN SCH_ENTIDAD.TBL_ORGANIGRAMA.TIPO_ORGANO_UO_ID%TYPE
                                 ,V_UO_SUPERIOR IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PADRE_ORGANIGRAMA_ID%TYPE
                                 ,V_UO IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE
                                 ,V_REGIMEN_LABORAL IN SCH_ENTIDAD.TBL_EMPLEADO.REGIMEN_LABORAL_ID%TYPE
                                 ,V_TIPO_DOCUMENTO IN SCH_PERSONA.TBL_DOCUMENTO.TIPO_DOCUMENTO%TYPE
                                 ,V_APE_PAT_MAT_NOM IN VARCHAR2
                                 ,V_NUMERO_DOCUMENTO IN SCH_PERSONA.TBL_DOCUMENTO.NUMERO_DOCUMENTO%TYPE
                 ,CUR_TEST OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
    OPEN CUR_TEST FOR
        SELECT
            NVL(DET.FLAG_HABILITAR,0) AS "flagHabilitar",
            DET.DET_UO_ID AS "detUnidadOrganicaId",
            DET.ORGANIGRAMA_ID AS "organigramaId",
            DET.PERSONA_ID AS "personaId",
            PTD.NUMERO_DOCUMENTO AS "docEntidadId",
            PPN.NOMBRES ||' '|| PPN.APELLIDO_PATERNO ||' '|| PPN.APELLIDO_MATERNO AS "nombresApellidos",
            PPN.NOMBRES AS "nombres",
            PPN.APELLIDO_PATERNO AS "apellidoPaterno",
            PPN.APELLIDO_MATERNO AS "apellidoMaterno",
            EOR.SIGLA AS "unidadOrganica",
            ETP.DESCRIPCION AS "puesto",
            TAS.VALOR_TEXTO AS "tipoAsignacion",
            NVL(DET.SEGMENTO_ID,0) AS "segmentoId",
            NVL(DET.ROL_ID,0) AS "rolId",
            DECODE(DET.ESTADO_REGISTRO,'1','ACTIVO','0','ELIMINADO','2','INACTIVO','CESADO') AS "estado"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = DET.PERSONA_ID AND ETE.ENTIDAD_ID = DET.ENTIDAD_ID
         INNER JOIN SCH_PERSONA.TBL_DOCUMENTO PTD ON PTD.DOCUMENTO_ID = PTP.DOCUMENTO_ID
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA EOR ON EOR.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID AND EOR.ENTIDAD_ID = DET.ENTIDAD_ID
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TAS ON TAS.CODIGO_NUMERO = DET.TIPO_ASIGNACION AND TAS.TIPO_PARAMETRO = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
         WHERE (DET.ENTIDAD_ID           = V_ENTIDAD_ID OR V_ENTIDAD_ID IS NULL)
           AND (EOR.NATURALEZA_ORGANO    = V_TIPO_ORGANO OR V_TIPO_ORGANO IS NULL)
           AND ((V_UO IS NOT NULL AND (EOR.ORGANIGRAMA_ID = V_UO OR V_UO IS NULL))
                  OR (EOR.ORGANIGRAMA_ID IN ( SELECT ORN.ORGANIGRAMA_ID
                                                FROM TBL_ORGANIGRAMA ORN
                                               WHERE ORN.ENTIDAD_ID = V_ENTIDAD_ID
                                                 AND ORN.ESTADO_REGISTRO = '1'
                                                 AND (ORN.PADRE_ORGANIGRAMA_ID = V_UO_SUPERIOR OR ORN.ORGANIGRAMA_ID = V_UO_SUPERIOR)
                                            )
          OR V_UO_SUPERIOR IS NULL) )
           AND (ETE.REGIMEN_LABORAL_ID   = V_REGIMEN_LABORAL OR V_REGIMEN_LABORAL IS NULL)
           AND ((PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES) LIKE '%'||V_APE_PAT_MAT_NOM||'%' OR V_APE_PAT_MAT_NOM IS NULL)
           AND (PTD.TIPO_DOCUMENTO       = V_TIPO_DOCUMENTO OR V_TIPO_DOCUMENTO IS NULL)
           AND (DET.ESTADO_REGISTRO  = 1)
         ORDER BY PPN.APELLIDO_PATERNO;


        EXCEPTION WHEN OTHERS THEN
      VL_NRO_ERROR := SQLCODE;
      VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
      raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_SERVIDORES_RECTORES>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_SERVIDORES_RECTORES;

PROCEDURE SP_BUSCAR_UNIDADES_ORGANICAS_X_SERVIDOR_CIVIL (V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                         ,V_TIPO_DOCUMENTO     IN SCH_PERSONA.TBL_DOCUMENTO.TIPO_DOCUMENTO%TYPE
                                                         ,V_NUMERO_DOCUMENTO  IN SCH_PERSONA.TBL_DOCUMENTO.NUMERO_DOCUMENTO%TYPE
                                                         ,CUR_TEST            OUT cursor_test) IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
    OPEN CUR_TEST FOR
        SELECT
            DET.ORGANIGRAMA_ID AS "organigramaId",
            DET.DET_UO_ID AS "detUnidadOrganicaId",
            ETE.ENTIDAD_ID AS "entidadId",
            NVL(DET.FLAG_HABILITAR,0) AS "flagHabilitar",
            DET.PERSONA_ID AS "personaId",
            PTD.TIPO_DOCUMENTO AS "tipoDocumentoId",
            PTD.NUMERO_DOCUMENTO AS "nroDocumento",
            PPN.NOMBRES ||' '|| PPN.APELLIDO_PATERNO ||' '|| PPN.APELLIDO_MATERNO AS "nombresApellidos",
            C.CORREO AS "correoPrincipal",
            EOR.SIGLA AS "siglaUnidadOrganica",
            EOR.DESCRIPCION AS "descUnidadOrganica",
            TAS.VALOR_TEXTO AS "descTipoAsignacion",
            ETP.Descripcion AS "descPuesto",
            DECODE(DET.ESTADO_REGISTRO,'1','ACTIVO','0','ELIMINADO','2','INACTIVO','CESADO') AS "estadoRegistro"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = DET.PERSONA_ID AND ETE.ENTIDAD_ID = DET.ENTIDAD_ID        
         INNER JOIN SCH_PERSONA.TBL_DOCUMENTO PTD ON PTD.DOCUMENTO_ID = PTP.DOCUMENTO_ID
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_PERSONA.TBL_CORREO C ON C.PERSONA_ID = PPN.PERSONA_ID AND C.TIPO_CORREO = 'PRINC'
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
         INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA EOR ON EOR.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID AND EOR.ENTIDAD_ID = DET.ENTIDAD_ID 
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TAS ON TAS.CODIGO_NUMERO = DET.TIPO_ASIGNACION AND TAS.TIPO_PARAMETRO = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
         WHERE (PTD.TIPO_DOCUMENTO       = V_TIPO_DOCUMENTO OR V_TIPO_DOCUMENTO IS NULL) 
            AND (PTD.NUMERO_DOCUMENTO       = V_NUMERO_DOCUMENTO OR V_NUMERO_DOCUMENTO IS NULL) 
            AND (ETE.ENTIDAD_ID       = V_ENTIDAD_ID OR V_ENTIDAD_ID IS NULL) 
            AND (DET.ESTADO_REGISTRO  = 1);


        EXCEPTION WHEN OTHERS THEN
      VL_NRO_ERROR := SQLCODE;
      VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
      raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_UNIDADES_ORGANICAS_X_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_UNIDADES_ORGANICAS_X_SERVIDOR_CIVIL;

PROCEDURE SP_LISTAR_GESTORES_ORH(V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                ,CUR_TEST             OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT * FROM (SELECT 
        GEST.GESTOR_ID AS "gestorId",
        GEST.ENTIDAD_ID as "entidadId",
        GEST.PERSONA_ID as "personaId",
        DOC.TIPO_DOCUMENTO as "tipoDocumento",
        DOC.NUMERO_DOCUMENTO as "numeroDocumento",
        PERN.NOMBRES as "nombres",
        PERN.APELLIDO_PATERNO as "apellidoPaterno",
        PERN.APELLIDO_MATERNO as "apellidoMaterno",
        (PERN.NOMBRES || ' ' || PERN.APELLIDO_PATERNO || ' ' || PERN.APELLIDO_MATERNO) as "nombreCompleto",
        (SELECT CORREO FROM SCH_PERSONA.TBL_CORREO PC WHERE PC.PERSONA_ID = GEST.PERSONA_ID AND PC.TIPO_CORREO = 'PRINC' AND ROWNUM = 1) as "correo",
        (SELECT NUMERO_TELEFONO FROM SCH_PERSONA.TBL_TELEFONO PT WHERE PT.PERSONA_ID = GEST.PERSONA_ID AND ROWNUM = 1) as "numeroTelefono",
 	( SELECT telefono_id FROM sch_persona.tbl_telefono pt 
                            WHERE pt.persona_id = gest.persona_id AND pt.tipo_telefono = 'CAS' AND estado_registro = '1' AND ROWNUM = 1) AS "telefonoId",
                      gest.celular_id AS "celularId",
                      gest.celular AS "numeroCelular",
                      gest.numero_anexo as "anexoTelefono",
                      /*( SELECT numero_telefono FROM sch_persona.tbl_telefono pt 
                            WHERE pt.persona_id = gest.persona_id AND pt.tipo_telefono = 'CEL' AND estado_registro = '1' AND ROWNUM = 1) AS "numeroCelular",
                      ( SELECT telefono_id FROM sch_persona.tbl_telefono pt 
                            WHERE pt.persona_id = gest.persona_id AND pt.tipo_telefono = 'CEL' AND estado_registro = '1' AND ROWNUM = 1) AS "celularId",*/
        PERN.FECHA_NACIMIENTO as "fechaNacimiento",
        GEST.USUARIO_ID as "usuarioId",
        GEST.ROL_ID as "rolId",
        GEST.ESTADO_REGISTRO as "estadoRegistro",
        (CASE GEST.ESTADO_REGISTRO WHEN '1' THEN 'Activo' ELSE 'Inactivo' END) as "estado"
    FROM TBL_GESTORES GEST
    INNER JOIN sch_entidad.tbl_entidad         ent ON ent.entidad_id = gest.entidad_id
    INNER JOIN SCH_PERSONA.TBL_PERSONA PERS ON PERS.PERSONA_ID = GEST.PERSONA_ID 
    INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PERN ON PERN.PERSONA_ID = PERS.PERSONA_ID 
    INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOC ON DOC.DOCUMENTO_ID = PERS.DOCUMENTO_ID
    WHERE GEST.ESTADO_REGISTRO = '1'
    AND GEST.ENTIDAD_ID = V_ENTIDAD_ID
    AND GEST.ROL_ID=16
    ORDER BY APELLIDO_PATERNO, APELLIDO_MATERNO, NOMBRES ASC) Activo
    UNION
    SELECT * FROM (SELECT 
        GEST.GESTOR_ID AS "gestorId",
        GEST.ENTIDAD_ID as "entidadId",
        GEST.PERSONA_ID as "personaId",
        DOC.TIPO_DOCUMENTO as "tipoDocumento",
        DOC.NUMERO_DOCUMENTO as "numeroDocumento",
        PERN.NOMBRES as "nombres",
        PERN.APELLIDO_PATERNO as "apellidoPaterno",
        PERN.APELLIDO_MATERNO as "apellidoMaterno",
        (PERN.NOMBRES || ' ' || PERN.APELLIDO_PATERNO || ' ' || PERN.APELLIDO_MATERNO) as "nombreCompleto",
        (SELECT CORREO FROM SCH_PERSONA.TBL_CORREO PC WHERE PC.PERSONA_ID = GEST.PERSONA_ID AND PC.TIPO_CORREO = 'PRINC' AND ROWNUM = 1) as "correo",
        (SELECT NUMERO_TELEFONO FROM SCH_PERSONA.TBL_TELEFONO PT WHERE PT.PERSONA_ID = GEST.PERSONA_ID AND ROWNUM = 1) as "numeroTelefono",
        ( SELECT telefono_id FROM sch_persona.tbl_telefono pt 
                            WHERE pt.persona_id = gest.persona_id AND pt.tipo_telefono = 'CAS' AND estado_registro = '1' AND ROWNUM = 1) AS "telefonoId",
                      gest.celular_id AS "celularId",
                      gest.celular AS "numeroCelular",
                      gest.numero_anexo as "anexoTelefono",
                      /*
                      ( SELECT numero_telefono FROM sch_persona.tbl_telefono pt 
                            WHERE pt.persona_id = gest.persona_id AND pt.tipo_telefono = 'CEL' AND estado_registro = '1' AND ROWNUM = 1) AS "numeroCelular",
                      ( SELECT telefono_id FROM sch_persona.tbl_telefono pt 
                            WHERE pt.persona_id = gest.persona_id AND pt.tipo_telefono = 'CEL' AND estado_registro = '1' AND ROWNUM = 1) AS "celularId",*/
        PERN.FECHA_NACIMIENTO as "fechaNacimiento",
        GEST.USUARIO_ID as "usuarioId",
        GEST.ROL_ID as "rolId",
        GEST.ESTADO_REGISTRO as "estadoRegistro",
        (CASE GEST.ESTADO_REGISTRO WHEN '2' THEN 'Inactivo' ELSE 'activo' END) as "estado"
    FROM TBL_GESTORES GEST
    INNER JOIN sch_entidad.tbl_entidad         ent ON ent.entidad_id = gest.entidad_id
    INNER JOIN SCH_PERSONA.TBL_PERSONA PERS ON PERS.PERSONA_ID = GEST.PERSONA_ID 
    INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PERN ON PERN.PERSONA_ID = PERS.PERSONA_ID 
    INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOC ON DOC.DOCUMENTO_ID = PERS.DOCUMENTO_ID
    WHERE GEST.ESTADO_REGISTRO = '2'
    AND GEST.ENTIDAD_ID = V_ENTIDAD_ID
    AND GEST.ROL_ID=16
    ORDER BY APELLIDO_PATERNO, APELLIDO_MATERNO, NOMBRES ASC) inactivo;
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_LISTAR_GESTORES_ORH>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_LISTAR_GESTORES_ORH;

PROCEDURE SP_BUSCAR_TIPO_RUC(V_TIPO_DOC     IN SCH_PERSONA.TBL_DOCUMENTO.TIPO_DOCUMENTO%TYPE DEFAULT NULL 
                               ,V_NRODOCUMENTO  IN SCH_PERSONA.TBL_DOCUMENTO.NUMERO_DOCUMENTO%TYPE DEFAULT NULL                                      
                               ,CUR_TEST        OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT 
        ENT.PERSONA_ID as "personaId",
        ENT.ENTIDAD_ID as "entidadId", 
        JUR.RAZON_SOCIAL as "razonSocial",
        JUR.NOMBRE_COMERCIAL as "nombreEntidad",
        ENT.SIGLAS as "abreviatura",
        DOCU.TIPO_DOCUMENTO as "tipoDocumento",
        DOCU.NUMERO_DOCUMENTO as "rucEntidad",
        DOCU.DOCUMENTO_ID as "documentoId",
        ENT.NIVEL_GOBIERNO_ID as "nivelGobId",
        NIVEL.DESCRIPCION AS "nivelGob",
        ENT.SECTOR_ID as "sectorId",
        SECTOR.DESCRIPCION AS "sector",
        ENT.TIPO_ENTIDAD_PUB_ID as "tipoEntidadId",
        TPENT.DESCRIPCION AS "tipoEntidad",
        ENT.URL_LOGO_ENTIDAD as "urlLogoEntidad"
    FROM SCH_ENTIDAD.TBL_ENTIDAD ENT 
    INNER JOIN SCH_PERSONA.TBL_PERSONA_JURIDICA JUR ON JUR.PERSONA_ID = ENT.PERSONA_ID
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO NIVEL ON NIVEL.PARAMETRO_ID = ENT.NIVEL_GOBIERNO_ID AND NIVEL.ESTADO_REGISTRO = '1'
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO SECTOR ON SECTOR.PARAMETRO_ID = ENT.SECTOR_ID AND SECTOR.ESTADO_REGISTRO = '1'
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TPENT ON TPENT.CODIGO_NUMERO = ENT.TIPO_ENTIDAD_PUB_ID AND TPENT.TIPO_PARAMETRO = 'TIPO_ENTIDAD_PUB' AND TPENT.ESTADO_REGISTRO = '1'
    INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOCU ON DOCU.PERSONA_ID = ENT.PERSONA_ID
    WHERE 1 = 1
         AND DOCU.TIPO_DOCUMENTO = V_TIPO_DOC
         AND DOCU.NUMERO_DOCUMENTO = V_NRODOCUMENTO
         AND ENT.ESTADO_REGISTRO = '1'
    ORDER BY ENT.ENTIDAD_ID DESC; 
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_TIPO_RUC>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_TIPO_RUC;

PROCEDURE SP_BUSCAR_UO_X_SERVIDOR_CIVIL (V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                         ,V_TIPO_DOCUMENTO     IN SCH_PERSONA.TBL_DOCUMENTO.TIPO_DOCUMENTO%TYPE
                                                         ,V_NUMERO_DOCUMENTO  IN SCH_PERSONA.TBL_DOCUMENTO.NUMERO_DOCUMENTO%TYPE
                                                         ,CUR_TEST            OUT cursor_test) IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
    OPEN CUR_TEST FOR
        SELECT
            DET.ORGANIGRAMA_ID AS "organigramaId",
            DET.DET_UO_ID AS "detUnidadOrganicaId",
            ETE.ENTIDAD_ID AS "entidadId",
            NVL(DET.FLAG_HABILITAR,0) AS "flagHabilitar",
            DET.PERSONA_ID AS "personaId",
            PTD.TIPO_DOCUMENTO AS "tipoDocumentoId",
            PTD.NUMERO_DOCUMENTO AS "nroDocumento",
            PPN.NOMBRES as "nombres",
            PPN.APELLIDO_PATERNO as "apellidoPaterno",
            PPN.APELLIDO_MATERNO as "apellidoMaterno",
            PPN.NOMBRES ||' '|| PPN.APELLIDO_PATERNO ||' '|| PPN.APELLIDO_MATERNO AS "nombresApellidos",
            C.CORREO AS "correoPrincipal",
            EOR.SIGLA AS "siglaUnidadOrganica",
            EOR.DESCRIPCION AS "descUnidadOrganica",
            TAS.VALOR_TEXTO AS "descTipoAsignacion",
            ETP.Descripcion AS "descPuesto",
            DECODE(DET.ESTADO_REGISTRO,'1','ACTIVO','0','ELIMINADO','2','INACTIVO','CESADO') AS "estadoRegistro"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = DET.PERSONA_ID AND ETE.ENTIDAD_ID = DET.ENTIDAD_ID        
         INNER JOIN SCH_PERSONA.TBL_DOCUMENTO PTD ON PTD.DOCUMENTO_ID = PTP.DOCUMENTO_ID
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_PERSONA.TBL_CORREO C ON C.PERSONA_ID = PPN.PERSONA_ID AND C.TIPO_CORREO = 'PRINC'
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
         INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA EOR ON EOR.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID AND EOR.ENTIDAD_ID = DET.ENTIDAD_ID 
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TAS ON TAS.CODIGO_NUMERO = DET.TIPO_ASIGNACION AND TAS.TIPO_PARAMETRO = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
         WHERE (PTD.TIPO_DOCUMENTO       = V_TIPO_DOCUMENTO OR V_TIPO_DOCUMENTO IS NULL) 
            AND (PTD.NUMERO_DOCUMENTO       = V_NUMERO_DOCUMENTO OR V_NUMERO_DOCUMENTO IS NULL) 
            AND (ETE.ENTIDAD_ID       = V_ENTIDAD_ID OR V_ENTIDAD_ID IS NULL) 
            AND (DET.ESTADO_REGISTRO  = 1);


        EXCEPTION WHEN OTHERS THEN
      VL_NRO_ERROR := SQLCODE;
      VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
      raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_UNIDADES_ORGANICAS_X_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_UO_X_SERVIDOR_CIVIL;

    PROCEDURE SP_BUSCA_SOLICITUD_BY_NRO (V_NUMERO IN SCH_ENTIDAD.TBL_SOLICITUD_PERSONA.NUMERO_DOCUMENTO%TYPE
                                    ,CUR_TEST            OUT cursor_test) IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
    OPEN CUR_TEST FOR
        SELECT 
            SOLICITUD_ENTIDAD_ID as "idSolicitudEntidad", 
            ESTADO_SOLICITUD as "idEstadoSolicitud" --, 
            --FECHA_ALTA as "fechaAlta",
            --FECHA_BAJA as "fechaBaja"
        FROM tbl_solicitud st WHERE st.solicitud_entidad_id IN 
            ( SELECT solicitud_entidad_id 
                FROM tbl_solicitud_persona c 
                    WHERE numero_documento = V_NUMERO )
            --AND fecha_baja IS NULL
            AND estado_registro = 1
            ORDER BY st.solicitud_entidad_id DESC;
    EXCEPTION WHEN OTHERS THEN
      VL_NRO_ERROR := SQLCODE;
      VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
      raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCA_SOLICITUD_BY_NRO>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCA_SOLICITUD_BY_NRO;

    PROCEDURE sp_filtrar_solicitud_externa (
        v_ruc_entidad      IN sch_entidad.tbl_solicitud_entidades_externas.ruc_entidad%TYPE,
        v_razon_social     IN sch_entidad.tbl_solicitud_entidades_externas.razon_social%TYPE,
        v_nombre_completo  IN VARCHAR2,
        v_estado_solicitud IN sch_entidad.tbl_solicitud_entidades_externas.estado_solicitud%TYPE,
        v_tipo_documento   IN sch_entidad.tbl_solicitud_entidades_externas.tipo_documento%TYPE,
        v_numero_documento IN sch_entidad.tbl_solicitud_entidades_externas.numero_documento%TYPE,
        v_anio             IN VARCHAR2,
        v_solicitud_ext_id IN sch_entidad.tbl_solicitud_entidades_externas.solicitud_ent_ext_id%TYPE,
        cur_test           OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
    BEGIN
        OPEN cur_test FOR SELECT
                              solicitud_ent_ext_id                  AS "solicitudEntidadExtId",
                              ruc_entidad                           AS "rucEntidad",
                              razon_social                          AS "razonSocial",
                              abreviatura_entidad                   AS "abreviatura",
                              nombre_entidad                        AS "nombreEntidad",
                              nivel_gobierno_id                     AS "nivelGobiernoId",
                              nivel_gobierno                        AS "nivelGobierno",
                              sector_id                             AS "sectorId",
                              sector                                AS "sector",
                              tipo_entidad_id                       AS "tipoEntidadId",
                              tipo_entidad                          AS "tipoEntidad",
                              url_logo_entidad                      AS "urlLogoEntidad",
                              tipo_documento                        AS "tipoDocumento",
                              numero_documento                      AS "numeroDocumento",
                              apellido_paterno                      AS "apellidoPaterno",
                              apellido_materno                      AS "apellidoMaterno",
                              nombres                               AS "nombres",
                              fecha_nacimiento                      AS "fechaNacimiento",
                              telefono_fijo                         AS "telefonoFijo",
                              anexo                                 AS "anexo",
                              celular                               AS "celular",
                              correo_electronico                    AS "correoElectronico",
                              uuid_documento                        AS "uuidDocumento",
                              estado_solicitud                      AS "estadoId",
                              (
                                  SELECT
                                      codigo_texto
                                  FROM
                                      sch_maestra.tbl_parametro
                                  WHERE
                                          tipo_parametro = 'ESTADO_SOLICITUD_ENTIDAD_EXTERNA'
                                      AND codigo_numero = estado_solicitud
                              )                                     AS "estado",
                              to_char(fecha_creacion, 'DD/MM/YYYY') AS "fechaSolicitud",
                              (
                                  SELECT
                                      to_char(see.fecha_creacion, 'YYYY')
                                  FROM
                                      dual
                              )                                     AS "anio",
                              ( apellido_paterno
                                || ' '
                                || apellido_materno
                                || ' '
                                || nombres )                          AS "nombreCompleto",
                              correo_gestor_gdr                     AS "correoGestorGdr",
                              solicitud_obs                         AS "solicitudObs",
                              entidad_id                         AS "entidadId",
                              sindicato                         AS "sindicato"
                          FROM
                              sch_entidad.tbl_solicitud_entidades_externas see
                          WHERE
                                  see.estado_registro = '1'
                              AND ( see.ruc_entidad = v_ruc_entidad
                                    OR v_ruc_entidad IS NULL )
                              AND ( upper(see.razon_social) LIKE '%'
                                                                 || upper(v_razon_social)
                                                                 || '%'
                                    OR v_razon_social IS NULL )
                              AND ( upper(see.apellido_paterno
                                          || ' '
                                          || see.apellido_materno
                                          || ' '
                                          || see.nombres) LIKE '%'
                                                               || upper(v_nombre_completo)
                                                               || '%'
                                    OR v_nombre_completo IS NULL )
                              AND ( see.estado_solicitud = v_estado_solicitud
                                    OR v_estado_solicitud IS NULL )
                              AND ( see.tipo_documento = v_tipo_documento
                                    OR v_tipo_documento IS NULL )
                              AND ( see.numero_documento = v_numero_documento
                                    OR v_numero_documento IS NULL )
                              AND ( (
                                  SELECT
                                      to_char(see.fecha_creacion, 'YYYY')
                                  FROM
                                      dual
                              ) = v_anio
                                    OR v_anio IS NULL )
                              AND ( see.solicitud_ent_ext_id = v_solicitud_ext_id
                                    OR v_solicitud_ext_id IS NULL )
                          ORDER BY
                              see.fecha_creacion DESC;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_FILTRAR_SOLICITUD_EXTERNA>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);
    END sp_filtrar_solicitud_externa;

    PROCEDURE SP_BUSCAR_GESTOR_ORH (
        v_gestor_id IN sch_entidad.tbl_gestores.gestor_id%TYPE,
        cur_test    OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
    BEGIN
        OPEN cur_test FOR SELECT
                              tg.gestor_id               AS "gestorId",
                              tg.entidad_id              AS "entidadId",
                              tg.persona_id              AS "personaId",
                              doc.tipo_documento         AS "tipoDocumento",
                              doc.numero_documento       AS "numeroDocumento",
        --DOC.DOCUMENTO_ID as "documentoId",
                              pern.nombres               AS "nombres",
                              pern.apellido_paterno      AS "apellidoPaterno",
                              pern.apellido_materno      AS "apellidoMaterno",
                              ( pern.nombres || ' ' || pern.apellido_paterno || ' ' || pern.apellido_materno ) AS "nombreCompleto",
                              co.correo                  AS "correo",
                              tg.correo_id               AS "correoId",
        --(SELECT NUMERO_TELEFONO FROM SCH_PERSONA.TBL_TELEFONO PT WHERE PT.PERSONA_ID = TG.PERSONA_ID AND ROWNUM = 1) as "numeroTelefono",
                              (SELECT numero_telefono FROM sch_persona.tbl_telefono pt WHERE pt.persona_id = tg.persona_id
                                      AND pt.tipo_telefono = 'CAS' AND estado_registro = '1' AND ROWNUM = 1) AS "numeroTelefono",
        --(SELECT TELEFONO_ID FROM SCH_PERSONA.TBL_TELEFONO PT WHERE PT.PERSONA_ID = TG.PERSONA_ID AND ROWNUM = 1 AND PT.TIPO_TELEFONO ='CAS') as "telefonoId",
                              (CASE nvl(tg.telefono_id, 0) WHEN 0 THEN (SELECT telefono_id FROM sch_persona.tbl_telefono pt WHERE
                                                      pt.persona_id = tg.persona_id AND pt.tipo_telefono = 'CAS' AND estado_registro = '1' 
                                                      AND ROWNUM = 1 ) ELSE tg.telefono_id END) AS "telefonoId",
                              (SELECT tipo_telefono FROM sch_persona.tbl_telefono pt WHERE pt.persona_id = tg.persona_id AND pt.tipo_telefono = 'CAS'
                                          AND estado_registro = '1' AND ROWNUM = 1) AS "tipoTelefono",
                              /*(SELECT numero_anexo FROM sch_persona.tbl_telefono pt WHERE pt.persona_id = tg.persona_id AND pt.tipo_telefono = 'CAS'
                                          AND estado_registro = '1' AND ROWNUM = 1) AS "anexoTelefono",*/
                                         tg.numero_anexo AS "anexoTelefono",
                              pern.fecha_nacimiento      AS "fechaNacimiento",
        --CO.TIPO_CORREO,
                              tg.usuario_id              AS "usuarioId",
                              tg.rol_id                  AS "rolId",
                              tg.estado_registro         AS "estadoRegistro",
                              (CASE tg.estado_registro WHEN '1' THEN 'Activo' ELSE 'Inactivo' END) AS "estado",
                              tg.celular AS "numeroCelular",
                              tg.celular_id AS "celularId",
                              tg.tipo_telefono AS "tipoCelular"
                              /*(SELECT numero_telefono FROM sch_persona.tbl_telefono pt WHERE pt.persona_id = tg.persona_id AND pt.tipo_telefono = 'CEL'
                                          AND estado_registro = '1' AND ROWNUM = 1) AS "numeroCelular",
        --(SELECT TELEFONO_ID FROM SCH_PERSONA.TBL_TELEFONO PT WHERE PT.PERSONA_ID = TG.PERSONA_ID AND ROWNUM = 1 AND PT.TIPO_TELEFONO ='CEL') as "celularId",
                              (CASE nvl(tg.celular_id, 0) WHEN 0 THEN( SELECT telefono_id FROM sch_persona.tbl_telefono pt WHERE
                                                      pt.persona_id = tg.persona_id AND pt.tipo_telefono = 'CEL' AND estado_registro = '1'AND ROWNUM = 1) 
                                                      ELSE tg.celular_id END ) AS "celularId",
                              ( SELECT tipo_telefono FROM sch_persona.tbl_telefono pt WHERE pt.persona_id = tg.persona_id AND pt.tipo_telefono = 'CEL'
                                                      AND estado_registro = '1' AND ROWNUM = 1) AS "tipoCelular"*/
                          FROM
                                   sch_entidad.tbl_gestores tg
                              INNER JOIN sch_entidad.tbl_entidad         ent ON ent.entidad_id = tg.entidad_id
                              INNER JOIN sch_persona.tbl_persona         pers ON pers.persona_id = tg.persona_id
                              INNER JOIN sch_persona.tbl_persona_natural pern ON pern.persona_id = tg.persona_id
                              INNER JOIN sch_persona.tbl_documento       doc ON doc.documento_id = pers.documento_id
                              INNER JOIN sch_persona.tbl_correo          co ON co.correo_id = tg.correo_id
                          WHERE
                                  tg.estado_registro != 0
                              AND tg.gestor_id = v_gestor_id;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_GESTOR_ORH>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);
    END SP_BUSCAR_GESTOR_ORH;

    PROCEDURE sp_buscar_anio_solext (
        cur_test OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
        v_exist      NUMBER;
        v_estado     NUMBER := 0;
    BEGIN
        SELECT
            COUNT(fecha_creacion)
        INTO v_exist
        FROM
            sch_entidad.tbl_solicitud_entidades_externas tse
        WHERE
            tse.estado_registro != v_estado;

        IF ( v_exist > 0 ) THEN
            OPEN cur_test FOR SELECT DISTINCT
                                  to_char(tse.fecha_creacion, 'yyyy') AS "texto",
                                  to_char(tse.fecha_creacion, 'yyyy') AS "valor" 
            --(CASE TO_CHAR(TSE.FECHA_CREACION,'yyyy') WHEN TO_CHAR(SYSDATE,'yyyy') THEN TO_CHAR(TSE.FECHA_CREACION,'yyyy') ELSE TO_CHAR(SYSDATE,'yyyy') END) as "texto",
            --(CASE TO_CHAR(TSE.FECHA_CREACION,'yyyy') WHEN TO_CHAR(SYSDATE,'yyyy') THEN TO_CHAR(TSE.FECHA_CREACION,'yyyy') ELSE TO_CHAR(SYSDATE,'yyyy') END) as "valor"
                              FROM
                                  sch_entidad.tbl_solicitud_entidades_externas tse
                              WHERE
                                  tse.estado_registro != v_estado;

        ELSE
            OPEN cur_test FOR SELECT
                                  to_char(sysdate, 'yyyy') AS "texto",
                                  to_char(sysdate, 'yyyy') AS "valor"
                              FROM
                                  dual;

        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_ANIO_SOLEXT>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);
    END sp_buscar_anio_solext;

    PROCEDURE sp_listar_usuario_rol_x_entidad (
        v_entidad_id IN sch_entidad.tbl_entidad.entidad_id%TYPE DEFAULT NULL,
        v_rol_id     IN sch_seguridad.tbl_usuario_rol.rol_id%TYPE DEFAULT NULL,
        cur_test     OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
    BEGIN
        OPEN cur_test FOR SELECT
                              rol.usuario_rol_id,
                              eu.entidad_id,
                              usu.usuario_id,
                              usu.persona_id,
                              rol.rol_id,
                              usu.usuario,
                              usu.correo_electronico,
                              rol.fecha_inicio_vigencia,
                              rol.fecha_fin_vigencia,
                              rol.estado_registro
                          FROM
                              sch_seguridad.tbl_entidad_usuario eu,
                              sch_seguridad.tbl_usuario         usu,
                              sch_persona.tbl_persona_natural   pn,
                              sch_seguridad.tbl_usuario_rol     rol
                          WHERE
                                  eu.entidad_id = v_entidad_id
                              AND eu.estado_registro = '1'
                              AND usu.usuario_id = eu.usuario_id
                              AND usu.estado_registro = '1'
                              AND pn.persona_id = usu.persona_id
                              AND pn.estado_registro = '1'
                              AND rol.usuario_id = usu.usuario_id
                              AND rol.estado_registro = '1'
                              AND rol.rol_id = v_rol_id;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_LISTAR_USUARIO_ROL_X_ENTIDAD>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);
    END sp_listar_usuario_rol_x_entidad;

    PROCEDURE sp_resumen_servidores_civiles (
        v_entidad_id IN sch_entidad.tbl_entidad.entidad_id%TYPE DEFAULT NULL,
        cur_test     OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
    BEGIN
        OPEN cur_test FOR SELECT
                              ete.entidad_id AS entidadid,
                              (
                                  SELECT
                                      COUNT(*)
                                  FROM
                                           sch_entidad.tbl_empleado ete
                                      INNER JOIN sch_entidad.tbl_detalle_uo      det ON ete.entidad_id = det.entidad_id
                                                                                   AND ete.persona_id = det.persona_id
                                                                                   AND ete.puesto_id = det.puesto_id
                                      INNER JOIN sch_entidad.tbl_organigrama     eor ON det.organigrama_id = eor.organigrama_id
                                                                                    AND det.entidad_id = eor.entidad_id
                                      INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = ete.puesto_id
                                                                               AND etp.entidad_id = ete.entidad_id
                                                                               AND etp.organigrama_id = eor.organigrama_id
                                      INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = ete.persona_id
                                      INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                                      INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                                      INNER JOIN sch_maestra.tbl_parametro       civ ON civ.codigo_numero = det.estado_registro
                                                                                  AND civ.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL'
                                      INNER JOIN sch_maestra.tbl_parametro       tas ON tas.codigo_numero = det.tipo_asignacion
                                                                                  AND tas.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                                  WHERE
                                      det.entidad_id = v_entidad_id
                              )              AS totalentidad,
                              (
                                  SELECT
                                      COUNT(*)
                                  FROM
                                           sch_entidad.tbl_empleado ete
                                      INNER JOIN sch_entidad.tbl_detalle_uo      det ON ete.entidad_id = det.entidad_id
                                                                                   AND ete.persona_id = det.persona_id
                                                                                   AND ete.puesto_id = det.puesto_id
                                      INNER JOIN sch_entidad.tbl_organigrama     eor ON det.organigrama_id = eor.organigrama_id
                                                                                    AND det.entidad_id = eor.entidad_id
                                      INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = ete.puesto_id
                                                                               AND etp.entidad_id = ete.entidad_id
                                                                               AND etp.organigrama_id = eor.organigrama_id
                                      INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = ete.persona_id
                                      INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                                      INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                                      INNER JOIN sch_maestra.tbl_parametro       civ ON civ.codigo_numero = det.estado_registro
                                                                                  AND civ.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL'
                                      INNER JOIN sch_maestra.tbl_parametro       tas ON tas.codigo_numero = det.tipo_asignacion
                                                                                  AND tas.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                                      INNER JOIN sch_maestra.tbl_parametro       par ON par.codigo_numero = ete.regimen_laboral_id
                                  WHERE
                                          det.entidad_id = v_entidad_id
                                      AND ( par.codigo_texto = 'REGIMEN_9'
                                            OR par.codigo_texto = 'REGIMEN_10'
                                            OR par.codigo_texto = 'REGIMEN_11'
                                            OR par.codigo_texto = 'REGIMEN_12'
                                            OR par.codigo_texto = 'REGIMEN_13'
                                            OR par.codigo_texto = 'REGIMEN_14'
                                            OR par.codigo_texto = 'REGIMEN_15'
                                            OR par.codigo_texto = 'REGIMEN_16'
                                            OR par.codigo_texto = 'REGIMEN_17' )
                              )              AS totalcarrerasespeciales,
                              (
                                  SELECT
                                      COUNT(*)
                                  FROM
                                           sch_entidad.tbl_empleado ete
                                      INNER JOIN sch_entidad.tbl_detalle_uo      det ON ete.entidad_id = det.entidad_id
                                                                                   AND ete.persona_id = det.persona_id
                                                                                   AND ete.puesto_id = det.puesto_id
                                      INNER JOIN sch_entidad.tbl_organigrama     eor ON det.organigrama_id = eor.organigrama_id
                                                                                    AND det.entidad_id = eor.entidad_id
                                      INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = ete.puesto_id
                                                                               AND etp.entidad_id = ete.entidad_id
                                                                               AND etp.organigrama_id = eor.organigrama_id
                                      INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = ete.persona_id
                                      INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                                      INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                                      INNER JOIN sch_maestra.tbl_parametro       civ ON civ.codigo_numero = det.estado_registro
                                                                                  AND civ.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL'
                                      INNER JOIN sch_maestra.tbl_parametro       tas ON tas.codigo_numero = det.tipo_asignacion
                                                                                  AND tas.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                                  WHERE
                                          det.entidad_id = v_entidad_id
                                      AND ( ete.sindicato_flag = '1'
                                            OR ete.sindicato_flag = 'S' )
                              )              AS totalsindicalizados,
                              (
                                  SELECT
                                      COUNT(*)
                                  FROM
                                           sch_entidad.tbl_empleado ete
                                      INNER JOIN sch_entidad.tbl_detalle_uo      det ON ete.entidad_id = det.entidad_id
                                                                                   AND ete.persona_id = det.persona_id
                                                                                   AND ete.puesto_id = det.puesto_id
                                      INNER JOIN sch_entidad.tbl_organigrama     eor ON det.organigrama_id = eor.organigrama_id
                                                                                    AND det.entidad_id = eor.entidad_id
                                      INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = ete.puesto_id
                                                                               AND etp.entidad_id = ete.entidad_id
                                                                               AND etp.organigrama_id = eor.organigrama_id
                                      INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = ete.persona_id
                                      INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                                      INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                                      INNER JOIN sch_maestra.tbl_parametro       civ ON civ.codigo_numero = det.estado_registro
                                                                                  AND civ.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL'
                                      INNER JOIN sch_maestra.tbl_parametro       tas ON tas.codigo_numero = det.tipo_asignacion
                                                                                  AND tas.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                                  WHERE
                                          det.entidad_id = v_entidad_id
                                      AND det.es_responsable = 'S'
                              )              AS totalresponsablesoousubou,
                              (
                                  SELECT
                                      COUNT(*)
                                  FROM
                                           sch_entidad.tbl_empleado ete
                                      INNER JOIN sch_entidad.tbl_detalle_uo      det ON ete.entidad_id = det.entidad_id
                                                                                   AND ete.persona_id = det.persona_id
                                                                                   AND ete.puesto_id = det.puesto_id
                                      INNER JOIN sch_entidad.tbl_organigrama     eor ON det.organigrama_id = eor.organigrama_id
                                                                                    AND det.entidad_id = eor.entidad_id
                                      INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = ete.puesto_id
                                                                               AND etp.entidad_id = ete.entidad_id
                                                                               AND etp.organigrama_id = eor.organigrama_id
                                      INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = ete.persona_id
                                      INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                                      INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                                      INNER JOIN sch_maestra.tbl_parametro       civ ON civ.codigo_numero = det.estado_registro
                                                                                  AND civ.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL'
                                      INNER JOIN sch_maestra.tbl_parametro       tas ON tas.codigo_numero = det.tipo_asignacion
                                                                                  AND tas.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                                      INNER JOIN sch_maestra.tbl_parametro       par ON par.codigo_numero = ete.regimen_laboral_id
                                                                                  AND par.tipo_parametro = 'TIPO_REGIMEN_LABORAL'
                                  WHERE
                                          det.entidad_id = v_entidad_id
                                      AND par.codigo_texto = 'REGIMEN_19'
                              )              AS totalmodalidadformativasimilares,
                              (
                                        SELECT COUNT(*) FROM  ( SELECT  
         DISTINCT 
             ptp.PERSONA_ID, 
            COUNT(*)
           FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
           INNER JOIN SCH_MAESTRA.TBL_PARAMETRO CIV ON CIV.CODIGO_NUMERO = DET.ESTADO_REGISTRO AND CIV.TIPO_PARAMETRO = 'ESTADO_SERVIDOR_CIVIL'
          INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA ORG ON ORG.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID 
          INNER JOIN SCH_ENTIDAD.TBL_PUESTO PUE ON PUE.PUESTO_ID = DET.PUESTO_ID
          INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TAS ON TAS.CODIGO_NUMERO = DET.TIPO_ASIGNACION AND TAS.TIPO_PARAMETRO = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
          INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = det.persona_id
          INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
          INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
          WHERE
         DET.ENTIDAD_ID       = v_entidad_id AND
          DET.TIPO_ASIGNACION = 2
          AND DET.ESTADO_REGISTRO <> '0'
          GROUP BY     ptp.PERSONA_ID )
                              )              AS totalencargadosoousubou
                          FROM
                              sch_entidad.tbl_empleado ete
                          WHERE
                              ROWNUM <= 1;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_RESUMEN_SERVIDORES_CIVILES>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);
    END sp_resumen_servidores_civiles;

    PROCEDURE sp_resumen_servidores_civiles_tipo_organo (
        v_entidad_id IN sch_entidad.tbl_entidad.entidad_id%TYPE DEFAULT NULL,
        cur_test     OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
    BEGIN
        OPEN cur_test FOR SELECT
                              org.parametro_id AS graficoid,
                              COUNT(*)         descripcion,
                              org.valor_texto  AS codigotexto 
                          FROM
                                   sch_entidad.tbl_empleado ete
                              INNER JOIN sch_entidad.tbl_detalle_uo      det ON ete.entidad_id = det.entidad_id
                                                                           AND ete.persona_id = det.persona_id
                                                                           AND ete.puesto_id = det.puesto_id
                              INNER JOIN sch_entidad.tbl_organigrama     eor ON det.organigrama_id = eor.organigrama_id
                                                                            AND det.entidad_id = eor.entidad_id
                              INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = ete.puesto_id
                                                                       AND etp.entidad_id = ete.entidad_id
                                                                       AND etp.organigrama_id = eor.organigrama_id
                              INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = ete.persona_id
                              INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                              INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                              INNER JOIN sch_maestra.tbl_parametro       civ ON civ.codigo_numero = det.estado_registro
                                                                          AND civ.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL'
                              INNER JOIN sch_maestra.tbl_parametro       tas ON tas.codigo_numero = det.tipo_asignacion
                                                                          AND tas.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                              INNER JOIN sch_maestra.tbl_parametro       org ON org.parametro_id = eor.naturaleza_organo
                                                                          AND org.tipo_parametro = 'TIPO_NATURALEZA'
                          WHERE
                              det.entidad_id = v_entidad_id
                          GROUP BY
                              org.parametro_id,
                              org.codigo_numero,
                              org.valor_texto;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_RESUMEN_SERVIDORES_CIVILES_TIPO_ORGANO>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);
    END sp_resumen_servidores_civiles_tipo_organo;

    PROCEDURE sp_resumen_servidores_civiles_regimen_laboral (
        v_entidad_id IN sch_entidad.tbl_entidad.entidad_id%TYPE DEFAULT NULL,
        cur_test     OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
    BEGIN
        OPEN cur_test FOR SELECT
                              par.parametro_id AS graficoid,
                              COUNT(*)         descripcion,
                              par.valor_texto  AS codigotexto
                          FROM
                                   sch_entidad.tbl_empleado ete
                              INNER JOIN sch_entidad.tbl_detalle_uo      det ON ete.entidad_id = det.entidad_id
                                                                           AND ete.persona_id = det.persona_id
                                                                           AND ete.puesto_id = det.puesto_id
                              INNER JOIN sch_entidad.tbl_organigrama     eor ON det.organigrama_id = eor.organigrama_id
                                                                            AND det.entidad_id = eor.entidad_id
                              INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = ete.puesto_id
                                                                       AND etp.entidad_id = ete.entidad_id
                                                                       AND etp.organigrama_id = eor.organigrama_id
                              INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = ete.persona_id
                              INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                              INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                              INNER JOIN sch_maestra.tbl_parametro       civ ON civ.codigo_numero = det.estado_registro
                                                                          AND civ.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL'
                              INNER JOIN sch_maestra.tbl_parametro       tas ON tas.codigo_numero = det.tipo_asignacion
                                                                          AND tas.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                              INNER JOIN sch_maestra.tbl_parametro       par ON par.codigo_numero = ete.regimen_laboral_id
                                                                          AND par.tipo_parametro = 'TIPO_REGIMEN_LABORAL'
                          WHERE
                              det.entidad_id = v_entidad_id
                          GROUP BY
                              par.parametro_id,
                              par.codigo_numero,
                              par.valor_texto;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_RESUMEN_SERVIDORES_CIVILES_REGIMEN_LABORAL>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);
    END sp_resumen_servidores_civiles_regimen_laboral;

    PROCEDURE sp_resumen_servidores_civiles_gdr (
        v_entidad_id IN sch_entidad.tbl_entidad.entidad_id%TYPE DEFAULT NULL,
        cur_test     OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
    BEGIN
        OPEN cur_test FOR SELECT
                              sch_entidad.tbl_entidad.entidad_id AS entidadid,
                              (
                                  SELECT
                                      COUNT(*)
                                  FROM
                                           tbl_gestores gest
                                      INNER JOIN sch_entidad.tbl_entidad         ent ON ent.entidad_id = gest.entidad_id
                                      INNER JOIN sch_persona.tbl_persona         pers ON pers.persona_id = gest.persona_id
                                      INNER JOIN sch_persona.tbl_persona_natural pern ON pern.persona_id = pers.persona_id
                                  WHERE
                                      ent.entidad_id = v_entidad_id
                              )                                  AS totalgestoresgdr,
                              (
                                  SELECT
                                      COUNT(*)
                                  FROM
                                           sch_entidad.tbl_detalle_uo det
                                      INNER JOIN sch_maestra.tbl_parametro       asig ON asig.codigo_numero = det.tipo_asignacion
                                                                                   AND asig.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                                      INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = det.persona_id
                                      INNER JOIN sch_entidad.tbl_empleado        ete ON ete.persona_id = det.persona_id
                                                                                 AND ete.entidad_id = det.entidad_id
                                      INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                                      INNER JOIN sch_maestra.tbl_parametro       tdo ON tdo.codigo_numero = ptd.tipo_documento
                                                                                  AND tdo.tipo_parametro = 'PER_TIPO_DOCUMENTO'
                                      INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                                      INNER JOIN sch_entidad.tbl_organigrama     eor ON eor.organigrama_id = det.organigrama_id
                                                                                    AND eor.entidad_id = det.entidad_id
                                      INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = det.puesto_id
                                      LEFT JOIN sch_maestra.tbl_parametro       seg ON seg.codigo_numero = det.segmento_id
                                                                                 AND seg.tipo_parametro = 'SEGMENTO_GDR'
                                      INNER JOIN sch_maestra.tbl_parametro       est ON est.codigo_numero = det.estado_srv_civ_gdr_id
                                                                                  AND est.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL_GDR'
                                      LEFT JOIN sch_maestra.tbl_parametro       rol ON rol.codigo_numero = det.rol_id
                                                                                 AND rol.tipo_parametro = 'TIPO_ROL'
                                  WHERE
                                          det.estado_registro != '2'
                                      AND ete.puesto_id = det.puesto_id
                                      AND det.entidad_id = v_entidad_id
                              )                                  AS totalservidoresgdr,
                              (
                                  SELECT
                                      COUNT(*)
                                  FROM
                                           sch_entidad.tbl_detalle_uo det
                                      INNER JOIN sch_entidad.tbl_empleado        ete ON ete.persona_id = det.persona_id
                                                                                 AND ete.entidad_id = det.entidad_id
                                      INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                                      INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = det.puesto_id
                                      LEFT JOIN sch_maestra.tbl_parametro       seg ON seg.codigo_numero = det.segmento_id
                                                                                 AND seg.tipo_parametro = 'SEGMENTO_GDR'
                                      LEFT JOIN sch_maestra.tbl_parametro       rol ON rol.codigo_numero = det.rol_id
                                                                                 AND rol.tipo_parametro = 'TIPO_ROL'
                                  WHERE
                                          det.entidad_id = v_entidad_id
                                      AND det.rol_id IN ( 1, 3 )
                                      AND det.estado_srv_civ_gdr_id IN ( 1, 2 )
                                      AND det.estado_registro = '1'
                                      AND ete.puesto_id = det.puesto_id
                              )                                  AS totalevaluadores,
                              (
                                  SELECT
                                      COUNT(*)
                                  FROM
                                           sch_entidad.tbl_detalle_uo det
                                      INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = det.persona_id
                                      INNER JOIN sch_entidad.tbl_empleado        ete ON ete.persona_id = det.persona_id
                                                                                 AND ete.entidad_id = det.entidad_id
                                      INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                                      INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = det.puesto_id
                                      LEFT JOIN sch_maestra.tbl_parametro       seg ON seg.codigo_numero = det.segmento_id
                                                                                 AND seg.tipo_parametro = 'SEGMENTO_GDR'
                                      LEFT JOIN sch_maestra.tbl_parametro       rol ON rol.codigo_numero = det.rol_id
                                                                                 AND rol.tipo_parametro = 'TIPO_ROL'
                                  WHERE
                                          1 = 1
                                      AND det.entidad_id = v_entidad_id
                                      AND det.rol_id IN ( 2, 3 )
                                      AND det.estado_registro = '1'
                              )                                  AS totalevaluados
                          FROM
                              sch_entidad.tbl_entidad
                          WHERE
                              ROWNUM <= 1;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_RESUMEN_SERVIDORES_CIVILES_GDR>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);
    END sp_resumen_servidores_civiles_gdr;

    PROCEDURE sp_resumen_servidores_civiles_regimen_laboral_gdr (
        v_entidad_id IN sch_entidad.tbl_entidad.entidad_id%TYPE DEFAULT NULL,
        cur_test     OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
    BEGIN
        OPEN cur_test FOR SELECT
                              par.parametro_id AS graficoid,
                              COUNT(*)         descripcion,
                              par.valor_texto  AS codigotexto
                          FROM
                                   sch_entidad.tbl_detalle_uo det
                              INNER JOIN sch_maestra.tbl_parametro       asig ON asig.codigo_numero = det.tipo_asignacion
                                                                           AND asig.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                              INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = det.persona_id
                              INNER JOIN sch_entidad.tbl_empleado        ete ON ete.persona_id = det.persona_id
                                                                         AND ete.entidad_id = det.entidad_id
                              INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                              INNER JOIN sch_maestra.tbl_parametro       tdo ON tdo.codigo_numero = ptd.tipo_documento
                                                                          AND tdo.tipo_parametro = 'PER_TIPO_DOCUMENTO'
                              INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                              INNER JOIN sch_entidad.tbl_organigrama     eor ON eor.organigrama_id = det.organigrama_id
                                                                            AND eor.entidad_id = det.entidad_id
                              INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = det.puesto_id
                              LEFT JOIN sch_maestra.tbl_parametro       seg ON seg.codigo_numero = det.segmento_id
                                                                         AND seg.tipo_parametro = 'SEGMENTO_GDR'
                              INNER JOIN sch_maestra.tbl_parametro       est ON est.codigo_numero = det.estado_srv_civ_gdr_id
                                                                          AND est.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL_GDR'
                              LEFT JOIN sch_maestra.tbl_parametro       rol ON rol.codigo_numero = det.rol_id
                                                                         AND rol.tipo_parametro = 'TIPO_ROL'
                              INNER JOIN sch_maestra.tbl_parametro       par ON par.codigo_numero = ete.regimen_laboral_id
                                                                          AND par.tipo_parametro = 'TIPO_REGIMEN_LABORAL'
                          WHERE
                                  det.estado_registro != '2'
                              AND ete.puesto_id = det.puesto_id
                              AND det.entidad_id = v_entidad_id
                          GROUP BY
                              par.parametro_id,
                              par.codigo_numero,
                              par.valor_texto;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_RESUMEN_SERVIDORES_CIVILES_REGIMEN_LABORAL_GDR>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);
    END sp_resumen_servidores_civiles_regimen_laboral_gdr;

    PROCEDURE sp_resumen_servidores_civiles_tipo_organo_gdr (
        v_entidad_id IN sch_entidad.tbl_entidad.entidad_id%TYPE DEFAULT NULL,
        cur_test     OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
    BEGIN
        OPEN cur_test FOR SELECT
                              org.parametro_id AS graficoid,
                              COUNT(*)         descripcion,
                              org.valor_texto  AS codigotexto
                          FROM
                                   sch_entidad.tbl_detalle_uo det
                              INNER JOIN sch_maestra.tbl_parametro       asig ON asig.codigo_numero = det.tipo_asignacion
                                                                           AND asig.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                              INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = det.persona_id
                              INNER JOIN sch_entidad.tbl_empleado        ete ON ete.persona_id = det.persona_id
                                                                         AND ete.entidad_id = det.entidad_id
                              INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                              INNER JOIN sch_maestra.tbl_parametro       tdo ON tdo.codigo_numero = ptd.tipo_documento
                                                                          AND tdo.tipo_parametro = 'PER_TIPO_DOCUMENTO'
                              INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                              INNER JOIN sch_entidad.tbl_organigrama     eor ON eor.organigrama_id = det.organigrama_id
                                                                            AND eor.entidad_id = det.entidad_id
                              INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = det.puesto_id
                              LEFT JOIN sch_maestra.tbl_parametro       seg ON seg.codigo_numero = det.segmento_id
                                                                         AND seg.tipo_parametro = 'SEGMENTO_GDR'
                              INNER JOIN sch_maestra.tbl_parametro       est ON est.codigo_numero = det.estado_srv_civ_gdr_id
                                                                          AND est.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL_GDR'
                              LEFT JOIN sch_maestra.tbl_parametro       rol ON rol.codigo_numero = det.rol_id
                                                                         AND rol.tipo_parametro = 'TIPO_ROL'
                              INNER JOIN sch_maestra.tbl_parametro       par ON par.codigo_numero = ete.regimen_laboral_id
                                                                          AND par.tipo_parametro = 'TIPO_REGIMEN_LABORAL'
                              INNER JOIN sch_maestra.tbl_parametro       org ON org.parametro_id = eor.tipo_organo_uo_id
                                                                          AND org.tipo_parametro = 'TIPO_NATURALEZA'
                          WHERE
                                  det.estado_registro != '2'
                              AND ete.puesto_id = det.puesto_id
                              AND det.entidad_id = v_entidad_id
                          GROUP BY
                              org.parametro_id,
                              org.codigo_numero,
                              org.valor_texto;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_RESUMEN_SERVIDORES_CIVILES_TIPO_ORGANO_GDR>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);
    END sp_resumen_servidores_civiles_tipo_organo_gdr;

    PROCEDURE sp_resumen_servidores_civiles_x_carreras_especiales (
        v_entidad_id IN sch_entidad.tbl_entidad.entidad_id%TYPE DEFAULT NULL,
        cur_test     OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
    BEGIN
        OPEN cur_test FOR SELECT
                              par.parametro_id AS graficoid,
                              COUNT(*)         descripcion,
                              par.valor_texto  AS codigotexto
                          FROM
                                   sch_entidad.tbl_detalle_uo det
                              INNER JOIN sch_maestra.tbl_parametro       asig ON asig.codigo_numero = det.tipo_asignacion
                                                                           AND asig.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                              INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = det.persona_id
                              INNER JOIN sch_entidad.tbl_empleado        ete ON ete.persona_id = det.persona_id
                                                                         AND ete.entidad_id = det.entidad_id
                              INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                              INNER JOIN sch_maestra.tbl_parametro       tdo ON tdo.codigo_numero = ptd.tipo_documento
                                                                          AND tdo.tipo_parametro = 'PER_TIPO_DOCUMENTO'
                              INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                              INNER JOIN sch_entidad.tbl_organigrama     eor ON eor.organigrama_id = det.organigrama_id
                                                                            AND eor.entidad_id = det.entidad_id
                              INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = det.puesto_id
                              LEFT JOIN sch_maestra.tbl_parametro       seg ON seg.codigo_numero = det.segmento_id
                                                                         AND seg.tipo_parametro = 'SEGMENTO_GDR'
                              INNER JOIN sch_maestra.tbl_parametro       est ON est.codigo_numero = det.estado_srv_civ_gdr_id
                                                                          AND est.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL_GDR'
                              LEFT JOIN sch_maestra.tbl_parametro       rol ON rol.codigo_numero = det.rol_id
                                                                         AND rol.tipo_parametro = 'TIPO_ROL'
                              INNER JOIN sch_maestra.tbl_parametro       par ON par.codigo_numero = ete.regimen_laboral_id
                                                                          AND par.tipo_parametro = 'TIPO_REGIMEN_LABORAL'
                          WHERE
                                  det.estado_registro != '2'
                              AND ete.puesto_id = det.puesto_id
                              AND det.entidad_id = v_entidad_id
                              AND ( par.codigo_texto = 'REGIMEN_9'
                                    OR par.codigo_texto = 'REGIMEN_10'
                                    OR par.codigo_texto = 'REGIMEN_11'
                                    OR par.codigo_texto = 'REGIMEN_12'
                                    OR par.codigo_texto = 'REGIMEN_13'
                                    OR par.codigo_texto = 'REGIMEN_14'
                                    OR par.codigo_texto = 'REGIMEN_15'
                                    OR par.codigo_texto = 'REGIMEN_16'
                                    OR par.codigo_texto = 'REGIMEN_17' )
                          GROUP BY
                              par.parametro_id,
                              par.codigo_numero,
                              par.valor_texto;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<sp_resumen_servidores_civiles_x_carreras_especiales>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);
    END sp_resumen_servidores_civiles_x_carreras_especiales;

    PROCEDURE sp_resumen_servidores_civiles_sindicalizados_gdr (
        v_entidad_id IN sch_entidad.tbl_entidad.entidad_id%TYPE DEFAULT NULL,
        cur_test     OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
    BEGIN
        OPEN cur_test FOR SELECT
                              ete.persona_id AS graficoid,
                              COUNT(*)         descripcion,
                              (CASE
                                  WHEN ( ete.sindicato_flag = 'S'
                                         OR ete.sindicato_flag = '1' ) THEN
                                      'SINDICALIZADOS'
                                  WHEN ( ete.sindicato_flag = 'N'
                                         OR ete.sindicato_flag = '0' ) THEN
                                      'NO SINDICALIZADOS'
                              END)              AS codigoTexto
                          FROM
                                   sch_entidad.tbl_detalle_uo det
                              INNER JOIN sch_maestra.tbl_parametro       asig ON asig.codigo_numero = det.tipo_asignacion
                                                                           AND asig.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                              INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = det.persona_id
                              INNER JOIN sch_entidad.tbl_empleado        ete ON ete.persona_id = det.persona_id
                                                                         AND ete.entidad_id = det.entidad_id
                              INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                              INNER JOIN sch_maestra.tbl_parametro       tdo ON tdo.codigo_numero = ptd.tipo_documento
                                                                          AND tdo.tipo_parametro = 'PER_TIPO_DOCUMENTO'
                              INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                              INNER JOIN sch_entidad.tbl_organigrama     eor ON eor.organigrama_id = det.organigrama_id
                                                                            AND eor.entidad_id = det.entidad_id
                              INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = det.puesto_id
                              LEFT JOIN sch_maestra.tbl_parametro       seg ON seg.codigo_numero = det.segmento_id
                                                                         AND seg.tipo_parametro = 'SEGMENTO_GDR'
                              INNER JOIN sch_maestra.tbl_parametro       est ON est.codigo_numero = det.estado_srv_civ_gdr_id
                                                                          AND est.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL_GDR'
                              LEFT JOIN sch_maestra.tbl_parametro       rol ON rol.codigo_numero = det.rol_id
                                                                         AND rol.tipo_parametro = 'TIPO_ROL'
                              INNER JOIN sch_maestra.tbl_parametro       par ON par.codigo_numero = ete.regimen_laboral_id
                                                                          AND par.tipo_parametro = 'TIPO_REGIMEN_LABORAL'
                              INNER JOIN sch_maestra.tbl_parametro       org ON org.parametro_id = eor.tipo_organo_uo_id
                                                                          AND org.tipo_parametro = 'TIPO_NATURALEZA'
                          WHERE
                                  det.estado_registro != '2'
                              AND ete.puesto_id = det.puesto_id
                              AND det.entidad_id = v_entidad_id
                          GROUP BY
                              ete.persona_id,
                              ete.sindicato_flag;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<sp_resumen_servidores_civiles_sindicalizados>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);
    END sp_resumen_servidores_civiles_sindicalizados_gdr;

    PROCEDURE SP_RESUMEN_SERVIDORES_CIVILES_X_SEGMENTO_GDR (
        v_entidad_id IN sch_entidad.tbl_entidad.entidad_id%TYPE DEFAULT NULL,
        cur_test     OUT cursor_test
    ) IS
        vl_nro_error NUMBER;
        vl_des_error VARCHAR(3000);
    BEGIN
        OPEN cur_test FOR SELECT
                              seg.parametro_id AS graficoid,
                              COUNT(*)         descripcion,
                              seg.valor_texto  AS codigotexto
                          FROM
                                   sch_entidad.tbl_detalle_uo det
                              INNER JOIN sch_maestra.tbl_parametro       asig ON asig.codigo_numero = det.tipo_asignacion
                                                                           AND asig.tipo_parametro = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
                              INNER JOIN sch_persona.tbl_persona         ptp ON ptp.persona_id = det.persona_id
                              INNER JOIN sch_entidad.tbl_empleado        ete ON ete.persona_id = det.persona_id
                                                                         AND ete.entidad_id = det.entidad_id
                              INNER JOIN sch_persona.tbl_documento       ptd ON ptd.documento_id = ptp.documento_id
                              INNER JOIN sch_maestra.tbl_parametro       tdo ON tdo.codigo_numero = ptd.tipo_documento
                                                                          AND tdo.tipo_parametro = 'PER_TIPO_DOCUMENTO'
                              INNER JOIN sch_persona.tbl_persona_natural ppn ON ppn.persona_id = det.persona_id
                              INNER JOIN sch_entidad.tbl_organigrama     eor ON eor.organigrama_id = det.organigrama_id
                                                                            AND eor.entidad_id = det.entidad_id
                              INNER JOIN sch_entidad.tbl_puesto          etp ON etp.puesto_id = det.puesto_id
                              LEFT JOIN sch_maestra.tbl_parametro       seg ON seg.codigo_numero = det.segmento_id
                                                                         AND seg.tipo_parametro = 'SEGMENTO_GDR'
                              INNER JOIN sch_maestra.tbl_parametro       est ON est.codigo_numero = det.estado_srv_civ_gdr_id
                                                                          AND est.tipo_parametro = 'ESTADO_SERVIDOR_CIVIL_GDR'
                              LEFT JOIN sch_maestra.tbl_parametro       rol ON rol.codigo_numero = det.rol_id
                                                                         AND rol.tipo_parametro = 'TIPO_ROL'
                              INNER JOIN sch_maestra.tbl_parametro       par ON par.codigo_numero = ete.regimen_laboral_id
                                                                          AND par.tipo_parametro = 'TIPO_REGIMEN_LABORAL'
                              INNER JOIN sch_maestra.tbl_parametro       org ON org.parametro_id = eor.tipo_organo_uo_id
                                                                          AND org.tipo_parametro = 'TIPO_NATURALEZA'
                          WHERE
                                  det.estado_registro != '2'
                              AND ete.puesto_id = det.puesto_id
                              AND det.entidad_id = v_entidad_id
                          GROUP BY
                              seg.parametro_id,
                              seg.valor_texto;

    EXCEPTION
        WHEN OTHERS THEN
            vl_nro_error := sqlcode;
            vl_des_error := substr(sqlerrm(vl_nro_error), 1, 512);
            /*raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_RESUMEN_SERVIDORES_CIVILES_X_SEGMENTO_GDR>>.'
                                            || vl_nro_error
                                            || ', '
                                            || vl_des_error);*/
    END SP_RESUMEN_SERVIDORES_CIVILES_X_SEGMENTO_GDR;

end PKG_GESTION;