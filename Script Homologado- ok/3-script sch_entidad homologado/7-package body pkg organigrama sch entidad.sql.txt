CREATE OR REPLACE package body SCH_ENTIDAD.PKG_ORGANIGRAMA is

PROCEDURE SP_BUSCAR_UNIDADES_ORGANICAS_ENTIDAD (V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL 
											   ,V_TIPORGANO_ID       IN SCH_ENTIDAD.TBL_ORGANIGRAMA.NATURALEZA_ORGANO%TYPE DEFAULT NULL 
											   ,V_UO_SUP_ID          IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PADRE_ORGANIGRAMA_ID%TYPE DEFAULT NULL 
                                               ,CUR_TEST            OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT ORG.ORGANIGRAMA_ID AS "id",
           ORG.DESCRIPCION AS "descripcion", 
		   ORG.SIGLA AS "sigla",
           ORG.NATURALEZA_ORGANO AS "tipoOrganoId",
           ORG.PADRE_ORGANIGRAMA_Id AS "uoSupId",
           ORG.ESTADO_REGISTRO AS "estadoRegistro"
      FROM SCH_ENTIDAD.TBL_ORGANIGRAMA ORG 
     WHERE ORG.ESTADO_REGISTRO = '1' 
     and ORG.ENTIDAD_ID = V_ENTIDAD_ID
       /*AND PADRE_ORGANIGRAMA_ID IN (SELECT ORGANIGRAMA_ID 
                                      FROM TBL_ORGANIGRAMA ORG
                                     WHERE ORG.ESTADO_REGISTRO = '1' 
                                       AND (ORG.ORGANIGRAMA_ID = V_UO_SUP_ID OR (V_UO_SUP_ID = 0 OR V_UO_SUP_ID IS NULL)) 
                                       AND ORG.ENTIDAD_ID = V_ENTIDAD_ID)  */
        AND (PADRE_ORGANIGRAMA_ID =  V_UO_SUP_ID  OR V_UO_SUP_ID IS NULL)                               
       AND (ORG.NATURALEZA_ORGANO = V_TIPORGANO_ID OR V_TIPORGANO_ID IS NULL)
  ORDER BY ORG.ORGANIGRAMA_ID;

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_UNIDADES_ORGANICAS_ENTIDAD>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_UNIDADES_ORGANICAS_ENTIDAD;

PROCEDURE SP_BUSCAR_UNIDADES_ORGANICAS_SUPERIOR_ENTIDAD (V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL
                                                        ,V_TIPORGANO_ID       IN SCH_ENTIDAD.TBL_ORGANIGRAMA.TIPO_ORGANO_UO_ID%TYPE DEFAULT NULL
                                                        ,CUR_TEST            OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
SELECT ORG.ORGANIGRAMA_ID AS "id",
           ORG.DESCRIPCION AS "descripcion", 
		   ORG.SIGLA AS "sigla",
           ORG.NATURALEZA_ORGANO AS "tipoOrganoId",
           ORG.PADRE_ORGANIGRAMA_Id AS "uoSupId"
      FROM SCH_ENTIDAD.TBL_ORGANIGRAMA ORG, 
           (SELECT DISTINCT PAO.PADRE_ORGANIGRAMA_ID 
              FROM TBL_ORGANIGRAMA PAO
             WHERE PAO.PADRE_ORGANIGRAMA_ID IS NOT NULL
               AND PAO.ESTADO_REGISTRO = '1'
               AND PAO.ENTIDAD_ID = V_ENTIDAD_ID
           ) PAD
      WHERE 1 = 1
        AND PAD.PADRE_ORGANIGRAMA_ID = ORG.ORGANIGRAMA_ID
        AND (ORG.NATURALEZA_ORGANO = V_TIPORGANO_ID OR (V_TIPORGANO_ID = 0 OR V_TIPORGANO_ID IS NULL)) 
      ORDER BY NVL(ORG.PADRE_ORGANIGRAMA_ID, 0);

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_UNIDADES_ORGANICAS_SUPERIOR_ENTIDAD>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_UNIDADES_ORGANICAS_SUPERIOR_ENTIDAD;

PROCEDURE SP_BUSCAR_PUESTOS_ENTIDAD (V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_PUESTO.ENTIDAD_ID%TYPE DEFAULT NULL 
                                    ,V_ORGANIGRAMA_ID     IN SCH_ENTIDAD.TBL_PUESTO.ORGANIGRAMA_ID%TYPE
                                    ,CUR_TEST            OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
	SELECT PUE.PUESTO_ID AS "id",
           PUE.DESCRIPCION AS "descripcion",
           PUE.ORGANIGRAMA_ID AS "organigramaId"
      FROM TBL_PUESTO PUE 
     WHERE 1=1
       AND PUE.ESTADO_REGISTRO = '1' 
       AND PUE.ENTIDAD_ID = V_ENTIDAD_ID 
       AND (1=1 AND (PUE.ORGANIGRAMA_ID = V_ORGANIGRAMA_ID OR V_ORGANIGRAMA_ID IS NULL)) 
  ORDER BY PUE.PUESTO_ID;

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PUESTOS_ENTIDAD>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_PUESTOS_ENTIDAD;

PROCEDURE SP_SEL_SERVIDORES_CIVILES (V_ENTIDAD_ID IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                    ,V_TIPO_ORGANO IN SCH_ENTIDAD.TBL_ORGANIGRAMA.TIPO_ORGANO_UO_ID%TYPE
                                    ,V_UO_SUPERIOR IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PADRE_ORGANIGRAMA_ID%TYPE
                                    ,V_UO IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE
                                    ,V_REGIMEN_LABORAL IN SCH_ENTIDAD.TBL_EMPLEADO.REGIMEN_LABORAL_ID%TYPE
                                    ,V_TIPO_DOCUMENTO IN SCH_PERSONA.TBL_DOCUMENTO.TIPO_DOCUMENTO%TYPE
                                    ,V_APE_PAT_MAT_NOM IN VARCHAR2
                                    ,V_NUMERO_DOCUMENTO IN SCH_PERSONA.TBL_DOCUMENTO.NUMERO_DOCUMENTO%TYPE
                                    ,V_ESTADO_ID IN SCH_ENTIDAD.TBL_DETALLE_UO.ESTADO_REGISTRO%TYPE
									,CUR_TEST OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
    OPEN CUR_TEST FOR
        SELECT
            NVL(DET.FLAG_HABILITAR,0) AS "flagHabilitar",
            DET.DET_UO_ID AS "detUnidadOrganicaId",            
            DET.ORGANIGRAMA_ID AS "organigramaId", 
            DET.PERSONA_ID AS "personaId",
            PTD.NUMERO_DOCUMENTO AS "docEntidadId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            EOR.SIGLA AS "unidadOrganica",
            ETP.DESCRIPCION AS "puesto",
            TAS.VALOR_TEXTO AS "tipoAsignacion",
            NVL(DET.SEGMENTO_ID,0) AS "segmentoId",
            NVL(DET.ROL_ID,0) AS "rolId",
            CIV.VALOR_TEXTO AS "estado",
            DET.ESTADO_REGISTRO AS "estadoRegistro",
            RLA.CODIGO_NUMERO AS "regimenId",
            RLA.VALOR_TEXTO AS "regimenLaboral"
         FROM SCH_ENTIDAD.TBL_EMPLEADO ETE
         INNER JOIN SCH_ENTIDAD.TBL_DETALLE_UO DET ON ete.entidad_id=det.entidad_id AND ETE.PERSONA_ID=det.persona_id AND ete.puesto_id=det.puesto_id    
         INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA EOR ON det.organigrama_id=EOR.organigrama_id AND DET.ENTIDAD_ID=eor.entidad_id
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = ETE.PUESTO_ID AND ETP.ENTIDAD_ID=ETE.ENTIDAD_ID AND ETP.ORGANIGRAMA_ID=EOR.ORGANIGRAMA_ID
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = ETE.PERSONA_ID         
         INNER JOIN SCH_PERSONA.TBL_DOCUMENTO PTD ON PTD.DOCUMENTO_ID = PTP.DOCUMENTO_ID
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO CIV ON CIV.CODIGO_NUMERO = DET.ESTADO_REGISTRO AND CIV.TIPO_PARAMETRO = 'ESTADO_SERVIDOR_CIVIL'
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TAS ON TAS.CODIGO_NUMERO = DET.TIPO_ASIGNACION AND TAS.TIPO_PARAMETRO = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO RLA ON RLA.CODIGO_NUMERO = ETE.REGIMEN_LABORAL_ID AND RLA.TIPO_PARAMETRO = 'TIPO_REGIMEN_LABORAL'
           WHERE ETE.ESTADO_REGISTRO != 0
		   AND (DET.ENTIDAD_ID           = V_ENTIDAD_ID OR V_ENTIDAD_ID IS NULL) 
           AND (EOR.NATURALEZA_ORGANO    = V_TIPO_ORGANO OR V_TIPO_ORGANO IS NULL) 
           AND ((V_UO IS NOT NULL AND (EOR.ORGANIGRAMA_ID = V_UO OR V_UO IS NULL))  
                  OR (EOR.ORGANIGRAMA_ID IN ( SELECT ORN.ORGANIGRAMA_ID 
                                                FROM TBL_ORGANIGRAMA ORN
                                               WHERE ORN.ENTIDAD_ID = V_ENTIDAD_ID 
                                                 AND ORN.ESTADO_REGISTRO = '1' 
                                                 AND (ORN.PADRE_ORGANIGRAMA_ID = V_UO_SUPERIOR OR ORN.ORGANIGRAMA_ID = V_UO_SUPERIOR) 
                                            ) 
				  OR V_UO_SUPERIOR IS NULL) ) 
           AND (ETE.REGIMEN_LABORAL_ID   = V_REGIMEN_LABORAL OR V_REGIMEN_LABORAL IS NULL) 
           AND ((PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES) LIKE '%'||V_APE_PAT_MAT_NOM||'%' OR V_APE_PAT_MAT_NOM IS NULL) 
           AND (PTD.TIPO_DOCUMENTO       = V_TIPO_DOCUMENTO OR V_TIPO_DOCUMENTO IS NULL) 
 		       AND (DET.ESTADO_REGISTRO  = V_ESTADO_ID OR (V_ESTADO_ID IS NULL AND DET.ESTADO_REGISTRO != '0')) 
         ORDER BY PPN.APELLIDO_PATERNO;

        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_SEL_SERVIDORES_CIVILES>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_SEL_SERVIDORES_CIVILES;

PROCEDURE SP_BUSCAR_ORGANIGRAMA_PADRE(V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL 
                                     ,V_PERSONA_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PERSONA_RESPONSABLE_ID%TYPE DEFAULT NULL
                                     ,V_ORGANIGRAMA_ID     IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE DEFAULT NULL                                     
                                     ,V_PUESTO_ID          IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PUESTO_ID%TYPE DEFAULT NULL  
                                     ,V_ESTADO_REGISTRO    IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ESTADO_REGISTRO%TYPE DEFAULT NULL
                                     ,V_UNIDAD_ID          IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE DEFAULT NULL
                                     ,CUR_TEST            OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
         SELECT DISTINCT ORG.ORGANIGRAMA_ID AS "organigramaId",
                ORG.ENTIDAD_ID AS "entidadId",
                ORG.AREA_ID as "areaId", 
                ORG.SEDE_ID as "sedeId",     
                PU.DESCRIPCION as "puesto", 
                ORG.PUESTO_ID as "puestoId",
                EMP.URL_FOTO AS "urlFoto", 
                ORG.ORDEN as "orden",        
                ORG.DESCRIPCION AS "descripcion",
                ORG.NIVEL AS "nivelId",
                NIVEL.DESCRIPCION AS "desNivel",
                ORG.SIGLA AS "sigla",
                ORG.NATURALEZA_ORGANO AS "naturalezaId",
                NATURA.DESCRIPCION AS "desNaturaleza",
                ORG.ESTADO_REGISTRO AS "estadoId",
                DECODE(ORG.ESTADO_REGISTRO,'1','ACTIVO','INACTIVO') AS "estado",
                ORG.PADRE_ORGANIGRAMA_ID AS "padreIdOrgHijo",
                ORG.TIPO_ORGANO_UO_ID AS "tipoOrganoId",
                TIP_ORG.DESCRIPCION AS "desTipoOrgano",
                ORG.NIVEL_GOBIERNO_ID AS "nivelGobiernoId",
                ORG.DESCRIPCION_CORTA AS "descripcionCorta",
                ORG.PERSONA_RESPONSABLE_ID AS "personaResponsableId",
                RES.Nombres AS "nombres",
                RES.APELLIDO_PATERNO AS "apellidoPaterno",
                RES.APELLIDO_MATERNO AS "apellidoMaterno",
                DOCU.TIPO_DOCUMENTO AS "tipoDocumentoId",
                PARA.DESCRIPCION AS "tipoDocumento",
                DOCU.NUMERO_DOCUMENTO AS "numeroDocumento",
                ORG.TELEFONO_ID AS "telefonoId",
                TEL.NUMERO_TELEFONO AS "telefono",
                ORG.CORREO_ID AS "correoId",
                CO.CORREO AS "correo",
                PAIS.PAIS_ID AS "paisId",
                PAIS.NOMBRE_PAIS AS "nombrePais",
                '' as "padreId"
          FROM SCH_ENTIDAD.Tbl_Organigrama ORG 
     LEFT JOIN SCH_ENTIDAD.Tbl_Organigrama ORG_HIJO ON ORG_HIJO.PADRE_ORGANIGRAMA_ID = ORG.ORGANIGRAMA_ID
     LEFT JOIN SCH_ENTIDAD.Tbl_Empleado EMP ON EMP.ENTIDAD_ID = ORG.ENTIDAD_ID AND EMP.PERSONA_ID = ORG.PERSONA_RESPONSABLE_ID
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO NIVEL ON NIVEL.PARAMETRO_ID = ORG.NIVEL AND NIVEL.ESTADO_REGISTRO = '1'
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TIP_ORG ON TIP_ORG.PARAMETRO_ID = ORG.TIPO_ORGANO_UO_ID AND TIP_ORG.ESTADO_REGISTRO = '1'
    INNER JOIN SCH_MAESTRA.TBL_PARAMETRO NATURA ON  NATURA.PARAMETRO_ID = ORG.NATURALEZA_ORGANO AND NATURA.ESTADO_REGISTRO = '1' 
    INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL RES ON RES.PERSONA_ID = ORG.PERSONA_RESPONSABLE_ID
     LEFT JOIN SCH_MAESTRA.TBL_PAIS PAIS ON PAIS.PAIS_ID = RES.PAIS_ID
     LEFT JOIN SCH_PERSONA.TBL_DOCUMENTO DOCU ON DOCU.PERSONA_ID = ORG.PERSONA_RESPONSABLE_ID
     LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO PARA ON PARA.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO' AND PARA.CODIGO_NUMERO = DOCU.TIPO_DOCUMENTO
     LEFT JOIN SCH_PERSONA.TBL_TELEFONO TEL ON TEL.TELEFONO_ID = ORG.TELEFONO_ID
     LEFT JOIN SCH_PERSONA.TBL_CORREO CO ON CO.CORREO_ID = ORG.CORREO_ID
	 LEFT JOIN SCH_ENTIDAD.TBL_PUESTO PU ON PU.PUESTO_ID = ORG.PUESTO_ID
         WHERE 1 = 1 
           AND ORG.TIPO_ORGANO_UO_ID = (SELECT PARAMETRO_ID 
                                          FROM SCH_MAESTRA.TBL_PARAMETRO 
                                         WHERE TIPO_PARAMETRO = 'TIPO_ORGANO'
                                           AND CODIGO_TEXTO = 'TIPO_ORGANO') 
           AND (ORG.ESTADO_REGISTRO = NVL(V_ESTADO_REGISTRO,ORG.ESTADO_REGISTRO) OR ORG_HIJO.ESTADO_REGISTRO = NVL(V_ESTADO_REGISTRO,ORG_HIJO.ESTADO_REGISTRO))     
           AND ORG.PADRE_ORGANIGRAMA_ID IS NULL 
           AND ORG.PERSONA_RESPONSABLE_ID = NVL(V_PERSONA_ID,ORG.PERSONA_RESPONSABLE_ID)
           AND ORG.ORGANIGRAMA_ID = NVL(V_ORGANIGRAMA_ID,ORG.ORGANIGRAMA_ID) 
           AND ORG.ORGANIGRAMA_ID = NVL(V_UNIDAD_ID,ORG.ORGANIGRAMA_ID)
           AND (1=1 OR (ORG.PUESTO_ID = NVL(V_PUESTO_ID,ORG.PUESTO_ID) OR ORG_HIJO.PUESTO_ID = NVL(V_PUESTO_ID,ORG_HIJO.PUESTO_ID))) 
           AND ORG.ENTIDAD_ID = V_ENTIDAD_ID
         ORDER BY ORG.ORGANIGRAMA_ID DESC; 
    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_ORGANIGRAMA_PADRE>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_ORGANIGRAMA_PADRE;

PROCEDURE SP_BUSCAR_ORGANIGRAMA_HIJO(V_ENTIDAD_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE DEFAULT NULL 
                                    ,V_PERSONA_ID         IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PERSONA_RESPONSABLE_ID%TYPE DEFAULT NULL                                
                                    ,V_UNIDAD_ID          IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE DEFAULT NULL
                                    ,V_PUESTO_ID          IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PUESTO_ID%TYPE DEFAULT NULL  
                                    ,V_ESTADO_REGISTRO    IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ESTADO_REGISTRO%TYPE DEFAULT NULL
                                    ,CUR_TEST            OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
    SELECT DISTINCT T.*
    FROM (  SELECT UNIDAD_HIJO.ORGANIGRAMA_ID AS "organigramaId",
                   UNIDAD_HIJO.ENTIDAD_ID AS "entidadId", 
                   UNIDAD_HIJO.AREA_ID AS "areaId", 
                   UNIDAD_HIJO.SEDE_ID AS "sedeId",         
                   PU.DESCRIPCION AS "puesto", 
                   UNIDAD_HIJO.PUESTO_ID AS "puestoId", 
                   EMP.URL_FOTO AS "urlFoto",
                   UNIDAD_HIJO.ORDEN AS "orden",      
                   UNIDAD_HIJO.DESCRIPCION AS "descripcion",
                   UNIDAD_HIJO.NIVEL AS "nivelId",
                   NIVEL.DESCRIPCION AS "desNivel",
                   UNIDAD_HIJO.SIGLA AS "sigla",
                   UNIDAD_HIJO.NATURALEZA_ORGANO AS "naturalezaId",
                   NATURA.DESCRIPCION AS "desNaturaleza",
                   UNIDAD_HIJO.ESTADO_REGISTRO AS "estadoId",
                   DECODE(UNIDAD_HIJO.ESTADO_REGISTRO,'1','ACTIVO','INACTIVO') AS "estado",
                   UNIDAD_HIJO.PADRE_ORGANIGRAMA_ID AS "padreIdOrgHijo",
                   UNIDAD_HIJO.TIPO_ORGANO_UO_ID AS "tipoOrganoId",
                   TIP_ORG.DESCRIPCION AS "desTipoOrgano",
                   UNIDAD_HIJO.NIVEL_GOBIERNO_ID AS "nivelGobiernoId",
                   UNIDAD_HIJO.DESCRIPCION_CORTA AS "descripcionCorta",
                   UNIDAD_HIJO.PERSONA_RESPONSABLE_ID AS "personaResponsableId",
                   RES.Nombres AS "nombres",
                   RES.APELLIDO_PATERNO AS "apellidoPaterno",
                   RES.APELLIDO_MATERNO AS "apellidoMaterno",
                   DOCU.TIPO_DOCUMENTO AS "tipoDocumentoId",
                   PARA.DESCRIPCION AS "tipoDocumento",
                   DOCU.NUMERO_DOCUMENTO AS "numeroDocumento",
                   UNIDAD_HIJO.TELEFONO_ID AS "telefonoId",
                   TEL.NUMERO_TELEFONO AS "telefono",
                   UNIDAD_HIJO.CORREO_ID AS "correoId",
                   CO.CORREO AS "correo",
                   PAIS.PAIS_ID AS "paisId",
                   PAIS.NOMBRE_PAIS AS "nombrePais",
                   ORG_HIJO.Padre_Organigrama_Id as "padreId"
             FROM SCH_ENTIDAD.Tbl_Organigrama UNIDAD_HIJO 
       INNER JOIN SCH_ENTIDAD.Tbl_Organigrama ORG_HIJO ON ORG_HIJO.Organigrama_Id = UNIDAD_HIJO.Padre_Organigrama_Id
        LEFT JOIN SCH_ENTIDAD.Tbl_Organigrama ORG ON ORG.Organigrama_Id = ORG_HIJO.Padre_Organigrama_Id
        LEFT JOIN SCH_ENTIDAD.Tbl_Empleado EMP ON EMP.ENTIDAD_ID = ORG.ENTIDAD_ID AND EMP.PERSONA_ID = ORG.PERSONA_RESPONSABLE_ID
       INNER JOIN SCH_MAESTRA.TBL_PARAMETRO NIVEL ON NIVEL.PARAMETRO_ID = UNIDAD_HIJO.NIVEL AND NIVEL.ESTADO_REGISTRO = '1'
       INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TIP_ORG ON TIP_ORG.PARAMETRO_ID = UNIDAD_HIJO.TIPO_ORGANO_UO_ID AND TIP_ORG.ESTADO_REGISTRO = '1'
        LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO NATURA ON  NATURA.PARAMETRO_ID = UNIDAD_HIJO.NATURALEZA_ORGANO AND NATURA.ESTADO_REGISTRO = '1'  
       INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL RES ON RES.PERSONA_ID = UNIDAD_HIJO.PERSONA_RESPONSABLE_ID
        LEFT JOIN SCH_MAESTRA.TBL_PAIS PAIS ON PAIS.PAIS_ID = RES.PAIS_ID
        LEFT JOIN SCH_PERSONA.TBL_DOCUMENTO DOCU ON DOCU.PERSONA_ID = UNIDAD_HIJO.PERSONA_RESPONSABLE_ID
        LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO PARA ON PARA.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO' AND PARA.CODIGO_NUMERO = DOCU.TIPO_DOCUMENTO
        LEFT JOIN SCH_PERSONA.TBL_TELEFONO TEL ON TEL.TELEFONO_ID = UNIDAD_HIJO.TELEFONO_ID
        LEFT JOIN SCH_PERSONA.TBL_CORREO CO ON CO.CORREO_ID = UNIDAD_HIJO.CORREO_ID
	    LEFT JOIN SCH_ENTIDAD.TBL_PUESTO PU ON PU.PUESTO_ID = UNIDAD_HIJO.PUESTO_ID
            WHERE 1 = 1 
              AND UNIDAD_HIJO.ESTADO_REGISTRO = NVL(V_ESTADO_REGISTRO,UNIDAD_HIJO.ESTADO_REGISTRO) 
              AND UNIDAD_HIJO.PERSONA_RESPONSABLE_ID = NVL(V_PERSONA_ID,UNIDAD_HIJO.PERSONA_RESPONSABLE_ID)
              AND ORG_HIJO.ORGANIGRAMA_ID = UNIDAD_HIJO.PADRE_ORGANIGRAMA_ID
              AND UNIDAD_HIJO.ORGANIGRAMA_ID = NVL(V_UNIDAD_ID,UNIDAD_HIJO.ORGANIGRAMA_ID)
              AND (1=1 OR (UNIDAD_HIJO.PUESTO_ID = NVL(V_PUESTO_ID,UNIDAD_HIJO.PUESTO_ID)))
              AND UNIDAD_HIJO.ENTIDAD_ID = V_ENTIDAD_ID 
              AND UNIDAD_HIJO.PADRE_ORGANIGRAMA_ID IS NOT NULL
    UNION ALL 
           SELECT ORG_HIJO.ORGANIGRAMA_ID AS "idOrganigramaDto",
                  ORG_HIJO.ENTIDAD_ID AS "idEntidadDto", 
                  ORG_HIJO.AREA_ID AS "areaIdDto", 
                  ORG_HIJO.SEDE_ID AS "sedeIdDto", 
                  PU.DESCRIPCION AS "puesto", 
                  ORG_HIJO.PUESTO_ID AS "puestoIdDto", 
                  EMP.URL_FOTO AS "urlFotoDto",
                  ORG_HIJO.ORDEN AS "ordenDto",      
                  ORG_HIJO.DESCRIPCION AS "descripcionDto",
                  ORG_HIJO.NIVEL AS "nivelIdDto",
                  NIVEL.DESCRIPCION AS "desNivelDto",
                  ORG_HIJO.SIGLA AS "siglaDto",
                  ORG_HIJO.NATURALEZA_ORGANO AS "naturalezaIdDto",
                  NATURA.DESCRIPCION AS "desNaturalezaDto",
                  ORG_HIJO.ESTADO_REGISTRO AS "estadoIdDto",
                  DECODE(ORG_HIJO.ESTADO_REGISTRO,'1','ACTIVO','INACTIVO') AS "estadoDto",
                  ORG_HIJO.PADRE_ORGANIGRAMA_ID AS "padreIdOrgHijoDto",
                  ORG_HIJO.TIPO_ORGANO_UO_ID AS "tipoOrganoIdDto",
                  TIP_ORG.DESCRIPCION AS "desTipoOrganoDto",
                  ORG_HIJO.NIVEL_GOBIERNO_ID AS "nivelGobiernoIdDto",
                  ORG_HIJO.DESCRIPCION_CORTA AS "descripcionCortaDto",
                  ORG_HIJO.PERSONA_RESPONSABLE_ID AS "personaResponsableIdDto",
                  RES.Nombres AS "nombresDto",
                  RES.APELLIDO_PATERNO AS "apellidoPaternoDto",
                  RES.APELLIDO_MATERNO AS "apellidoMaternoDto",
                  DOCU.TIPO_DOCUMENTO AS "tipoDocumentoIdDto",
                  PARA.DESCRIPCION AS "tipoDocumentoDto",
                  DOCU.NUMERO_DOCUMENTO AS "numeroDocumentoDto",
                  ORG_HIJO.TELEFONO_ID AS "telefonoIdDto",
                  TEL.NUMERO_TELEFONO AS "telefonoDto",
                  ORG_HIJO.CORREO_ID AS "correoIdDto",
                  CO.CORREO AS "correoDto",
                  PAIS.PAIS_ID AS "paisIdDto",
                  PAIS.NOMBRE_PAIS AS "nombrePaisDto",
                  ORG.Padre_Organigrama_Id AS "padreIdDto"
             FROM SCH_ENTIDAD.Tbl_Organigrama UNIDAD_HIJO 
       INNER JOIN SCH_ENTIDAD.Tbl_Organigrama ORG_HIJO ON ORG_HIJO.Organigrama_Id = UNIDAD_HIJO.Padre_Organigrama_Id
        LEFT JOIN SCH_ENTIDAD.Tbl_Organigrama ORG ON ORG.Organigrama_Id = ORG_HIJO.Padre_Organigrama_Id
        LEFT JOIN SCH_ENTIDAD.Tbl_Empleado EMP ON EMP.ENTIDAD_ID = ORG.ENTIDAD_ID AND EMP.PERSONA_ID = ORG.PERSONA_RESPONSABLE_ID
       INNER JOIN SCH_MAESTRA.TBL_PARAMETRO NIVEL ON NIVEL.PARAMETRO_ID = ORG_HIJO.NIVEL AND NIVEL.ESTADO_REGISTRO = '1'
       INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TIP_ORG ON TIP_ORG.PARAMETRO_ID = ORG_HIJO.TIPO_ORGANO_UO_ID AND TIP_ORG.ESTADO_REGISTRO = '1'
        LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO NATURA ON  NATURA.PARAMETRO_ID = ORG_HIJO.NATURALEZA_ORGANO AND NATURA.ESTADO_REGISTRO = '1'  
       INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL RES ON RES.PERSONA_ID = ORG_HIJO.PERSONA_RESPONSABLE_ID
        LEFT JOIN SCH_MAESTRA.TBL_PAIS PAIS ON PAIS.PAIS_ID = RES.PAIS_ID
        LEFT JOIN SCH_PERSONA.TBL_DOCUMENTO DOCU ON DOCU.PERSONA_ID = ORG_HIJO.PERSONA_RESPONSABLE_ID
        LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO PARA ON PARA.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO' AND PARA.CODIGO_NUMERO = DOCU.TIPO_DOCUMENTO
        LEFT JOIN SCH_PERSONA.TBL_TELEFONO TEL ON TEL.TELEFONO_ID = ORG_HIJO.TELEFONO_ID
        LEFT JOIN SCH_PERSONA.TBL_CORREO CO ON CO.CORREO_ID = ORG_HIJO.CORREO_ID
	    LEFT JOIN SCH_ENTIDAD.TBL_PUESTO PU ON PU.PUESTO_ID = ORG.PUESTO_ID
            WHERE 1 = 1 
              AND ORG_HIJO.ESTADO_REGISTRO = NVL(V_ESTADO_REGISTRO,ORG_HIJO.ESTADO_REGISTRO) 
              AND ORG_HIJO.PERSONA_RESPONSABLE_ID = NVL(V_PERSONA_ID,ORG_HIJO.PERSONA_RESPONSABLE_ID)
              AND ORG_HIJO.ORGANIGRAMA_ID = UNIDAD_HIJO.PADRE_ORGANIGRAMA_ID 
              AND UNIDAD_HIJO.ORGANIGRAMA_ID = NVL(V_UNIDAD_ID,UNIDAD_HIJO.ORGANIGRAMA_ID)
              AND (1=1 OR (ORG_HIJO.PUESTO_ID = NVL(V_PUESTO_ID,ORG_HIJO.PUESTO_ID))) 
              AND ORG_HIJO.ENTIDAD_ID = V_ENTIDAD_ID 
              AND ORG_HIJO.PADRE_ORGANIGRAMA_ID IS NOT NULL) T;

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_ORGANIGRAMA_HIJO>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_BUSCAR_ORGANIGRAMA_HIJO;

PROCEDURE SP_OBTENER_PARAMETROS (V_TIPO_PARAMETRO         IN SCH_MAESTRA.TBL_PARAMETRO.TIPO_PARAMETRO%TYPE DEFAULT NULL 
								,V_ESTADO_REGISTRO		  IN SCH_MAESTRA.TBL_PARAMETRO.ESTADO_REGISTRO%TYPE DEFAULT NULL 
								,V_CODIGO_NUMERO		  IN SCH_MAESTRA.TBL_PARAMETRO.CODIGO_NUMERO%TYPE DEFAULT NULL 
                                ,CUR_TEST                OUT cursor_test)
IS
  VL_NRO_ERROR      NUMBER;
  VL_DES_ERROR      VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
	SELECT PAR.PARAMETRO_ID AS "parametroId",
		   PAR.TIPO_PARAMETRO AS "tipoParametro",
		   PAR.CODIGO_TEXTO AS "codigoTexto",
		   PAR.CODIGO_NUMERO AS "codigoNumero",
		   PAR.VALOR_TEXTO AS "valorTexto",
		   PAR.VALOR_NUMERO AS "valorNumero",
		   PAR.VALOR_FECHA AS "valorFecha",
		   PAR.DESCRIPCION AS "descripcion",
		   PAR.ESTADO_REGISTRO AS "estadoRegistro",
		   PAR.USUARIO_CREACION AS "usuarioCreacion",
		   PAR.FECHA_CREACION AS "fechaCreacion",
		   PAR.USUARIO_MODIFICACION AS "usuarioModificacion",
		   PAR.FECHA_MODIFICACION AS "fechaModificacion"	   
      FROM SCH_MAESTRA.TBL_PARAMETRO PAR
     WHERE PAR.TIPO_PARAMETRO = V_TIPO_PARAMETRO
	   AND PAR.ESTADO_REGISTRO = V_ESTADO_REGISTRO
       AND PAR.CODIGO_NUMERO IN (V_CODIGO_NUMERO)
     ORDER BY PAR.ORDEN; 

    EXCEPTION
 WHEN OTHERS THEN
   VL_NRO_ERROR := SQLCODE;
   VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
   raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_OBTENER_PARAMETROS>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_OBTENER_PARAMETROS;

PROCEDURE SP_SEL_GESTION_ORGANIGRAMAS (V_ENTIDAD_ID       IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE
                                      ,V_TIPO_ORGANO_ID   IN SCH_ENTIDAD.TBL_ORGANIGRAMA.TIPO_ORGANO_UO_ID%TYPE
                                      ,V_UO_SUPERIOR_ID   IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PADRE_ORGANIGRAMA_ID%TYPE
                                      ,V_UO_ID            IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE
                                      ,CUR_TEST          OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
    OPEN CUR_TEST FOR
        SELECT
            ORG.ORGANIGRAMA_ID AS "organigramaId", 
            ORG.NATURALEZA_ORGANO AS "tipoOrganoId",
            ORG.PADRE_ORGANIGRAMA_ID AS "uoSuperiorId",
            NAT.DESCRIPCION AS "tipoOrgano",
            ORG.DESCRIPCION AS "nombreUO",
            ORG.SIGLA AS "siglaUO",
            (SELECT PAD.SIGLA 
               FROM SCH_ENTIDAD.TBL_ORGANIGRAMA PAD
              WHERE PAD.ESTADO_REGISTRO = '1'
                AND PAD.ORGANIGRAMA_ID = ORG.PADRE_ORGANIGRAMA_ID) AS "siglaUOSup"
          FROM SCH_ENTIDAD.TBL_ORGANIGRAMA ORG
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO NAT ON NAT.PARAMETRO_ID = ORG.NATURALEZA_ORGANO
         WHERE (ORG.ENTIDAD_ID = V_ENTIDAD_ID OR V_ENTIDAD_ID IS NULL)
           AND (ORG.NATURALEZA_ORGANO = V_TIPO_ORGANO_ID OR V_TIPO_ORGANO_ID IS NULL)
           AND (ORG.ORGANIGRAMA_ID IN ( SELECT ORN.ORGANIGRAMA_ID 
                                          FROM TBL_ORGANIGRAMA ORN
                                         WHERE ORN.ENTIDAD_ID = V_ENTIDAD_ID 
                                           AND ORN.ESTADO_REGISTRO = '1' 
                                           AND (ORN.PADRE_ORGANIGRAMA_ID = V_UO_SUPERIOR_ID OR ORN.ORGANIGRAMA_ID = V_UO_SUPERIOR_ID) 
                                      ) 
				  OR V_UO_SUPERIOR_ID IS NULL)
           AND (ORG.ORGANIGRAMA_ID = V_UO_ID OR V_UO_ID IS NULL)
           AND ORG.ESTADO_REGISTRO = '1'
         ORDER BY NAT.DESCRIPCION;

        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_SEL_GESTION_ORGANIGRAMAS>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_SEL_GESTION_ORGANIGRAMAS;

PROCEDURE SP_VALIDA_ORGANIGRAMA (V_ENTIDAD_ID       IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ENTIDAD_ID%TYPE
                                ,V_DESCRIPCION      IN SCH_ENTIDAD.TBL_ORGANIGRAMA.DESCRIPCION%TYPE
                                ,V_SIGLA            IN SCH_ENTIDAD.TBL_ORGANIGRAMA.SIGLA%TYPE
                                ,V_ORGANIGRAMA_ID   IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE
                                ,CUR_TEST          OUT cursor_test)
IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT ORG.ORGANIGRAMA_ID AS "organigramaId",
               ORG.DESCRIPCION AS "descripcion",
               ORG.SIGLA AS "sigla"
          FROM SCH_ENTIDAD.TBL_ORGANIGRAMA ORG
         WHERE 1 = 1
           AND ORG.ENTIDAD_ID = V_ENTIDAD_ID
           AND (UPPER(ORG.DESCRIPCION) = UPPER(V_DESCRIPCION) OR V_DESCRIPCION IS NULL)
           AND (UPPER(ORG.SIGLA) = UPPER(V_SIGLA) OR V_SIGLA IS NULL)
           AND (UPPER(ORG.ORGANIGRAMA_ID) <> UPPER(V_ORGANIGRAMA_ID) OR V_ORGANIGRAMA_ID IS NULL)
           AND ORG.ESTADO_REGISTRO = '1';

    EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
        VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
        raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_VALIDA_ORGANIGRAMA>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_VALIDA_ORGANIGRAMA;

PROCEDURE SP_FILTRAR_PUESTOS (V_ENTIDAD_ID       IN SCH_ENTIDAD.TBL_PUESTO.ENTIDAD_ID%TYPE
                             ,V_DESCRIPCION      IN SCH_ENTIDAD.TBL_PUESTO.DESCRIPCION%TYPE
                             ,V_ORGANIGRAMA_ID      IN SCH_ENTIDAD.TBL_PUESTO.ORGANIGRAMA_ID%TYPE
                             ,CUR_TEST          OUT cursor_test)
 IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT PUE.PUESTO_ID AS "id",
               PUE.DESCRIPCION AS "descripcion"
        FROM SCH_ENTIDAD.TBL_PUESTO PUE 
        WHERE PUE.ESTADO_REGISTRO = '1'
        AND PUE.ENTIDAD_ID = V_ENTIDAD_ID
        AND (1=1 AND (PUE.ORGANIGRAMA_ID = V_ORGANIGRAMA_ID OR V_ORGANIGRAMA_ID IS NULL))    
        AND (UPPER(PUE.DESCRIPCION) LIKE '%'||UPPER(V_DESCRIPCION)||'%' OR V_DESCRIPCION IS NULL)
        ORDER BY PUE.DESCRIPCION;

    EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
        VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
        raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_FILTRAR_PUESTOS>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_FILTRAR_PUESTOS;

PROCEDURE SP_ALTA_SERVIDORES_CIVILES (V_ENTIDAD_ID               IN SCH_ENTIDAD.TBL_PUESTO.ENTIDAD_ID%TYPE
                                     ,V_ORGANIGRAMA_ID           IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE
									 ,V_PERSONA_ID               IN SCH_ENTIDAD.TBL_DETALLE_UO.PERSONA_ID%TYPE
									 ,V_REGIMEN_LABORAL_ID       IN SCH_ENTIDAD.TBL_EMPLEADO.REGIMEN_LABORAL_ID%TYPE
									 ,V_SINDICATO_FLAG           IN SCH_ENTIDAD.TBL_EMPLEADO.SINDICATO_FLAG%TYPE
									 ,V_FECHA_INICIO             IN SCH_ENTIDAD.TBL_DETALLE_UO.PUESTO_FECHA_INICIO%TYPE									 
                                     ,V_CORREO_INSTITUCIONAL     IN SCH_PERSONA.TBL_CORREO.CORREO%TYPE
									 ,V_ES_RESPONSABLE			 IN SCH_ENTIDAD.TBL_DETALLE_UO.ES_RESPONSABLE%TYPE
									 ,V_EXCLUYE 			     IN SCH_ENTIDAD.TBL_DETALLE_UO.EXCLUYE%TYPE
									 ,V_DESCRIPCION              IN SCH_ENTIDAD.TBL_PUESTO.DESCRIPCION%TYPE
                                     ,V_ESTADO_REGISTRO          IN SCH_ENTIDAD.TBL_PUESTO.ESTADO_REGISTRO%TYPE
                                     ,V_USUARIO_CREACION         IN SCH_ENTIDAD.TBL_PUESTO.USUARIO_CREACION%TYPE
                                     ,V_FECHA_CREACION           IN SCH_ENTIDAD.TBL_PUESTO.FECHA_CREACION%TYPE
                                     ,V_TIPO_ASIGNACION          IN SCH_ENTIDAD.TBL_DETALLE_UO.TIPO_ASIGNACION%TYPE
                                     ,V_PUESTO_ID                IN SCH_ENTIDAD.TBL_PUESTO.PUESTO_ID%TYPE
                                     ,CUR_TEST                  OUT cursor_test)
IS
    EXCEP_EMPL_ACT_PUESTO EXCEPTION;
    VL_NRO_ERROR   			NUMBER;
    VL_DES_ERROR   			VARCHAR(3000);
    --V_PUESTO_ID    			SCH_ENTIDAD.TBL_PUESTO.PUESTO_ID%TYPE;
	V_PERSONA_ID_EXISTE		NUMBER;

    NRO_PUESTOS   NUMBER := 0;
    NRO_PER_MAIL NUMBER :=0;
    V_PERSONA_CORREO NUMBER := 0;
    V_EMPLEADO_ACTIVO_PUESTO NUMBER := 0;
    V_TIPO_CORREO NUMBER:=0;


    BEGIN

        --1. Validar existencia de la Descripcion del Puesto por Entidad y por Estado en la tabla puesto
        --   * En caso no exista => se debe registrar el Puesto y se tiene un nuevo PuestoId
        --   * En caso exista    => obtenemos el PuestoId
       /*SELECT COUNT(PUE.PUESTO_ID)
          INTO NRO_PUESTOS
          FROM SCH_ENTIDAD.TBL_PUESTO PUE
         WHERE PUE.ENTIDAD_ID = V_ENTIDAD_ID
           AND UPPER(PUE.DESCRIPCION) = UPPER(V_DESCRIPCION)
           AND PUE.ESTADO_REGISTRO = V_ESTADO_REGISTRO;*/

        /*IF NRO_PUESTOS = 0 THEN
            V_PUESTO_ID := SCH_ENTIDAD.SEQ_PUESTO_ID.NEXTVAL;
            INSERT INTO SCH_ENTIDAD.TBL_PUESTO (
                PUESTO_ID,
                ENTIDAD_ID,
                DESCRIPCION,
                ESTADO_REGISTRO,
                USUARIO_CREACION,
                FECHA_CREACION
            )VALUES (
                V_PUESTO_ID,
                V_ENTIDAD_ID,
                V_DESCRIPCION,
                V_ESTADO_REGISTRO,
                V_USUARIO_CREACION,
                V_FECHA_CREACION);

        ELSIF NRO_PUESTOS = 1 THEN

            SELECT PUE.PUESTO_ID
              INTO V_PUESTO_ID
            FROM SCH_ENTIDAD.TBL_PUESTO PUE
            WHERE PUE.ENTIDAD_ID = V_ENTIDAD_ID
                AND UPPER(PUE.DESCRIPCION) = UPPER(V_DESCRIPCION)
                AND PUE.ESTADO_REGISTRO = V_ESTADO_REGISTRO;

        END IF;*/

        --DBMS_OUTPUT.PUT_LINE('PUESTO ID -> '||V_PUESTO_ID);

        SELECT COUNT(TD.DET_UO_ID) 
            INTO V_EMPLEADO_ACTIVO_PUESTO
        FROM SCH_ENTIDAD.TBL_DETALLE_UO TD
        WHERE TD.ESTADO_REGISTRO = 1
            AND TD.ENTIDAD_ID = V_ENTIDAD_ID
            AND TD.PERSONA_ID = V_PERSONA_ID
            AND TD.PUESTO_ID = V_PUESTO_ID;

        IF V_EMPLEADO_ACTIVO_PUESTO > 0  THEN            
            RAISE EXCEP_EMPL_ACT_PUESTO;        
        END IF;

        --2. Registrar en la tabla empleado
        INSERT INTO SCH_ENTIDAD.TBL_EMPLEADO(
            EMPLEADO_ID,
            ENTIDAD_ID,
            PERSONA_ID,
            REGIMEN_LABORAL_ID,
            PUESTO_ID,
            SINDICATO_FLAG,            
            ESTADO_REGISTRO,
            USUARIO_CREACION,
            FECHA_CREACION
        )VALUES(
            SCH_ENTIDAD.SEQ_EMPLEADO_ID.NEXTVAL,
            V_ENTIDAD_ID,
            V_PERSONA_ID,
            V_REGIMEN_LABORAL_ID,
            V_PUESTO_ID,
            V_SINDICATO_FLAG,
			V_ESTADO_REGISTRO,
            V_USUARIO_CREACION,
            V_FECHA_CREACION);

        --3. Registrar en tabla detalle_UO. Opcional campo segemento
        INSERT INTO SCH_ENTIDAD.TBL_DETALLE_UO(
            DET_UO_ID,
            ORGANIGRAMA_ID,
            ENTIDAD_ID,
            PERSONA_ID,
            PUESTO_ID,
            ES_RESPONSABLE,
            EXCLUYE,
            ESTADO_REGISTRO,
            USUARIO_CREACION,
            FECHA_CREACION,
            PUESTO_FECHA_INICIO,
            TIPO_ASIGNACION,
            ESTADO_SRV_CIV_GDR_ID
        )VALUES(
            SEQ_DET_UO_ID.NEXTVAL,
            V_ORGANIGRAMA_ID,
            V_ENTIDAD_ID,
            V_PERSONA_ID,
            V_PUESTO_ID,
            V_ES_RESPONSABLE,
            V_EXCLUYE,
            V_ESTADO_REGISTRO,
            V_USUARIO_CREACION,
            V_FECHA_CREACION,
            V_FECHA_INICIO,
            V_TIPO_ASIGNACION,
            4);

      --DBMS_OUTPUT.PUT_LINE('V_ESTADO_REGISTRO  -> '||V_ESTADO_REGISTRO);

		--4. Actualizar el Responsable del UO en la tabla Organigrama.
        IF V_ES_RESPONSABLE = 'S' THEN
			UPDATE SCH_ENTIDAD.TBL_ORGANIGRAMA 
			   SET PERSONA_RESPONSABLE_ID = V_PERSONA_ID,
				   USUARIO_MODIFICACION   = V_USUARIO_CREACION,
				   FECHA_MODIFICACION     = V_FECHA_CREACION
			 WHERE ENTIDAD_ID             = V_ENTIDAD_ID
			   AND ORGANIGRAMA_ID         = V_ORGANIGRAMA_ID
			   AND ESTADO_REGISTRO        = V_ESTADO_REGISTRO;
		END IF;


		--5 REGISTRAR CORREO 


		   SELECT COUNT(COR.PERSONA_ID) INTO V_PERSONA_CORREO
            FROM SCH_PERSONA.TBL_CORREO COR
			 WHERE COR.PERSONA_ID      = V_PERSONA_ID
			   AND COR.TIPO_CORREO = 'PRINC';

	IF V_PERSONA_CORREO != 0 THEN

		  UPDATE SCH_PERSONA.TBL_CORREO
                       SET CORREO               = V_CORREO_INSTITUCIONAL,
                           USUARIO_MODIFICACION = V_USUARIO_CREACION,
                           FECHA_MODIFICACION   = V_FECHA_CREACION
                     WHERE PERSONA_ID           = V_PERSONA_ID                      
                       AND TIPO_CORREO          = 'PRINC';
    END IF;

     SELECT COUNT(COR.PERSONA_ID) INTO V_TIPO_CORREO
            FROM SCH_PERSONA.TBL_CORREO COR
			 WHERE COR.PERSONA_ID      = V_PERSONA_ID
			   AND COR.TIPO_CORREO IS NULL;

    IF V_TIPO_CORREO != 0 THEN

		  UPDATE SCH_PERSONA.TBL_CORREO
                       SET TIPO_CORREO          = 'PRINC'                           
                     WHERE PERSONA_ID           = V_PERSONA_ID                      
                       AND TIPO_CORREO   IS NULL;
    END IF;



		COMMIT; 

        OPEN CUR_TEST FOR
        SELECT 1 AS "codigo",
               'Alta de servidores civiles registrada satisfactoriamente!' AS "mensaje"
          FROM DUAL;


    EXCEPTION

        WHEN EXCEP_EMPL_ACT_PUESTO THEN 
            OPEN CUR_TEST FOR
            SELECT 0 AS "codigo",
               'Ya existe un empleado activo con el mismo documento en ese puesto.' AS "mensaje"
            FROM DUAL;
            ROLLBACK;
        WHEN OTHERS THEN
            VL_NRO_ERROR := SQLCODE;
            VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);

            OPEN CUR_TEST FOR
            SELECT 0 AS "codigo",
                   'Error en el alta de servidores civiles!' AS "mensaje"
              FROM DUAL;

            ROLLBACK;
		--raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_ALTA_SERVIDORES_CIVILES>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_ALTA_SERVIDORES_CIVILES;


FUNCTION FN_SINCRONIZAR_SECUENCIAS ( V_TABLE_NAME IN VARCHAR2 )
   RETURN NUMBER
IS
    VL_NRO_ERROR    NUMBER;
    VL_DES_ERROR    VARCHAR(3000);
    V_RETURN        NUMBER;
    V_MAX           NUMBER;
    V_EXIST         NUMBER;

BEGIN

    IF V_TABLE_NAME = 'TBL_PUESTO' THEN
        SELECT (NVL (MAX(PUESTO_ID), 0) + 1) 
          INTO V_MAX 
          FROM SCH_ENTIDAD.TBL_PUESTO;

        SELECT COUNT(*)
          INTO V_EXIST 
          FROM user_sequences 
         WHERE sequence_name = 'SEQ_PUESTO_ID';

        IF V_MAX > 0 AND V_EXIST = 1 THEN 
            EXECUTE IMMEDIATE
                'DROP SEQUENCE SCH_ENTIDAD.SEQ_PUESTO_ID';
        END IF;

        EXECUTE IMMEDIATE 
            'CREATE SEQUENCE SCH_ENTIDAD.SEQ_PUESTO_ID MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH ' 
            || V_MAX || ' CACHE 20 NOORDER NOCYCLE NOKEEP NOSCALE GLOBAL';

        V_RETURN := 1;
    ELSE 
        IF V_TABLE_NAME = 'TBL_EMPLEADO' THEN
            SELECT (NVL (MAX(EMPLEADO_ID), 0) + 1) 
              INTO V_MAX 
              FROM SCH_ENTIDAD.TBL_EMPLEADO;

            SELECT COUNT(*)
              INTO V_EXIST 
              FROM user_sequences 
             WHERE sequence_name = 'SEQ_EMPLEADO_ID';

            IF V_MAX > 0 AND V_EXIST = 1 THEN 
                EXECUTE IMMEDIATE
                    'DROP SEQUENCE SCH_ENTIDAD.SEQ_EMPLEADO_ID';
            END IF;

            EXECUTE IMMEDIATE 
                'CREATE SEQUENCE SCH_ENTIDAD.SEQ_EMPLEADO_ID MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH ' 
                || V_MAX || ' CACHE 20 NOORDER NOCYCLE NOKEEP NOSCALE GLOBAL';

            V_RETURN := 1;
        ELSE 
            IF V_TABLE_NAME = 'TBL_DETALLE_UO' THEN
                SELECT (NVL (MAX(DET_UO_ID), 0) + 1) 
                  INTO V_MAX 
                  FROM SCH_ENTIDAD.TBL_DETALLE_UO;

                SELECT COUNT(*)
                  INTO V_EXIST 
                  FROM user_sequences 
                 WHERE sequence_name = 'SEQ_DET_UO_ID';

                IF V_MAX > 0 AND V_EXIST = 1 THEN 
                    EXECUTE IMMEDIATE
                        'DROP SEQUENCE SCH_ENTIDAD.SEQ_DET_UO_ID';
                END IF;

                EXECUTE IMMEDIATE 
                    'CREATE SEQUENCE SCH_ENTIDAD.SEQ_DET_UO_ID MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH ' 
                    || V_MAX || ' CACHE 20 NOORDER NOCYCLE NOKEEP NOSCALE GLOBAL';
                V_RETURN := 1;
            ELSE 
                V_RETURN := 0;
            END IF;
        END IF;
    END IF;

    COMMIT;

    RETURN V_RETURN;

EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    VL_NRO_ERROR := SQLCODE;
    VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
    raise_application_error(-20000, 'ERROR: AL EJECUTAR LA FUNCION <<FN_SINCRONIZAR_SECUENCIAS>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END FN_SINCRONIZAR_SECUENCIAS;

PROCEDURE SP_OBTENER_DATOS_PERSONALES_SERVIDOR_CIVIL (V_ENTIDAD_ID       IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                     ,V_DET_UO_ID        IN SCH_ENTIDAD.TBL_DETALLE_UO.DET_UO_ID%TYPE
                                                     ,V_PERSONA_ID       IN SCH_ENTIDAD.TBL_DETALLE_UO.PERSONA_ID%TYPE
                                                     ,V_REGIMEN_ID       IN SCH_MAESTRA.TBL_PARAMETRO.CODIGO_NUMERO%TYPE
                                                     ,CUR_TEST          OUT cursor_test)
IS
    VL_NRO_ERROR   NUMBER;
    VL_DES_ERROR   VARCHAR(3000);
    BEGIN

         OPEN CUR_TEST FOR
         -- DATOS PERSONALES
         SELECT 
            DET.DET_UO_ID AS "detalleuoId", 
            DET.PERSONA_ID AS "personaId",
            PNA.APELLIDO_PATERNO AS "apellidoPaterno",
            PNA.APELLIDO_MATERNO AS "apellidoMaterno",
            PNA.NOMBRES AS "nombres",
            TDO.VALOR_TEXTO AS "tipoDocumento",
            DOC.NUMERO_DOCUMENTO AS "numeroDocumento",
            (SELECT TEL.NUMERO_TELEFONO FROM SCH_PERSONA.TBL_TELEFONO TEL WHERE TEL.TIPO_TELEFONO = 'CEL' AND TEL.PERSONA_ID = PNA.PERSONA_ID AND ROWNUM = 1) AS "telefono",
            PNA.SEXO AS "genero",
            PNA.FECHA_NACIMIENTO AS "fechaNacimiento",
            (SELECT CIN.CORREO FROM SCH_PERSONA.TBL_CORREO CIN WHERE CIN.PERSONA_ID = DET.PERSONA_ID AND CIN.TIPO_CORREO = 'PRINC' AND ROWNUM = 1) AS "correoInstitucional",
            (SELECT CAL.CORREO FROM SCH_PERSONA.TBL_CORREO CAL WHERE CAL.PERSONA_ID = DET.PERSONA_ID AND CAL.TIPO_CORREO = 'ALTER' AND ROWNUM = 1) AS "correoAlternativo", 
            RLA.CODIGO_NUMERO AS "regimenId",
            RLA.VALOR_TEXTO AS "regimenLaboral",
            EMP.SINDICATO_FLAG AS "sindicato",
            DET.ORGANIGRAMA_ID as "uoId",
            EMP.URL_FOTO AS "urlFoto"
           FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
          INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO EMP ON EMP.PERSONA_ID = DET.PERSONA_ID
          INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PNA ON PNA.PERSONA_ID = DET.PERSONA_ID
          INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOC ON DOC.PERSONA_ID = PNA.PERSONA_ID
          INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TDO ON TDO.CODIGO_NUMERO = DOC.TIPO_DOCUMENTO AND TDO.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO' 
        INNER JOIN SCH_MAESTRA.TBL_PARAMETRO RLA ON RLA.CODIGO_NUMERO = EMP.REGIMEN_LABORAL_ID AND RLA.TIPO_PARAMETRO = 'TIPO_REGIMEN_LABORAL'
          WHERE EMP.ENTIDAD_ID       = DET.ENTIDAD_ID
            AND EMP.PERSONA_ID       = DET.PERSONA_ID 
            AND DET.ENTIDAD_ID       = V_ENTIDAD_ID
            AND (DET.DET_UO_ID       = V_DET_UO_ID OR V_DET_UO_ID IS NULL)
            AND (DET.PERSONA_ID      = V_PERSONA_ID OR V_PERSONA_ID IS NULL)
            AND (RLA.CODIGO_NUMERO   = V_REGIMEN_ID OR V_REGIMEN_ID IS NULL)
            AND EMP.ESTADO_REGISTRO  = '1'
            AND DET.ESTADO_REGISTRO  = '1'
            AND ROWNUM = 1
          ORDER BY DET.PERSONA_ID, DET.DET_UO_ID;

    EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
        VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
		raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_OBTENER_DATOS_PERSONALES_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_OBTENER_DATOS_PERSONALES_SERVIDOR_CIVIL;    

    PROCEDURE SP_OBTENER_PUESTO_UO_SERVIDOR_CIVIL (V_ENTIDAD_ID       IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                  ,V_UO_ID            IN SCH_ENTIDAD.TBL_DETALLE_UO.ORGANIGRAMA_ID%TYPE
                                                  ,V_PERSONA_ID       IN SCH_ENTIDAD.TBL_DETALLE_UO.PERSONA_ID%TYPE
                                                  ,CUR_TEST          OUT cursor_test)                                                     
    IS
        VL_NRO_ERROR   NUMBER;
        VL_DES_ERROR   VARCHAR(3000);
    BEGIN

         OPEN CUR_TEST FOR
         SELECT 
            ROWNUM AS "correlativo",
            DET.DET_UO_ID AS "detalleuoId", 
            ORG.SIGLA AS "siglaUO",
            ORG.DESCRIPCION AS "descripcionUO",
            DET.PUESTO_ID AS "puestoId",
            PUE.DESCRIPCION AS "descripcionPuesto",
            TAS.CODIGO_NUMERO AS "tipoAsignacion",
            CASE WHEN TAS.CODIGO_NUMERO = 1 THEN  TAS.VALOR_TEXTO ELSE  TAS.VALOR_TEXTO||' ('|| MOT.VALOR_TEXTO ||')' END   AS "descTipoAsignacion",
            DET.PUESTO_FECHA_INICIO AS "fechaInicio",
            DET.PUESTO_FECHA_CESE AS "fechaCese",
            'SEGMENTO' AS "segmento",
            'ROL' AS "rol",
             CIV.VALOR_TEXTO AS "estado",
            DET.ORGANIGRAMA_ID AS "uoId",
            MOT.VALOR_TEXTO AS "motivoEncargatura",
            DETE.MOTIVO_ID AS "motivoId",
            DET.ESTADO_REGISTRO AS "estadoRegistro",
            NVL((SELECT DET2.DET_UO_ID FROM SCH_ENTIDAD.TBL_DETALLE_UO DET2 
                    WHERE DET2.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID AND
                    DET2.PERSONA_ID = DET.PERSONA_EVALUADOR_ID AND 
                    DET2.ENTIDAD_ID = DET.ENTIDAD_ID AND
                    DET2.ESTADO_REGISTRO <> '0' AND ROWNUM = 1),0)  AS "detUnidadOrganicaEvaluadorId"
           FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
           INNER JOIN SCH_MAESTRA.TBL_PARAMETRO CIV ON CIV.CODIGO_NUMERO = DET.ESTADO_REGISTRO AND CIV.TIPO_PARAMETRO = 'ESTADO_SERVIDOR_CIVIL'
          INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA ORG ON ORG.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID 
          INNER JOIN SCH_ENTIDAD.TBL_PUESTO PUE ON PUE.PUESTO_ID = DET.PUESTO_ID
          INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TAS ON TAS.CODIGO_NUMERO = DET.TIPO_ASIGNACION AND TAS.TIPO_PARAMETRO = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
          LEFT JOIN SCH_ENTIDAD.TBL_DETALLE_ENCARGATURA DETE ON DETE.DET_UO_ID = DET.DET_UO_ID AND DETE.ENTIDAD_ID = DET.ENTIDAD_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO MOT ON MOT.CODIGO_NUMERO = DETE.MOTIVO_ID AND MOT.TIPO_PARAMETRO = 'MOTIVO_ENCARGATURA'
          WHERE DET.ENTIDAD_ID       = V_ENTIDAD_ID
            AND (DET.ORGANIGRAMA_ID  = V_UO_ID OR V_UO_ID IS NULL)
            AND DET.PERSONA_ID       = V_PERSONA_ID
            AND DET.ESTADO_REGISTRO <> '0';

    EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
        VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
		raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_OBTENER_PUESTO_UO_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_OBTENER_PUESTO_UO_SERVIDOR_CIVIL; 

PROCEDURE SP_BUSCAR_PERSONAS_PUESTO_UO_SERVIDOR_CIVIL (V_ENTIDAD_ID       IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                      ,V_UO_ID            IN SCH_ENTIDAD.TBL_DETALLE_UO.ORGANIGRAMA_ID%TYPE
                                                      ,V_PUESTO_ID           IN SCH_ENTIDAD.TBL_PUESTO.PUESTO_ID%TYPE
                                                      ,CUR_TEST          OUT cursor_test)
    IS
        VL_NRO_ERROR   NUMBER;
        VL_DES_ERROR   VARCHAR(3000);
    BEGIN

         OPEN CUR_TEST FOR
         SELECT DET.DET_UO_ID AS "detalleuoId", 
                DET.PERSONA_ID AS "personaId", 
                PNA.APELLIDO_PATERNO AS "apellidoPaterno", 
                PNA.APELLIDO_MATERNO AS "apellidoMaterno", 
                PNA.NOMBRES AS "nombres",
                DET.PUESTO_FECHA_CESE AS "puestoFechaCese"
           FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
          INNER JOIN SCH_ENTIDAD.TBL_PUESTO PUE ON PUE.PUESTO_ID = DET.PUESTO_ID
          INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PNA ON PNA.PERSONA_ID = DET.PERSONA_ID
          WHERE DET.ENTIDAD_ID      = V_ENTIDAD_ID
            AND DET.ORGANIGRAMA_ID  = V_UO_ID 
            AND DET.ESTADO_REGISTRO <> '0'
            AND PUE.PUESTO_ID = V_PUESTO_ID
            AND ROWNUM = 1
            ORDER BY DET.PUESTO_FECHA_INICIO DESC;

    EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
        VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
		raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PERSONAS_PUESTO_UO_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PERSONAS_PUESTO_UO_SERVIDOR_CIVIL; 

PROCEDURE SP_BUSCAR_PARTICIPANTES_SERVIDOR_CIVIL (V_ENTIDAD_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                 ,V_TIPO_ORGANO             IN SCH_ENTIDAD.TBL_ORGANIGRAMA.TIPO_ORGANO_UO_ID%TYPE
                                                 ,V_UO_SUPERIOR             IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PADRE_ORGANIGRAMA_ID%TYPE
                                                 ,V_UO                      IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE
                                                 ,V_REGIMEN_LABORAL         IN SCH_ENTIDAD.TBL_EMPLEADO.REGIMEN_LABORAL_ID%TYPE
                                                 ,V_TIPO_DOCUMENTO          IN SCH_PERSONA.TBL_DOCUMENTO.TIPO_DOCUMENTO%TYPE
                                                 ,V_APE_PAT_MAT_NOM         IN VARCHAR2
                                                 ,V_NUMERO_DOCUMENTO        IN SCH_PERSONA.TBL_DOCUMENTO.NUMERO_DOCUMENTO%TYPE
                                                 ,V_ESTADO_ID               IN SCH_ENTIDAD.TBL_DETALLE_UO.ESTADO_REGISTRO%TYPE
                                                 ,V_ESTADO_SERVCIVIL_GDR    IN SCH_ENTIDAD.TBL_DETALLE_UO.ESTADO_SRV_CIV_GDR_ID%TYPE
                                                 ,CUR_TEST                  OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT
            DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.PERSONA_ID AS "personaId",
            PTD.TIPO_DOCUMENTO AS "documentoIdentidad", 
            PTD.NUMERO_DOCUMENTO AS "numeroDocumento",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.ORGANIGRAMA_ID AS "unidadOrganicaId",
            ETP.Es_Jefe AS "esJefeUo",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            DET.ESTADO_SRV_CIV_GDR_ID AS "estadoSerCivGdrId",
            EOR.SIGLA AS "siglaUO", 
            EST.VALOR_TEXTO AS "estado",
            DET.INDICADOR_META AS "indicadorMeta",
            ASIG.VALOR_TEXTO AS "tipoAsignacion"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO ASIG ON ASIG.CODIGO_NUMERO = DET.TIPO_ASIGNACION AND ASIG.TIPO_PARAMETRO = 'TIPO_ASIGNACION_SERVIDOR_CIVIL' 
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = DET.PERSONA_ID AND ETE.ENTIDAD_ID = DET.ENTIDAD_ID             
         INNER JOIN SCH_PERSONA.TBL_DOCUMENTO PTD ON PTD.DOCUMENTO_ID = PTP.DOCUMENTO_ID
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TDO ON TDO.CODIGO_NUMERO = PTD.TIPO_DOCUMENTO AND TDO.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO'
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA EOR ON EOR.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID AND EOR.ENTIDAD_ID = DET.ENTIDAD_ID 
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID 
         LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO EST ON EST.CODIGO_NUMERO = DET.ESTADO_SRV_CIV_GDR_ID AND EST.TIPO_PARAMETRO = 'ESTADO_SERVIDOR_CIVIL_GDR'
         LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE ETE.ESTADO_REGISTRO != '0' AND DET.ESTADO_REGISTRO = '1'
           AND (DET.ENTIDAD_ID = V_ENTIDAD_ID OR V_ENTIDAD_ID IS NULL) 
		AND (V_UO IS NOT NULL AND EOR.ORGANIGRAMA_ID IN ( SELECT ORN.ORGANIGRAMA_ID 
                                                FROM TBL_ORGANIGRAMA ORN
                                               WHERE ORN.ENTIDAD_ID = V_ENTIDAD_ID 
                                                 AND ORN.ESTADO_REGISTRO = '1' 
                                                 AND ( ORN.ORGANIGRAMA_ID = V_UO ) 
                                            )
                                            
                                            OR V_UO IS NULL) 
		 AND (V_UO_SUPERIOR IS NOT NULL AND EOR.ORGANIGRAMA_ID IN ( SELECT ORN.ORGANIGRAMA_ID 
                                                FROM TBL_ORGANIGRAMA ORN
                                               WHERE ORN.ENTIDAD_ID = V_ENTIDAD_ID 
                                                 AND ORN.ESTADO_REGISTRO = '1' 
                                                 AND (ORN.PADRE_ORGANIGRAMA_ID = V_UO_SUPERIOR) 
                                            ) 
		     OR V_UO_SUPERIOR IS NULL) 	  
		  AND ( (EOR.ORGANIGRAMA_ID IN ( SELECT ORN.ORGANIGRAMA_ID  FROM TBL_ORGANIGRAMA ORN
             WHERE ORN.ENTIDAD_ID = V_ENTIDAD_ID AND ORN.ESTADO_REGISTRO = '1' AND ORN.NATURALEZA_ORGANO  = V_TIPO_ORGANO)
             OR V_TIPO_ORGANO IS NULL))  
           AND (ETE.REGIMEN_LABORAL_ID   = V_REGIMEN_LABORAL OR V_REGIMEN_LABORAL IS NULL) 
           AND ((PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES) LIKE '%'||V_APE_PAT_MAT_NOM||'%' OR V_APE_PAT_MAT_NOM IS NULL) 
           AND (PTD.TIPO_DOCUMENTO       = V_TIPO_DOCUMENTO OR V_TIPO_DOCUMENTO IS NULL) 
            AND (DET.ESTADO_REGISTRO  = V_ESTADO_ID OR (V_ESTADO_ID IS NULL AND DET.ESTADO_REGISTRO != '2'))
            AND (DET.ESTADO_SRV_CIV_GDR_ID = V_ESTADO_SERVCIVIL_GDR OR V_ESTADO_SERVCIVIL_GDR IS NULL)
              AND ETE.PUESTO_ID = DET.PUESTO_ID 
         ORDER BY PPN.APELLIDO_PATERNO;


        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PARTICIPANTES_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PARTICIPANTES_SERVIDOR_CIVIL;

   PROCEDURE SP_BUSCAR_PARTICIPANTES_SERVIDOR_CIVIL_NOACTIVOS (V_ENTIDAD_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                 ,V_TIPO_ORGANO             IN SCH_ENTIDAD.TBL_ORGANIGRAMA.TIPO_ORGANO_UO_ID%TYPE
                                                 ,V_UO_SUPERIOR             IN SCH_ENTIDAD.TBL_ORGANIGRAMA.PADRE_ORGANIGRAMA_ID%TYPE
                                                 ,V_UO                      IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE
                                                 ,V_REGIMEN_LABORAL         IN SCH_ENTIDAD.TBL_EMPLEADO.REGIMEN_LABORAL_ID%TYPE
                                                 ,V_TIPO_DOCUMENTO          IN SCH_PERSONA.TBL_DOCUMENTO.TIPO_DOCUMENTO%TYPE
                                                 ,V_APE_PAT_MAT_NOM         IN VARCHAR2
                                                 ,V_NUMERO_DOCUMENTO        IN SCH_PERSONA.TBL_DOCUMENTO.NUMERO_DOCUMENTO%TYPE
                                                 ,V_ESTADO_ID               IN SCH_ENTIDAD.TBL_DETALLE_UO.ESTADO_REGISTRO%TYPE
                                                 ,V_ESTADO_SERVCIVIL_GDR    IN SCH_ENTIDAD.TBL_DETALLE_UO.ESTADO_SRV_CIV_GDR_ID%TYPE
                                                 ,CUR_TEST                  OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT
            DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.PERSONA_ID AS "personaId",
            PTD.TIPO_DOCUMENTO AS "documentoIdentidad", 
            PTD.NUMERO_DOCUMENTO AS "numeroDocumento",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.ORGANIGRAMA_ID AS "unidadOrganicaId",
            ETP.Es_Jefe AS "esJefeUo",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            DET.ESTADO_SRV_CIV_GDR_ID AS "estadoSerCivGdrId",
            EOR.SIGLA AS "siglaUO", 
            EST.VALOR_TEXTO AS "estado",
            DET.INDICADOR_META AS "indicadorMeta",
            ASIG.VALOR_TEXTO AS "tipoAsignacion"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO ASIG ON ASIG.CODIGO_NUMERO = DET.TIPO_ASIGNACION AND ASIG.TIPO_PARAMETRO = 'TIPO_ASIGNACION_SERVIDOR_CIVIL' 
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = DET.PERSONA_ID AND ETE.ENTIDAD_ID = DET.ENTIDAD_ID             
         INNER JOIN SCH_PERSONA.TBL_DOCUMENTO PTD ON PTD.DOCUMENTO_ID = PTP.DOCUMENTO_ID
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TDO ON TDO.CODIGO_NUMERO = PTD.TIPO_DOCUMENTO AND TDO.TIPO_PARAMETRO = 'PER_TIPO_DOCUMENTO'
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA EOR ON EOR.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID AND EOR.ENTIDAD_ID = DET.ENTIDAD_ID 
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID 
         LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO EST ON EST.CODIGO_NUMERO = DET.ESTADO_SRV_CIV_GDR_ID AND EST.TIPO_PARAMETRO = 'ESTADO_SERVIDOR_CIVIL_GDR'
         LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE ETE.ESTADO_REGISTRO = '0' AND DET.ESTADO_REGISTRO = '0'
           AND (DET.ENTIDAD_ID = V_ENTIDAD_ID OR V_ENTIDAD_ID IS NULL) 
          AND (V_UO IS NOT NULL AND EOR.ORGANIGRAMA_ID IN ( SELECT ORN.ORGANIGRAMA_ID 
                                                FROM TBL_ORGANIGRAMA ORN
                                               WHERE ORN.ENTIDAD_ID = V_ENTIDAD_ID 
                                                 AND ORN.ESTADO_REGISTRO = '1' 
                                                 AND ( ORN.ORGANIGRAMA_ID = V_UO ) 
                                            )
                                            
                                            OR V_UO IS NULL) 
		 AND (V_UO_SUPERIOR IS NOT NULL AND EOR.ORGANIGRAMA_ID IN ( SELECT ORN.ORGANIGRAMA_ID 
                                                FROM TBL_ORGANIGRAMA ORN
                                               WHERE ORN.ENTIDAD_ID = V_ENTIDAD_ID 
                                                 AND (ORN.PADRE_ORGANIGRAMA_ID = V_UO_SUPERIOR ) 
                                            ) 
		     OR V_UO_SUPERIOR IS NULL) 	  
		      AND ( (EOR.ORGANIGRAMA_ID IN ( SELECT ORN.ORGANIGRAMA_ID  FROM TBL_ORGANIGRAMA ORN
             WHERE ORN.ENTIDAD_ID = V_ENTIDAD_ID AND ORN.ESTADO_REGISTRO = '1' AND ORN.NATURALEZA_ORGANO  = V_TIPO_ORGANO)
             OR V_TIPO_ORGANO IS NULL))  
           AND (ETE.REGIMEN_LABORAL_ID   = V_REGIMEN_LABORAL OR V_REGIMEN_LABORAL IS NULL) 
           AND ((PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES) LIKE '%'||V_APE_PAT_MAT_NOM||'%' OR V_APE_PAT_MAT_NOM IS NULL) 
           AND (PTD.TIPO_DOCUMENTO       = V_TIPO_DOCUMENTO OR V_TIPO_DOCUMENTO IS NULL)
            AND (DET.ESTADO_SRV_CIV_GDR_ID = V_ESTADO_SERVCIVIL_GDR OR V_ESTADO_SERVCIVIL_GDR IS NULL)
              AND ETE.PUESTO_ID = DET.PUESTO_ID 
         ORDER BY PPN.APELLIDO_PATERNO;


        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PARTICIPANTES_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PARTICIPANTES_SERVIDOR_CIVIL_NOACTIVOS;

    PROCEDURE SP_BUSCAR_PARTICIPANTES_EVALUADORES_SERVIDOR_CIVIL (V_ENTIDAD_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                             ,CUR_TEST                 OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT 
            DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlFoto",
            (SELECT COUNT(1) 
               FROM SCH_ENTIDAD.TBL_DETALLE_UO DUO
              INNER JOIN SCH_MAESTRA.TBL_PARAMETRO EST1 ON EST1.CODIGO_NUMERO = DUO.ESTADO_SRV_CIV_GDR_ID AND EST1.TIPO_PARAMETRO = 'ESTADO_SERVIDOR_CIVIL_GDR'
              WHERE DUO.ENTIDAD_ID = DET.ENTIDAD_ID 
--                AND DUO.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID 
                AND EST1.CODIGO_NUMERO IN(1,2)
                AND DUO.PERSONA_EVALUADOR_ID = DET.PERSONA_ID 
                AND DUO.ESTADO_REGISTRO = '1') AS "cantidadEvaluados",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            DET.INDICADOR_META AS "indicadorMeta"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = DET.PERSONA_ID AND ETE.ENTIDAD_ID = DET.ENTIDAD_ID        
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID AND ETP.ES_JEFE='S'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE DET.ENTIDAD_ID              = V_ENTIDAD_ID
           AND DET.ROL_ID                 IN(1,3)
           AND DET.ESTADO_SRV_CIV_GDR_ID  IN(1,2) 
           AND DET.ESTADO_REGISTRO = '1'           
           AND ETE.PUESTO_ID = DET.PUESTO_ID
         ORDER BY "apellidosNombres";

        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PARTICIPANTES_EVALUADORES_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PARTICIPANTES_EVALUADORES_SERVIDOR_CIVIL; 

    PROCEDURE SP_BUSCAR_PARTICIPANTES_EVALUADOS_SERVIDOR_CIVIL (V_ENTIDAD_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                           ,V_UO_ID                   IN SCH_ENTIDAD.TBL_DETALLE_UO.ORGANIGRAMA_ID%TYPE
                                                           ,V_PERSONA_EVALUADOR_ID    IN SCH_ENTIDAD.TBL_DETALLE_UO.PERSONA_EVALUADOR_ID%TYPE
                                                           ,CUR_TEST                 OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT
            DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlfoto",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            DET.INDICADOR_META AS "indicadorMeta"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = DET.PERSONA_ID AND ETE.ENTIDAD_ID = DET.ENTIDAD_ID        
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE 1 = 1
           AND DET.ENTIDAD_ID             = V_ENTIDAD_ID 
           --AND DET.ORGANIGRAMA_ID         = V_UO_ID
           AND DET.PERSONA_ID   = V_PERSONA_EVALUADOR_ID 
          -- AND DET.ESTADO_SRV_CIV_GDR_ID IN (1,2)
           --AND DET.ROL_ID                IN(2,3)
           --AND DET.ESTADO_REGISTRO        = '1'
         ORDER BY PPN.APELLIDO_PATERNO;


        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PARTICIPANTES_EVALUADOS_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PARTICIPANTES_EVALUADOS_SERVIDOR_CIVIL; 

      PROCEDURE SP_BUSCAR_PARTICIPANTES_EVALUADOS_SERVIDOR_CIVIL_GDR (V_ENTIDAD_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                           ,V_PERSONA_ID                   IN SCH_ENTIDAD.TBL_DETALLE_UO.PERSONA_ID%TYPE
                                                           ,CUR_TEST                 OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT
            DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlfoto",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            DET.INDICADOR_META AS "indicadorMeta"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = DET.PERSONA_ID AND ETE.ENTIDAD_ID = DET.ENTIDAD_ID        
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE 1 = 1
           AND DET.ENTIDAD_ID             = V_ENTIDAD_ID 
           AND DET.PERSONA_ID         = V_PERSONA_ID
           AND DET.ROL_ID                IN(2,3)
           AND DET.ESTADO_REGISTRO        = '1'
         ORDER BY PPN.APELLIDO_PATERNO;


        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PARTICIPANTES_EVALUADOS_SERVIDOR_CIVIL_GDR>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PARTICIPANTES_EVALUADOS_SERVIDOR_CIVIL_GDR; 

    PROCEDURE SP_BUSCAR_PARTICIPANTES_EVALUADOS_NO_MANDO_MEDIO_SERVIDOR_CIVIL (V_ENTIDAD_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                                          ,V_UO_ID                   IN SCH_ENTIDAD.TBL_DETALLE_UO.ORGANIGRAMA_ID%TYPE
                                                                          ,V_PERSONA_EVALUADOR_ID    IN SCH_ENTIDAD.TBL_DETALLE_UO.PERSONA_EVALUADOR_ID%TYPE
                                                                          ,CUR_TEST                 OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT
            DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlfoto",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            DET.INDICADOR_META AS "indicadorMeta"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID  
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = PTP.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = PPN.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE 1 = 1
           AND ETE.ENTIDAD_ID             = DET.ENTIDAD_ID
           AND DET.ENTIDAD_ID             = V_ENTIDAD_ID               
           AND DET.ORGANIGRAMA_ID         = V_UO_ID                    
           AND DET.PERSONA_EVALUADOR_ID   = V_PERSONA_EVALUADOR_ID     
           AND DET.SEGMENTO_ID           <> 3
           --AND DET.ROL_ID                IN(2,3)
           AND DET.ESTADO_SRV_CIV_GDR_ID IN(1,2) 
           AND DET.ESTADO_REGISTRO        = '1'
         ORDER BY PPN.APELLIDO_PATERNO, PPN.NOMBRES;


        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PARTICIPANTES_EVALUADOS_NO_MANDO_MEDIO_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PARTICIPANTES_EVALUADOS_NO_MANDO_MEDIO_SERVIDOR_CIVIL; 

    PROCEDURE SP_BUSCAR_PARTICIPANTES_EVALUADOS_SIN_EVALUADOR_MANDO_MEDIO_SERVIDOR_CIVIL (V_ENTIDAD_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                                                         ,V_DET_UO_ID               IN SCH_ENTIDAD.TBL_DETALLE_UO.DET_UO_ID%TYPE
                                                                                         ,V_UO_ID                   IN SCH_ENTIDAD.TBL_DETALLE_UO.ORGANIGRAMA_ID%TYPE
                                                                                         ,V_PERSONA_EVALUADOR_ID    IN SCH_ENTIDAD.TBL_DETALLE_UO.PERSONA_EVALUADOR_ID%TYPE
                                                                                         ,CUR_TEST                 OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT 
            DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlfoto",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            DET.INDICADOR_META AS "indicadorMeta"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID  
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = PTP.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = PPN.PERSONA_ID         
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO EST ON EST.CODIGO_NUMERO = DET.ESTADO_SRV_CIV_GDR_ID AND EST.TIPO_PARAMETRO = 'ESTADO_SERVIDOR_CIVIL_GDR' 
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE 1 = 1
           AND ETE.ENTIDAD_ID             = DET.ENTIDAD_ID
           AND DET.ENTIDAD_ID             = V_ENTIDAD_ID 
           AND DET.ORGANIGRAMA_ID         = V_UO_ID
           AND (DET.PERSONA_EVALUADOR_ID <> V_PERSONA_EVALUADOR_ID OR V_PERSONA_EVALUADOR_ID IS NULL)
           AND DET.SEGMENTO_ID 			 <> 3
           AND ETP.ES_JEFE 				  = 'N'
           AND DET.DET_UO_ID             <> V_DET_UO_ID
          -- AND DET.ROL_ID                IN(2,3)
           AND DET.ESTADO_SRV_CIV_GDR_ID IN(1,2) 
           AND DET.ESTADO_REGISTRO        = '1'
         ORDER BY "apellidosNombres";


        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PARTICIPANTES_EVALUADOS_SIN_EVALUADOR_MANDO_MEDIO_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PARTICIPANTES_EVALUADOS_SIN_EVALUADOR_MANDO_MEDIO_SERVIDOR_CIVIL;    

    PROCEDURE SP_BUSCAR_PARTICIPANTES_MANDO_MEDIO (V_ENTIDAD_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                  ,V_UO_ID                   IN SCH_ENTIDAD.TBL_DETALLE_UO.ORGANIGRAMA_ID%TYPE
                                                  ,V_PERSONA_EVALUADOR_ID    IN SCH_ENTIDAD.TBL_DETALLE_UO.PERSONA_EVALUADOR_ID%TYPE
                                                  ,CUR_TEST                 OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT 
            DISTINCT DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlfoto",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            DET.INDICADOR_META AS "indicadorMeta"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID  
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = PTP.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = PPN.PERSONA_ID         
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE 1 = 1
           AND ETE.ENTIDAD_ID             = DET.ENTIDAD_ID
           AND DET.ENTIDAD_ID             = V_ENTIDAD_ID 
           AND DET.ORGANIGRAMA_ID         = V_UO_ID
           AND DET.PERSONA_EVALUADOR_ID   = V_PERSONA_EVALUADOR_ID 
           AND DET.SEGMENTO_ID            = 3
           AND DET.ESTADO_SRV_CIV_GDR_ID IN(1,2) 
           AND DET.ESTADO_REGISTRO        = '1'
         ORDER BY "apellidosNombres";


    EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
		VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
		raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PARTICIPANTES_MANDO_MEDIO>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PARTICIPANTES_MANDO_MEDIO;  

    PROCEDURE SP_BUSCAR_PARTICIPANTES_EVALUADOS_SIN_EVALUADORES (V_ENTIDAD_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                                ,V_UO_ID                   IN SCH_ENTIDAD.TBL_DETALLE_UO.ORGANIGRAMA_ID%TYPE
                                                                ,CUR_TEST                 OUT cursor_test) IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT DISTINCT "detUnidadOrganicaId",
"uoId",
        "personaId",
        "apellidosNombres",
        "puestoId",
        "puesto",
        "segmentoId",
        "segmento",
        "rolId",
        "descripcionRoles",
        "urlfoto", 
        "personaEvaluadorId",
        "indicadorMeta" FROM (SELECT 
        DISTINCT DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlfoto",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            DET.INDICADOR_META AS "indicadorMeta"
          FROM SCH_ENTIDAD.TBL_ORGANIGRAMA ORG
          INNER JOIN SCH_ENTIDAD.TBL_DETALLE_UO DET ON DET.ORGANIGRAMA_ID = ORG.ORGANIGRAMA_ID 
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID  
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID 
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = PPN.PERSONA_ID 
           INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
                LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE 1 = 1
           AND ETE.ENTIDAD_ID             = DET.ENTIDAD_ID
           AND ORG.ENTIDAD_ID             = V_ENTIDAD_ID
           AND ORG.PADRE_ORGANIGRAMA_ID      = V_UO_ID
           AND DET.ES_RESPONSABLE = 'S'
            AND DET.PERSONA_EVALUADOR_ID  IS NULL
           AND DET.ESTADO_SRV_CIV_GDR_ID IN(1,2) 
           AND DET.ESTADO_REGISTRO        = '1' 
           UNION ALL
           SELECT 
            DISTINCT DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlfoto",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            DET.INDICADOR_META AS "indicadorMeta"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
           INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA ORG ON ORG.ORGANIGRAMA_ID  = DET.ORGANIGRAMA_ID 
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID  
         
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = PTP.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = PPN.PERSONA_ID         
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE 1 = 1
           AND ETE.ENTIDAD_ID             = DET.ENTIDAD_ID
           AND DET.ENTIDAD_ID             = V_ENTIDAD_ID
           AND DET.ORGANIGRAMA_ID         = V_UO_ID
           AND DET.ES_RESPONSABLE = 'N'
           AND DET.PERSONA_EVALUADOR_ID  IS NULL 
           AND DET.ESTADO_SRV_CIV_GDR_ID IN(1,2) 
           AND DET.ESTADO_REGISTRO        = '1') ORDER BY "apellidosNombres";


    EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
		VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
		raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PARTICIPANTES_EVALUADOS_SIN_EVALUADORES>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PARTICIPANTES_EVALUADOS_SIN_EVALUADORES;  

PROCEDURE SP_DATOS_EVALUADOR_Y_EVALUADO (V_DET_OU_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.DET_UO_ID%TYPE
                                         ,CUR_TEST                 OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT
            ENT.URL_LOGO_ENTIDAD AS "urlLogoEntidad",
            PTP.APELLIDO_PATERNO||' '||PTP.APELLIDO_MATERNO||' '||PTP.NOMBRES AS "apellidosNombresEvaluado",
            DOC.NUMERO_DOCUMENTO AS "nroDocumentoEvaluado",
            ETP.DESCRIPCION AS "puestoEvaluado",
            SEG.DESCRIPCION AS "segmentoEvaluado",
            EOR.DESCRIPCION AS "unidadOrganicaEvaluado",
            ENT.DESCRIPCION_ENTIDAD AS "entidadEvaluado",
            PTP2.APELLIDO_PATERNO||' '||PTP2.APELLIDO_MATERNO||' '||PTP2.NOMBRES AS "apellidosNombresEvaluador",
            DOC2.NUMERO_DOCUMENTO AS "nroDocumentoEvaluador",
            ETP2.DESCRIPCION AS "puestoEvaluador",
            SEG2.DESCRIPCION AS "segmentoEvaluador",
            EOR2.DESCRIPCION AS "unidadOrganicaEvaluador",
            ENT2.DESCRIPCION_ENTIDAD AS "entidadEvaluador"
            FROM TBL_DETALLE_UO DET
            LEFT JOIN SCH_ENTIDAD.TBL_ENTIDAD ENT ON ENT.ENTIDAD_ID = DET.ENTIDAD_ID
            LEFT JOIN SCH_ENTIDAD.TBL_ENTIDAD ENT2 ON ENT2.ENTIDAD_ID = DET.ENTIDAD_ID
            INNER JOIN SCH_ENTIDAD.TBL_DETALLE_UO DET2 ON DET2.PERSONA_ID = DET.PERSONA_EVALUADOR_ID
            INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PTP ON PTP.PERSONA_ID = DET.PERSONA_ID
            INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PTP ON PTP.PERSONA_ID = DET.PERSONA_ID
            LEFT JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PTP2 ON PTP2.PERSONA_ID = DET.PERSONA_EVALUADOR_ID
            INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOC ON DOC.PERSONA_ID = DET.PERSONA_ID 
            INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOC2 ON DOC2.PERSONA_ID = DET.PERSONA_EVALUADOR_ID 
            INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
            INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP2 ON ETP2.PUESTO_ID = DET2.PUESTO_ID
            LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
            LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG2 ON SEG2.CODIGO_NUMERO = DET2.SEGMENTO_ID AND SEG2.TIPO_PARAMETRO = 'SEGMENTO_GDR'
            INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA EOR ON EOR.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID AND EOR.ENTIDAD_ID = DET.ENTIDAD_ID 
            INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA EOR2 ON EOR2.ORGANIGRAMA_ID = DET2.ORGANIGRAMA_ID AND EOR2.ENTIDAD_ID = DET2.ENTIDAD_ID 
		WHERE 
		DET.DET_UO_ID = V_DET_OU_ID
        AND DET.ESTADO_REGISTRO=1
        AND DET2.ESTADO_REGISTRO=1
        AND DET2.ENTIDAD_ID=DET.ENTIDAD_ID
        AND ROWNUM =1;
        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_DATOS_EVALUADOR_Y_EVALUADO>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_DATOS_EVALUADOR_Y_EVALUADO;    

PROCEDURE SP_DATOS_PARTICIPANTE (V_DET_OU_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.DET_UO_ID%TYPE
                                 ,V_SEGMENTO_ID  		  IN SCH_ENTIDAD.TBL_DETALLE_UO.SEGMENTO_ID%TYPE
                                 ,CUR_TEST                 OUT cursor_test) IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT
            ENT.URL_LOGO_ENTIDAD AS "urlLogoEntidad",
            PTP.APELLIDO_PATERNO||' '||PTP.APELLIDO_MATERNO||' '||PTP.NOMBRES AS "apellidosNombresParticipante",
            DOC.NUMERO_DOCUMENTO AS "nroDocumentoParticipante",
            ETP.DESCRIPCION AS "puestoParticipante",
            SEG.DESCRIPCION AS "segmentoParticipante",
            EOR.DESCRIPCION AS "unidadOrganicaParticipante",
            ENT.DESCRIPCION_ENTIDAD AS "entidadParticipante"
            FROM TBL_DETALLE_UO DET
            LEFT JOIN SCH_ENTIDAD.TBL_ENTIDAD ENT ON ENT.ENTIDAD_ID = DET.ENTIDAD_ID
			LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = V_SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
            INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PTP ON PTP.PERSONA_ID = DET.PERSONA_ID
            INNER JOIN SCH_PERSONA.TBL_DOCUMENTO DOC ON DOC.PERSONA_ID = DET.PERSONA_ID 
            INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
            INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA EOR ON EOR.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID AND EOR.ENTIDAD_ID = DET.ENTIDAD_ID 
		WHERE 
		DET.DET_UO_ID = V_DET_OU_ID
        AND DET.ESTADO_REGISTRO=1
        AND ROWNUM =1;
        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_DATOS_PARTICIPANTE>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
END SP_DATOS_PARTICIPANTE;  


PROCEDURE SP_BUSCAR_PERSONAS_SERVIDOR_CIVIL (V_ENTIDAD_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                           ,V_PERSONA_ID    IN SCH_ENTIDAD.TBL_DETALLE_UO.PERSONA_ID%TYPE
                                                           ,CUR_TEST                 OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT
        DET.PERSONA_ID,
            DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlfoto",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            DET.INDICADOR_META AS "indicadorMeta"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = DET.PERSONA_ID AND ETE.ENTIDAD_ID = DET.ENTIDAD_ID        
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE 1 = 1
           AND DET.ENTIDAD_ID             = V_ENTIDAD_ID 
           AND DET.PERSONA_ID   = V_PERSONA_ID 
           --AND DET.ROL_ID                IN(2,3)
           --AND DET.ESTADO_REGISTRO        = '1'
         ORDER BY PPN.APELLIDO_PATERNO;

        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PERSONAS_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PERSONAS_SERVIDOR_CIVIL;     


       PROCEDURE SP_BUSCAR_CORREO_PERSONA (V_PERSONA_ID    IN SCH_ENTIDAD.TBL_DETALLE_UO.PERSONA_ID%TYPE,
                                        CUR_TEST        OUT cursor_test) IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT * FROM(
            SELECT
                TPN.PERSONA_ID AS "personaId",
                TPN.APELLIDO_PATERNO AS "apePaterno",
                TPN.APELLIDO_MATERNO AS "apeMaterno",
                TPN.NOMBRES AS "nombres",                
                TC.CORREO AS "correo",
                ROW_NUMBER() OVER (PARTITION BY TC.PERSONA_ID ORDER BY TC.TIPO_CORREO DESC) AS RANGO
            FROM SCH_PERSONA.TBL_CORREO TC
            INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL TPN ON TPN.PERSONA_ID = TC.PERSONA_ID
            WHERE TC.PERSONA_ID = V_PERSONA_ID
        ) WHERE RANGO =1; 


    EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
		VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
		raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_CORREO_PERSONA>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_CORREO_PERSONA;  
PROCEDURE SP_BUSCAR_CORREO_EXISTENTE_SERVIDOR_CIVIL (V_CORREO IN VARCHAR2
                                                            ,CUR_TEST OUT cursor_test) IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
                SELECT 
                 NVL(DET.FLAG_HABILITAR,0) AS "flagHabilitar",
            DET.DET_UO_ID AS "detUnidadOrganicaId",            
            DET.ORGANIGRAMA_ID AS "organigramaId", 
            DET.PERSONA_ID AS "personaId",
            PTD.NUMERO_DOCUMENTO AS "docEntidadId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            EOR.SIGLA AS "unidadOrganica",
            ETP.DESCRIPCION AS "puesto",
            TAS.VALOR_TEXTO AS "tipoAsignacion",
            NVL(DET.SEGMENTO_ID,0) AS "segmentoId",
            NVL(DET.ROL_ID,0) AS "rolId",
            CIV.VALOR_TEXTO AS "estado",
            DET.ESTADO_REGISTRO AS "estadoRegistro",
            RLA.CODIGO_NUMERO AS "regimenId"
         FROM SCH_ENTIDAD.TBL_EMPLEADO ETE
         INNER JOIN SCH_ENTIDAD.TBL_DETALLE_UO DET ON ete.entidad_id=det.entidad_id AND ETE.PERSONA_ID=det.persona_id AND ete.puesto_id=det.puesto_id    
         INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA EOR ON det.organigrama_id=EOR.organigrama_id AND DET.ENTIDAD_ID=eor.entidad_id
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = ETE.PUESTO_ID AND ETP.ENTIDAD_ID=ETE.ENTIDAD_ID AND ETP.ORGANIGRAMA_ID=EOR.ORGANIGRAMA_ID
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = ETE.PERSONA_ID 
         INNER JOIN SCH_PERSONA.TBL_CORREO CO ON CO.PERSONA_ID = PTP.PERSONA_ID 
         INNER JOIN SCH_PERSONA.TBL_DOCUMENTO PTD ON PTD.DOCUMENTO_ID = PTP.DOCUMENTO_ID
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO CIV ON CIV.CODIGO_NUMERO = DET.ESTADO_REGISTRO AND CIV.TIPO_PARAMETRO = 'ESTADO_SERVIDOR_CIVIL'
        INNER JOIN SCH_MAESTRA.TBL_PARAMETRO TAS ON TAS.CODIGO_NUMERO = DET.TIPO_ASIGNACION AND TAS.TIPO_PARAMETRO = 'TIPO_ASIGNACION_SERVIDOR_CIVIL'
         INNER JOIN SCH_MAESTRA.TBL_PARAMETRO RLA ON RLA.CODIGO_NUMERO = ETE.REGIMEN_LABORAL_ID AND RLA.TIPO_PARAMETRO = 'TIPO_REGIMEN_LABORAL'
         WHERE
         CO.CORREO = V_CORREO
         ORDER BY PPN.APELLIDO_PATERNO;


    EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
		VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
		raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_CORREO_EXISTENTE_SERVIDOR_CIVIL>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_CORREO_EXISTENTE_SERVIDOR_CIVIL;  

     PROCEDURE SP_BUSCAR_CORREO_PERSONA_GESTOR (V_ENTIDAD_ID    IN SCH_ENTIDAD.TBL_ENTIDAD_GESTOR.ENTIDAD_ID%TYPE,
                                            V_TIPO_GESTOR_ID    IN SCH_ENTIDAD.TBL_ENTIDAD_GESTOR.TIPO_GESTOR_ID%TYPE,
                                    CUR_TEST                 OUT cursor_test) IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);

    NRO_ROLES NUMBER := 0;
    V_ROL_ID NUMBER := 0;
    V_PERSONA_ID NUMBER := 0;
    V_CONTAR_PERSONA_ID NUMBER;

    BEGIN

        SELECT COUNT(TEG.ROL_ID)
        INTO NRO_ROLES
        FROM SCH_ENTIDAD.TBL_ENTIDAD_GESTOR TEG
        WHERE TEG.ENTIDAD_ID= V_ENTIDAD_ID 
        AND TEG.TIPO_GESTOR_ID=V_TIPO_GESTOR_ID;

        IF NRO_ROLES > 0 THEN
            SELECT TEG.ROL_ID INTO V_ROL_ID
            FROM SCH_ENTIDAD.TBL_ENTIDAD_GESTOR TEG
            WHERE TEG.ENTIDAD_ID= V_ENTIDAD_ID 
            AND TEG.TIPO_GESTOR_ID=V_TIPO_GESTOR_ID;
        END IF;

        SELECT
                COUNT(TU.PERSONA_ID) INTO  V_CONTAR_PERSONA_ID
                FROM SCH_SEGURIDAD.TBL_USUARIO_ROL TUR
                INNER JOIN SCH_SEGURIDAD.TBL_USUARIO TU ON TU.USUARIO_ID = TUR.USUARIO_ID
                WHERE TUR.ROL_ID=V_ROL_ID 
                AND TUR.ENTIDAD_ID = V_ENTIDAD_ID;


         IF V_CONTAR_PERSONA_ID =0 THEN
         OPEN CUR_TEST FOR
           SELECT
                TPN.PERSONA_ID AS "personaId",
                TPN.APELLIDO_PATERNO AS "apePaterno",
                TPN.APELLIDO_MATERNO AS "apeMaterno",
                TPN.NOMBRES AS "nombres",                
                TC.CORREO AS "correo",
                ROW_NUMBER() OVER (PARTITION BY TC.PERSONA_ID ORDER BY TC.TIPO_CORREO DESC) AS RANGO
            FROM SCH_PERSONA.TBL_CORREO TC
            INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL TPN ON TPN.PERSONA_ID = TC.PERSONA_ID
            WHERE TC.PERSONA_ID = V_PERSONA_ID;
            END IF;

        IF V_CONTAR_PERSONA_ID >0 THEN
        SELECT PERSONA.PERSONA_ID  INTO V_PERSONA_ID
            FROM (
                SELECT
                    TU.PERSONA_ID AS PERSONA_ID,
                    ROW_NUMBER() OVER (PARTITION BY TU.PERSONA_ID ORDER BY TU.FECHA_CREACION DESC) AS RANGO
                FROM SCH_SEGURIDAD.TBL_USUARIO_ROL TUR
                INNER JOIN SCH_SEGURIDAD.TBL_USUARIO TU ON TU.USUARIO_ID = TUR.USUARIO_ID
                WHERE TUR.ROL_ID=V_ROL_ID 
                AND TUR.ENTIDAD_ID = V_ENTIDAD_ID
                ORDER BY TU.FECHA_CREACION DESC) PERSONA
        WHERE RANGO = 1 AND ROWNUM=1;

        SELECT PERSONA.PERSONA_ID  INTO V_PERSONA_ID
            FROM (
                SELECT
                    TU.PERSONA_ID AS PERSONA_ID,
                    ROW_NUMBER() OVER (PARTITION BY TU.PERSONA_ID ORDER BY TU.FECHA_CREACION DESC) AS RANGO
                FROM SCH_SEGURIDAD.TBL_USUARIO_ROL TUR
                INNER JOIN SCH_SEGURIDAD.TBL_USUARIO TU ON TU.USUARIO_ID = TUR.USUARIO_ID
                WHERE TUR.ROL_ID=V_ROL_ID 
                AND TUR.ENTIDAD_ID = V_ENTIDAD_ID
                ORDER BY TU.FECHA_CREACION DESC) PERSONA
        WHERE RANGO = 1 AND ROWNUM=1;

        OPEN CUR_TEST FOR
        SELECT * FROM(
            SELECT
                TPN.PERSONA_ID AS "personaId",
                TPN.APELLIDO_PATERNO AS "apePaterno",
                TPN.APELLIDO_MATERNO AS "apeMaterno",
                TPN.NOMBRES AS "nombres",                
                TC.CORREO AS "correo",
                ROW_NUMBER() OVER (PARTITION BY TC.PERSONA_ID ORDER BY TC.TIPO_CORREO DESC) AS RANGO
            FROM SCH_PERSONA.TBL_CORREO TC
            INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL TPN ON TPN.PERSONA_ID = TC.PERSONA_ID
            WHERE TC.PERSONA_ID = V_PERSONA_ID
        ) WHERE RANGO =1; 
          END IF;



      EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
		VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
		raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_CORREO_PERSONA_GESTOR>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
     END SP_BUSCAR_CORREO_PERSONA_GESTOR;   


PROCEDURE SP_LISTAR_PUESTOS (V_ES_JEFE IN SCH_ENTIDAD.TBL_PUESTO.ES_JEFE%TYPE,
                             V_ID_UO IN SCH_ENTIDAD.TBL_PUESTO.ORGANIGRAMA_ID%TYPE,
                             V_DESCRIPCION IN SCH_ENTIDAD.TBL_PUESTO.DESCRIPCION%TYPE,
                             V_ENTIDAD_ID IN SCH_ENTIDAD.TBL_PUESTO.ENTIDAD_ID%TYPE,
                             V_PUESTO_ID IN SCH_ENTIDAD.TBL_PUESTO.PUESTO_ID%TYPE,
                             CUR_TEST OUT CURSOR_TEST) 
IS
  VL_NRO_ERROR NUMBER;
  VL_DES_ERROR VARCHAR(3000);
BEGIN
    OPEN CUR_TEST FOR
      SELECT 
             PST.ENTIDAD_ID AS entidadId,
             PST.PUESTO_ID AS "puestoId",
             ORG.ORGANIGRAMA_ID AS "uoId",
             ORG.DESCRIPCION AS "unidadOrganica",
             PST.DESCRIPCION AS "nombrePuesto",
            CASE WHEN PAR.CODIGO_NUMERO = 1 THEN  
             (SELECT PST2.DESCRIPCION
              FROM   SCH_ENTIDAD.TBL_PUESTO PST2
              WHERE  PST2.ESTADO_REGISTRO = 1
                     AND PST2.ENTIDAD_ID = PST.ENTIDAD_ID
                     AND UPPER(PST2.ES_JEFE) = UPPER('S')
                     AND PST2.ORGANIGRAMA_ID = ORG.PADRE_ORGANIGRAMA_ID
                     AND ROWNUM<2) 
                ELSE  
                    (SELECT PST2.DESCRIPCION
                    FROM   SCH_ENTIDAD.TBL_PUESTO PST2
                    WHERE  PST2.ESTADO_REGISTRO = 1
                     AND PST2.ENTIDAD_ID = PST.ENTIDAD_ID
                     AND UPPER(PST2.ES_JEFE) = UPPER('S')
                     AND PST2.ORGANIGRAMA_ID = ORG.ORGANIGRAMA_ID
                     AND ROWNUM<2)   
               END AS "jefeInmediato",
              PAR.VALOR_TEXTO AS "esJefe",
             (SELECT COUNT(DET.DET_UO_ID)
              FROM   SCH_ENTIDAD.TBL_DETALLE_UO DET
              WHERE  DET.PUESTO_ID = PST.PUESTO_ID
                     AND DET.ESTADO_REGISTRO = '1' 
                     AND PST.Estado_Registro = '1'
                     AND DET.TIPO_ASIGNACION = 1
                     AND DET.ORGANIGRAMA_ID = PST.ORGANIGRAMA_ID) AS "nroTrabajadores"
                FROM   SCH_ENTIDAD.TBL_PUESTO PST
                       LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO PAR
                              ON PAR.TIPO_PARAMETRO = 'ES_JEFE_UO'
                                 AND PAR.CODIGO_TEXTO = PST.ES_JEFE
                       INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA ORG
                               ON ORG.ENTIDAD_ID = PST.ENTIDAD_ID
                                  AND ORG.ORGANIGRAMA_ID = PST.ORGANIGRAMA_ID
                                  AND ORG.ESTADO_REGISTRO = PST.ESTADO_REGISTRO
                WHERE  PST.ESTADO_REGISTRO = '1' 
            AND (PST.ES_JEFE  = V_ES_JEFE OR (V_ES_JEFE IS NULL))
            AND (PST.ORGANIGRAMA_ID  = V_ID_UO OR (V_ID_UO IS NULL))
            AND (PST.ENTIDAD_ID  = V_ENTIDAD_ID OR (V_ENTIDAD_ID IS NULL))
            AND (PST.PUESTO_ID  = V_PUESTO_ID OR (V_PUESTO_ID IS NULL))
            AND UPPER(PST.DESCRIPCION) like '%'|| UPPER(V_DESCRIPCION) || '%'
      ORDER  BY ORG.DESCRIPCION;
EXCEPTION
  WHEN OTHERS THEN
             VL_NRO_ERROR := SQLCODE;

             VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);

             RAISE_APPLICATION_ERROR(-20000,'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_LISTAR_PUESTOS>>.'
             ||VL_NRO_ERROR
             ||', '
             ||VL_DES_ERROR);
END SP_LISTAR_PUESTOS; 

PROCEDURE SP_BUSCAR_PARTICIPANTES_EVALUADOS_SIN_EVALUADORES_ENTIDAD (V_ENTIDAD_ID IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                            ,CUR_TEST OUT cursor_test) IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT 
            DISTINCT DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlfoto",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            DET.INDICADOR_META AS "indicadorMeta"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID  
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = PTP.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = PPN.PERSONA_ID         
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE 1 = 1
           AND ETE.ENTIDAD_ID             = DET.ENTIDAD_ID
           AND DET.ENTIDAD_ID             = V_ENTIDAD_ID 
           AND DET.PERSONA_EVALUADOR_ID  IS NULL 
           AND DET.ROL_ID                IN(2,3)
           AND DET.ESTADO_SRV_CIV_GDR_ID IN(1,2) 
           AND DET.ESTADO_REGISTRO        = '1'
         ORDER BY "apellidosNombres";


    EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
		VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
		raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PARTICIPANTES_EVALUADOS_SIN_EVALUADORES_ENTIDAD>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PARTICIPANTES_EVALUADOS_SIN_EVALUADORES_ENTIDAD;  


PROCEDURE SP_BUSCAR_PARTICIPANTES_EVALUADORES_Y_SIN_EVALUADORES_ENTIDAD (V_ENTIDAD_ID IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                            ,V_SEGMENTO_ID IN SCH_MAESTRA.TBL_PARAMETRO.CODIGO_NUMERO%TYPE
                                                            ,V_UO_ID IN SCH_ENTIDAD.TBL_ORGANIGRAMA.ORGANIGRAMA_ID%TYPE
                                                            ,CUR_TEST OUT cursor_test) IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
       SELECT  
        DISTINCT "detUnidadOrganicaId",
        "uoId",
        "areaAbreviado",
        "personaId",
        "apellidosNombres",
        "puestoId",
        "puesto",
        "segmentoId",
        "segmento",
        "segmentoCorto",
        "rolId",
        "descripcionRoles",
        "urlFoto",
        "personaEvaluadorId",
        "cantidadEvaluados",
        "indicadorMeta",
        "flagEvaluador",
        "estado"
        FROM (SELECT 
            DISTINCT DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            (SELECT SIGLA FROM SCH_ENTIDAD.TBL_ORGANIGRAMA WHERE ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID) AS "areaAbreviado",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            SEG.CODIGO_TEXTO AS "segmentoCorto",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlFoto",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            (SELECT COUNT(1) 
               FROM SCH_ENTIDAD.TBL_DETALLE_UO DUO
              INNER JOIN SCH_MAESTRA.TBL_PARAMETRO EST1 ON EST1.CODIGO_NUMERO = DUO.ESTADO_SRV_CIV_GDR_ID AND EST1.TIPO_PARAMETRO = 'ESTADO_SERVIDOR_CIVIL_GDR'
              WHERE DUO.ENTIDAD_ID = DET.ENTIDAD_ID 
--                AND DUO.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID 
                AND EST1.CODIGO_NUMERO IN(1,2)
                AND DUO.PERSONA_EVALUADOR_ID = DET.PERSONA_ID 
                AND DUO.ESTADO_REGISTRO = '1') AS "cantidadEvaluados",
            DET.INDICADOR_META AS "indicadorMeta",
            (CASE WHEN DET.PERSONA_EVALUADOR_ID IS NULL THEN 0 ELSE 1 END) AS "flagEvaluador",
            DET.ESTADO_SRV_CIV_GDR_ID AS "estado"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = DET.PERSONA_ID  
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = PTP.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = PPN.PERSONA_ID         
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE 1 = 1
           AND ETE.ENTIDAD_ID             = DET.ENTIDAD_ID
           AND DET.ENTIDAD_ID             = V_ENTIDAD_ID 
           AND DET.ROL_ID                IN(1,2,3)
           AND DET.ESTADO_SRV_CIV_GDR_ID IN(1,2) 
           AND DET.ESTADO_REGISTRO        = '1'
           AND (DET.SEGMENTO_ID =  V_SEGMENTO_ID  OR V_SEGMENTO_ID IS NULL)
           AND (DET.ORGANIGRAMA_ID =  V_UO_ID  OR V_UO_ID IS NULL)
         )
         UNION ALL
         (SELECT 
            DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            (SELECT SIGLA FROM SCH_ENTIDAD.TBL_ORGANIGRAMA WHERE ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID) AS "areaAbreviado",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            SEG.CODIGO_TEXTO AS "segmentoCorto",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlFoto",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            (SELECT COUNT(1) 
               FROM SCH_ENTIDAD.TBL_DETALLE_UO DUO
              INNER JOIN SCH_MAESTRA.TBL_PARAMETRO EST1 ON EST1.CODIGO_NUMERO = DUO.ESTADO_SRV_CIV_GDR_ID AND EST1.TIPO_PARAMETRO = 'ESTADO_SERVIDOR_CIVIL_GDR'
              WHERE DUO.ENTIDAD_ID = DET.ENTIDAD_ID 
--                AND DUO.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID 
                AND EST1.CODIGO_NUMERO IN(1,2)
                AND DUO.PERSONA_EVALUADOR_ID = DET.PERSONA_ID 
                AND DUO.ESTADO_REGISTRO = '1') AS "cantidadEvaluados",
            DET.INDICADOR_META AS "indicadorMeta",
            1 AS "flagEvaluador",
            DET.ESTADO_SRV_CIV_GDR_ID AS "estado"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = DET.PERSONA_ID AND ETE.ENTIDAD_ID = DET.ENTIDAD_ID        
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE DET.ENTIDAD_ID              = V_ENTIDAD_ID
           AND DET.ROL_ID                 IS NULL
           AND DET.ESTADO_SRV_CIV_GDR_ID  IN(1,2) 
           AND DET.ESTADO_REGISTRO = '1'
           AND ETE.PUESTO_ID = DET.PUESTO_ID
           AND (DET.SEGMENTO_ID =  V_SEGMENTO_ID  OR V_SEGMENTO_ID IS NULL)
           AND (DET.ORGANIGRAMA_ID =  V_UO_ID  OR V_UO_ID IS NULL)
         ) ORDER BY "apellidosNombres";
    EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
		VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
		raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PARTICIPANTES_EVALUADORES_Y_SIN_EVALUADORES_ENTIDAD>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PARTICIPANTES_EVALUADORES_Y_SIN_EVALUADORES_ENTIDAD;  

    PROCEDURE SP_BUSCAR_PARTICIPANTES_EVALUADOS_SERVIDOR_CIVIL_ENTIDAD (V_ENTIDAD_ID              IN SCH_ENTIDAD.TBL_DETALLE_UO.ENTIDAD_ID%TYPE
                                                           ,V_UO_ID                   IN SCH_ENTIDAD.TBL_DETALLE_UO.ORGANIGRAMA_ID%TYPE
                                                           ,V_PERSONA_EVALUADOR_ID    IN SCH_ENTIDAD.TBL_DETALLE_UO.PERSONA_EVALUADOR_ID%TYPE
                                                           ,V_SEGMENTO_ID IN SCH_MAESTRA.TBL_PARAMETRO.CODIGO_NUMERO%TYPE
                                                           ,CUR_TEST                 OUT cursor_test)IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
        OPEN CUR_TEST FOR
        SELECT
            DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            (SELECT SIGLA FROM SCH_ENTIDAD.TBL_ORGANIGRAMA WHERE ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID) AS "areaAbreviado",
            DET.PERSONA_ID AS "personaId",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            DET.SEGMENTO_ID AS "segmentoId",
            SEG.VALOR_TEXTO AS "segmento",
            SEG.CODIGO_TEXTO AS "segmentoCorto",
            DET.ROL_ID AS "rolId",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlFoto",
            DET.PERSONA_EVALUADOR_ID AS "personaEvaluadorId",
            (SELECT COUNT(1) 
               FROM SCH_ENTIDAD.TBL_DETALLE_UO DUO
              INNER JOIN SCH_MAESTRA.TBL_PARAMETRO EST1 ON EST1.CODIGO_NUMERO = DUO.ESTADO_SRV_CIV_GDR_ID AND EST1.TIPO_PARAMETRO = 'ESTADO_SERVIDOR_CIVIL_GDR'
              WHERE DUO.ENTIDAD_ID = DET.ENTIDAD_ID 
               -- AND DUO.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID 
                AND EST1.CODIGO_NUMERO IN(1,2)
                AND DUO.PERSONA_EVALUADOR_ID = DET.PERSONA_ID 
                AND DUO.ESTADO_REGISTRO = '1') AS "cantidadEvaluados",
            DET.INDICADOR_META AS "indicadorMeta",
            (CASE WHEN DET.PERSONA_EVALUADOR_ID IS NULL THEN 0 ELSE 1 END) AS "flagEvaluador",
            DET.ESTADO_SRV_CIV_GDR_ID AS "estado"
          FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = DET.PERSONA_ID AND ETE.ENTIDAD_ID = DET.ENTIDAD_ID        
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = DET.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = DET.SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = DET.ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE 1 = 1
           AND DET.ENTIDAD_ID             = V_ENTIDAD_ID 
           --AND DET.ORGANIGRAMA_ID         = V_UO_ID
           AND DET.PERSONA_EVALUADOR_ID   = V_PERSONA_EVALUADOR_ID 
           --AND (DET.PERSONA_EVALUADOR_ID =  V_PERSONA_EVALUADOR_ID  OR V_PERSONA_EVALUADOR_ID IS NULL)
           --AND DET.ROL_ID                IN(2,3)
           AND DET.ESTADO_SRV_CIV_GDR_ID IN(1,2) 
           AND DET.ESTADO_REGISTRO        = '1'
           --AND (DET.ORGANIGRAMA_ID =  V_UO_ID  OR V_UO_ID IS NULL)
           AND (DET.SEGMENTO_ID =  V_SEGMENTO_ID  OR V_SEGMENTO_ID IS NULL)
         ORDER BY PPN.APELLIDO_PATERNO;

        EXCEPTION WHEN OTHERS THEN
			VL_NRO_ERROR := SQLCODE;
			VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
			raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_BUSCAR_PARTICIPANTES_EVALUADOS_SERVIDOR_CIVIL_ENTIDAD>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_BUSCAR_PARTICIPANTES_EVALUADOS_SERVIDOR_CIVIL_ENTIDAD; 

PROCEDURE SP_OBTENER_DATOS_PARTICIPANTE (V_DET_UO_ID	IN SCH_ENTIDAD.TBL_DETALLE_UO.DET_UO_ID%TYPE
                                        ,V_PERSONA_ID   IN SCH_ENTIDAD.TBL_DETALLE_UO.PERSONA_ID%TYPE
                                        ,V_SEGMENTO_ID  IN SCH_ENTIDAD.TBL_DETALLE_UO.SEGMENTO_ID%TYPE
                                        ,V_ROL_ID   	IN SCH_ENTIDAD.TBL_DETALLE_UO.ROL_ID%TYPE
										,CUR_TEST 	   OUT cursor_test) IS
    VL_NRO_ERROR NUMBER;
    VL_DES_ERROR VARCHAR(3000);
    BEGIN
		OPEN CUR_TEST FOR
		SELECT 
            DET.DET_UO_ID AS "detUnidadOrganicaId", 
            DET.ORGANIGRAMA_ID AS "uoId",
            ORG.SIGLA AS "areaAbreviado",
            PPN.APELLIDO_PATERNO||' '||PPN.APELLIDO_MATERNO||' '|| PPN.NOMBRES AS "apellidosNombres",
            DET.PUESTO_ID AS "puestoId",
            ETP.DESCRIPCION AS "puesto",
            SEG.VALOR_TEXTO AS "segmento",
            SEG.CODIGO_TEXTO AS "segmentoCorto",
            ROL.VALOR_TEXTO AS "descripcionRoles",
            ETE.URL_FOTO AS "urlFoto",
            (CASE WHEN DET.PERSONA_EVALUADOR_ID IS NULL THEN 0 ELSE 1 END) AS "flagEvaluador",
            (CASE WHEN ETP.ES_JEFE IS NULL THEN 'N' ELSE ETP.ES_JEFE END) AS "esJefe",
			DET.ES_RESPONSABLE AS "esResponsable",
			DET.TIPO_ASIGNACION AS "tipoAsignacion",
			ORG.PADRE_ORGANIGRAMA_ID AS "uoPadreId"
		FROM SCH_ENTIDAD.TBL_DETALLE_UO DET
         INNER JOIN SCH_PERSONA.TBL_PERSONA PTP ON PTP.PERSONA_ID = V_PERSONA_ID  
         INNER JOIN SCH_PERSONA.TBL_PERSONA_NATURAL PPN ON PPN.PERSONA_ID = PTP.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_EMPLEADO ETE ON ETE.PERSONA_ID = PPN.PERSONA_ID
         INNER JOIN SCH_ENTIDAD.TBL_PUESTO ETP ON ETP.PUESTO_ID = DET.PUESTO_ID
         INNER JOIN SCH_ENTIDAD.TBL_ORGANIGRAMA ORG ON ORG.ORGANIGRAMA_ID = DET.ORGANIGRAMA_ID
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO SEG ON SEG.CODIGO_NUMERO = V_SEGMENTO_ID AND SEG.TIPO_PARAMETRO = 'SEGMENTO_GDR'
          LEFT JOIN SCH_MAESTRA.TBL_PARAMETRO ROL ON ROL.CODIGO_NUMERO = V_ROL_ID AND ROL.TIPO_PARAMETRO = 'TIPO_ROL' 
         WHERE DET.DET_UO_ID = V_DET_UO_ID;
    EXCEPTION WHEN OTHERS THEN
        VL_NRO_ERROR := SQLCODE;
		VL_DES_ERROR := SUBSTR(SQLERRM(VL_NRO_ERROR), 1, 512);
		raise_application_error(-20000, 'ERROR: AL EJECUTAR EL PROCEDIMIENTO <<SP_OBTENER_DATOS_PARTICIPANTE>>.'||VL_NRO_ERROR||', '||VL_DES_ERROR);
    END SP_OBTENER_DATOS_PARTICIPANTE;  
    
end PKG_ORGANIGRAMA;